name: Full-Stack CI/CD (Spring Boot + Frontend)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    outputs:
      backend-artifact: ${{ steps.pkg-backend.outputs.file }}
      frontend-artifact: ${{ steps.pkg-frontend.outputs.file }}

    steps:
      # 1) 백엔드 체크아웃 (현재 레포)
      - uses: actions/checkout@v3

      # 2) Java 17 세팅
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # 3) Gradle 빌드
      - run: ./gradlew clean bootJar

      # 4) Health check (optional)
      - run: |
          nohup java -jar build/libs/*.jar &
          sleep 10
          curl --fail http://localhost:8080/actuator/health

      # 5) 백엔드 패키징
      - id: pkg-backend
        run: |
          cp build/libs/*.jar backend-app.jar
          tar czf backend.tar.gz backend-app.jar
          echo "::set-output name=file::backend.tar.gz"

      # 6) 프론트엔드 체크아웃
      - name: Checkout Frontend
        uses: actions/checkout@v3
        with:
          repository: hyun5085/frontend-repo
          token: ${{ secrets.HYUN5085_TOKEN }}
          path: frontend

      # 7) Node.js 세팅
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 8) 프론트엔드 빌드 & 패키징
      - run: |
          cd frontend
          npm ci
          npm run build
          tar czf ../frontend.tar.gz -C build .
        name: Package Frontend
        id: pkg-frontend

  deploy:
    needs: build-and-package
    runs-on: ubuntu-latest
    env:
      SSH_USER: ${{ secrets.EC2_SSH_USER }}
      SSH_HOST: ${{ secrets.EC2_HOST }}

    steps:
      # 1) SSH 키 복원
      - run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > deploy_key.pem
          chmod 600 deploy_key.pem
        name: Restore SSH Key

      # 2) 아티팩트 전송
      - run: |
          rsync -avz -e "ssh -i deploy_key.pem -o StrictHostKeyChecking=no" \
            ${{ needs.build-and-package.outputs.backend-artifact }} \
            ${{ needs.build-and-package.outputs.frontend-artifact }} \
            $SSH_USER@$SSH_HOST:~/deploy/
        name: Copy Artifacts

      # 3) 원격 배포 스크립트 실행
      - run: |
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST << 'EOF'
              set -e
          
              # systemd 서비스 중지
              sudo systemctl stop myapp.service || true

              # 배포 디렉터리 이동 및 압축 해제
              mkdir -p ~/deploy
              mv ~/deploy/backend.tar.gz ~/deploy/backend/
              mv ~/deploy/frontend.tar.gz ~/deploy/frontend/

              cd ~/deploy/backend
              sudo mv backend-app.jar /opt/myapp/backend-app.jar

              cd ~/deploy/frontend
              sudo mv * /var/www/frontend/

              # systemd 서비스(스프링부트) 재시작
              sudo tee /etc/systemd/system/myapp.service > /dev/null << 'UNIT'
              [Unit]
              Description=My Spring Boot App
              After=network.target

              [Service]
              User=ec2-user
              ExecStart=/usr/bin/java -jar /opt/myapp/backend-app.jar
              Restart=always

              [Install]
              WantedBy=multi-user.target
              UNIT

              sudo systemctl daemon-reload
              sudo systemctl enable myapp.service
              sudo systemctl restart myapp.service

              # nginx 리로드 (프론트)
              sudo nginx -s reload
            EOF
        name: Deploy on EC2
