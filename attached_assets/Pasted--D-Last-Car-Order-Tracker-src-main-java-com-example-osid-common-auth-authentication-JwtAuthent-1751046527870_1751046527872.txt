===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\authentication\JwtAuthenticationFilter.java =====
package com.example.osid.common.auth.authentication;

import java.io.IOException;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.example.osid.common.auth.CustomUserDetailsService;
import com.example.osid.common.auth.repository.RefreshTokenRepository;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

	private final JwtUtil jwtUtil;
	private final CustomUserDetailsService userDetailsService;
	private final RefreshTokenRepository refreshTokenRepository;

	@Override
	protected void doFilterInternal(
		HttpServletRequest request,
		HttpServletResponse response,
		FilterChain filterChain
	)
		throws ServletException, IOException {
		String header = request.getHeader("Authorization");
		if (header != null && header.startsWith("Bearer ")) {
			String token = header.substring(7);
			if (jwtUtil.validateToken(token)) {
				String email = jwtUtil.extractEmail(token);
				boolean stillLoggedIn = refreshTokenRepository.existsById(email);

				if (!stillLoggedIn) {
					// 濡쒓렇?꾩썐???곹깭: 401 諛섑솚?섍퀬 泥댁씤 以묐떒
					response.setStatus(HttpStatus.UNAUTHORIZED.value());
					return;
				}
				
				String role = jwtUtil.extractRole(token);

				UserDetails userDetails = userDetailsService.loadUserByUsername(email);
				List<GrantedAuthority> authorities = List.of(
					new SimpleGrantedAuthority("ROLE_" + role)
				);

				UsernamePasswordAuthenticationToken authToken =
					new UsernamePasswordAuthenticationToken(userDetails, null, authorities);
				authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

				SecurityContextHolder.getContext().setAuthentication(authToken);
			}
		}
		filterChain.doFilter(request, response);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\authentication\JwtUtil.java =====
package com.example.osid.common.auth.authentication;

import java.util.Date;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Component
public class JwtUtil {

	@Value("${jwt.secret}")
	private String SECRET_KEY; // ?좏겙???앹꽦?????ъ슜??鍮꾨???

	private long TOKEN_TIME = 1000 * 60 * 10;
	private long REFRESH_TOKEN_EXP_TIME = 1000 * 60 * 60;   //  1000 * 60 * 60 * 24; 1??

	// JWT TOKEN ?앹꽦
	public String createToken(String email, String name, String role, Long id) {
		return Jwts.builder()
			.setSubject(email)  // JWT??Subject???대찓?????
			.claim("id", id)
			.claim("name", name)  // ?대쫫??claim??異붽?
			.claim("role", role)  // ??븷??claim??異붽?
			.setIssuedAt(new Date())  // 諛쒓툒 ?쒓컙
			.setExpiration(new Date(System.currentTimeMillis() + TOKEN_TIME))  // 留뚮즺 ?쒓컙
			.signWith(SignatureAlgorithm.HS256, SECRET_KEY)  // HS256 ?뚭퀬由ъ쬁怨?鍮꾨??ㅻ줈 ?쒕챸
			.compact();
	}

	// Refresh Token ?앹꽦
	public String createRefreshToken(String email, String role, Long id) {
		return Jwts.builder()
			.setSubject(email)  // JWT??Subject???대찓?????
			.claim("id", id)
			.claim("role", role)  // ??븷??claim??異붽?
			.setIssuedAt(new Date())  // 諛쒓툒 ?쒓컙
			.setExpiration(new Date(System.currentTimeMillis() + REFRESH_TOKEN_EXP_TIME))
			.signWith(SignatureAlgorithm.HS256, SECRET_KEY)
			.compact();
	}

	// Claims 媛앹껜 異붿텧
	private Claims extractAllClaims(String token) {
		return Jwts.parserBuilder()
			.setSigningKey(SECRET_KEY)
			.build()
			.parseClaimsJws(token)
			.getBody();
	}

	// id 異붿텧
	public Long extractId(String token) {
		return extractAllClaims(token).get("id", Long.class);
	}

	// ?대찓??Subject) 異붿텧
	public String extractEmail(String token) {
		return extractAllClaims(token).getSubject();
	}

	// ?대쫫 異붿텧
	public String extractName(String token) {
		return extractAllClaims(token).get("name", String.class);
	}

	// ??븷 異붿텧
	public String extractRole(String token) {
		return extractAllClaims(token).get("role", String.class);
	}

	// 留뚮즺 ?쒓컙 異붿텧
	public Date extractExpiration(String token) {
		return extractAllClaims(token).getExpiration();
	}

	// 留뚮즺 ?щ? ?뺤씤
	public boolean isTokenExpired(String token) {
		return extractExpiration(token).before(new Date());
	}

	// ?좏겙 ?좏슚??寃利?(?좏겙 ???대찓?쇨낵 留뚮즺 ?щ?)
	public boolean validateToken(String token) {
		try {
			final String email = extractEmail(token);
			return (email != null && !isTokenExpired(token));
		} catch (Exception e) {
			return false;
		}
	}

	public long getRefreshTokenExpTime() {
		return REFRESH_TOKEN_EXP_TIME;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\authorization\SecurityConfig.java =====
package com.example.osid.common.auth.authorization;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.example.osid.common.auth.authentication.JwtAuthenticationFilter;

import lombok.RequiredArgsConstructor;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
@EnableMethodSecurity(securedEnabled = true)
public class SecurityConfig {

	private final JwtAuthenticationFilter jwtAuthenticationFilter;

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http
			.csrf(csrf -> csrf.disable())
			.sessionManagement(sm ->
				sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
			)
			.authorizeHttpRequests(auth -> auth
				// 1) 紐⑤몢 媛??
				.requestMatchers("/payment-test.html")
				.permitAll()
				.requestMatchers("/api/my-ml-predict")
				.permitAll()
				.requestMatchers(HttpMethod.POST, "/api/auth/login")
				.permitAll()
				.requestMatchers(HttpMethod.POST, "/api/users/signup")
				.permitAll()        // ??User ?뚯썝媛??
				.requestMatchers(HttpMethod.POST, "/api/masters/signup")
				.permitAll()      // ??Master ?뚯썝媛??
				.requestMatchers(HttpMethod.POST, "/api/dealers/signup")
				.permitAll()      // ??Dealer ?뚯썝媛??
				.requestMatchers(HttpMethod.GET, "/api/model/**")
				.permitAll()            // 李⑤웾 紐⑤뜽 議고쉶(?④굔/?꾩껜) ??紐⑤몢 ?덉슜
				.requestMatchers(HttpMethod.GET, "/api/option/**")
				.permitAll()            // 李⑤웾 ?듭뀡 議고쉶(?④굔/?꾩껜) ??紐⑤몢 ?덉슜
				// 2) Master
				.requestMatchers("/api/masters/**")
				.hasRole("MASTER")
				.requestMatchers("/api/model/**")
				.hasRole("MASTER")                        // Model ?앹꽦, ?섏젙, ??젣 ??留덉뒪???덉슜
				.requestMatchers("/api/option/**")
				.hasRole("MASTER")                        // Option ?앹꽦, ?섏젙, ??젣 ??留덉뒪???덉슜
				.requestMatchers(HttpMethod.PATCH, "/api/dealers/role")
				.hasRole("MASTER")                          // Dealer Role ?섏젙
				.requestMatchers(HttpMethod.PATCH, "/api/dealers/branch")
				.hasRole("MASTER")                          // Dealer branch ?섏젙
				// 3) Dealer
				.requestMatchers("/api/dealers/**")
				.hasRole("DEALER")

				// 4) User
				.requestMatchers("/api/users/**")
				.hasRole("USER")
				.requestMatchers("/api/myCar/**")
				.hasRole("USER")
				// 3) 洹??몃뒗 ?몄쬆留??덉쑝硫?OK
				.anyRequest()
				.authenticated()
			)
			// JWT ?꾪꽣 ?깅줉
			.addFilterBefore(
				jwtAuthenticationFilter,
				UsernamePasswordAuthenticationFilter.class
			);

		return http.build();
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\controller\AuthController.java =====
package com.example.osid.common.auth.controller;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.auth.dto.LoginRequestDto;
import com.example.osid.common.auth.dto.LoginResponseDto;
import com.example.osid.common.auth.service.AuthService;
import com.example.osid.common.response.CommonResponse;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {

	private final AuthService authService;

	// 濡쒓렇???붾뱶?ъ씤??
	@PostMapping("/login")
	public CommonResponse<LoginResponseDto> login(@RequestBody @Valid LoginRequestDto loginRequestDto) {
		// 濡쒓렇??泥섎━ ??JWT ?좏겙???앹꽦?섏뿬 諛섑솚
		LoginResponseDto token = authService.login(loginRequestDto);

		// CommonResponse濡?寃곌낵 諛섑솚
		return CommonResponse.ok(token);
	}

	@PostMapping("/logout")
	public CommonResponse<Void> logout(
		@RequestHeader("Refresh-Token") String refreshToken) {
		authService.logout(refreshToken);
		return CommonResponse.ok();
	}

	@PostMapping("/refresh")
	public CommonResponse<String> refreshAccessToken(
		@RequestHeader("Refresh-Token") String refreshToken
	) {
		String newAccessToken = authService.refreshAccessToken(refreshToken);
		return CommonResponse.ok(newAccessToken);
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\dto\LoginRequestDto.java =====
package com.example.osid.common.auth.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotEmpty;
import lombok.Getter;

@Getter
public class LoginRequestDto {

	@Email(message = "?대찓???뺤떇???щ컮瑜댁? ?딆뒿?덈떎.")
	@NotEmpty(message = "?대찓?쇱? ?꾩닔?낅땲??")
	private String email;

	@NotEmpty(message = "鍮꾨?踰덊샇???꾩닔?낅땲??")
	private String password;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\dto\LoginResponseDto.java =====
package com.example.osid.common.auth.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class LoginResponseDto {
	private String accessToken;
	private String refreshToken;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\entity\RefreshToken.java =====
package com.example.osid.common.auth.entity;

import java.time.Instant;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "refresh_tokens")
@Getter
@NoArgsConstructor
public class RefreshToken {

	@Id
	private String email;

	@Column(nullable = false, length = 500)
	private String token;

	@Column(nullable = false, length = 50)
	private String role;

	@Column(nullable = false)
	private Instant issuedAt;

	@Column(nullable = false)
	private Instant expiresAt;

	public RefreshToken(
		String email,
		String token,
		String role,
		Instant issuedAt,
		Instant expiresAt) {
		this.email = email;
		this.token = token;
		this.role = role;
		this.issuedAt = issuedAt;
		this.expiresAt = expiresAt;
	}

	public void updateToken(String token,
		Instant issuedAt,
		Instant expiresAt) {
		this.token = token;
		this.issuedAt = issuedAt;
		this.expiresAt = expiresAt;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\repository\RefreshTokenRepository.java =====
package com.example.osid.common.auth.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.osid.common.auth.entity.RefreshToken;

public interface RefreshTokenRepository extends JpaRepository<RefreshToken, String> {
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\service\AuthService.java =====
package com.example.osid.common.auth.service;

import java.time.Instant;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.osid.common.auth.authentication.JwtUtil;
import com.example.osid.common.auth.dto.LoginRequestDto;
import com.example.osid.common.auth.dto.LoginResponseDto;
import com.example.osid.common.auth.entity.RefreshToken;
import com.example.osid.common.auth.repository.RefreshTokenRepository;
import com.example.osid.common.exception.CustomException;
import com.example.osid.common.exception.ErrorCode;
import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.dealer.exception.DealerException;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.master.exception.MasterException;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.user.entity.User;
import com.example.osid.domain.user.exception.UserException;
import com.example.osid.domain.user.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthService {

	private final UserRepository userRepository;
	private final MasterRepository masterRepository;
	private final DealerRepository dealerRepository;
	private final PasswordEncoder passwordEncoder;
	private final JwtUtil jwtUtil;
	private final RefreshTokenRepository refreshTokenRepository;

	public LoginResponseDto login(LoginRequestDto loginRequestDto) {

		String loginEmail = loginRequestDto.getEmail();
		String rawPassword = loginRequestDto.getPassword();

		// 1) ?쒖꽦 怨꾩젙(isDeleted = false)留?議고쉶
		User user = userRepository.findByEmailAndIsDeletedFalse(loginEmail).orElse(null);
		Master master = masterRepository.findByEmailAndIsDeletedFalse(loginEmail).orElse(null);
		Dealer dealer = dealerRepository.findByEmailAndIsDeletedFalse(loginEmail).orElse(null);

		// 2) ???뚯씠釉?紐⑤몢 null ?대㈃ ?쒖〈?ы븯吏 ?딆쓬???먮윭
		if (user == null && master == null && dealer == null) {
			throw new CustomException(ErrorCode.USER_NOT_FOUND);
		}

		// 2) ?몄쬆 二쇱껜 寃곗젙 諛?怨듯넻 ?뺣낫 異붿텧
		String email;   // PK濡??ъ슜???대찓??
		String name;
		String role;
		String pwHash;
		Long id;

		if (user != null) {
			email = user.getEmail();
			name = user.getName();
			role = "USER";
			pwHash = user.getPassword();
			id = user.getId();
		} else if (master != null) {
			email = master.getEmail();
			name = master.getName();
			role = "MASTER";
			pwHash = master.getPassword();
			id = master.getId();
		} else {
			email = dealer.getEmail();
			name = dealer.getName();
			role = "DEALER";
			pwHash = dealer.getPassword();
			id = dealer.getId();
		}

		// 3) 鍮꾨?踰덊샇 寃利?
		if (!passwordEncoder.matches(rawPassword, pwHash)) {
			switch (role) {
				case "USER":
					throw new UserException(ErrorCode.INVALID_PASSWORD);
				case "MASTER":
					throw new MasterException(ErrorCode.INVALID_PASSWORD);
				default:
					throw new DealerException(ErrorCode.INVALID_PASSWORD);
			}
		}

		// 4) ?좏겙 ?앹꽦
		String accessToken = jwtUtil.createToken(email, name, role, id);
		String refreshToken = jwtUtil.createRefreshToken(email, role, id);

		// 5) 由ы봽?덉떆 ?좏겙 ?곗씠?곕쿋?댁뒪?????(?대찓?쇱씠 PK)
		Instant now = Instant.now();
		Instant expiry = now.plusMillis(jwtUtil.getRefreshTokenExpTime());
		RefreshToken entity = new RefreshToken(
			email,        // PK
			refreshToken,
			role,
			now,
			expiry
		);
		refreshTokenRepository.save(entity);

		// 6) 濡쒓렇???묐떟 諛섑솚
		return new LoginResponseDto(accessToken, refreshToken);

	}

	public void logout(String refreshToken) {
		// ?좏겙 ?좏슚??寃??
		if (!jwtUtil.validateToken(refreshToken)) {
			throw new CustomException(ErrorCode.INVALID_REFRESH_TOKEN);
		}
		// ?좏겙?먯꽌 ?대찓??異붿텧 ??DB ?덉퐫????젣
		String email = jwtUtil.extractEmail(refreshToken);
		refreshTokenRepository.deleteById(email);
	}

	public String refreshAccessToken(String refreshToken) {
		// 1) 由ы봽?덉떆 ?좏겙 ?좏슚??寃??
		if (!jwtUtil.validateToken(refreshToken)) {
			throw new CustomException(ErrorCode.INVALID_REFRESH_TOKEN);
		}
		// 2) DB ?쇱튂 ?щ? ?뺤씤
		String email = jwtUtil.extractEmail(refreshToken);
		RefreshToken saved = refreshTokenRepository.findById(email)
			.orElseThrow(() -> new CustomException(ErrorCode.REFRESH_TOKEN_NOT_FOUND));
		if (!saved.getToken().equals(refreshToken)) {
			throw new CustomException(ErrorCode.REFRESH_TOKEN_MISMATCH);
		}
		// 3) ???≪꽭???좏겙 諛쒓툒
		String name = jwtUtil.extractName(saved.getToken());
		String role = jwtUtil.extractRole(saved.getToken());
		Long id = jwtUtil.extractId(saved.getToken());
		return jwtUtil.createToken(email, name, role, id);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\CustomUserDetails.java =====
package com.example.osid.common.auth;

import java.util.Collection;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.user.entity.User;

import lombok.Getter;

@Getter
public class CustomUserDetails implements UserDetails {
	private final Long id;
	private final String email;
	private final String password;
	private final List<GrantedAuthority> authorities;

	public CustomUserDetails(Long id, String email, String password, List<GrantedAuthority> authorities) {
		this.id = id;
		this.email = email;
		this.password = password;
		this.authorities = authorities;
	}

	public static CustomUserDetails fromMaster(Master master) {
		return new CustomUserDetails(
			master.getId(),
			master.getEmail(),
			master.getPassword(),
			List.of(new SimpleGrantedAuthority("ROLE_MASTER"))
		);
	}

	public static CustomUserDetails fromDealer(Dealer dealer) {
		return new CustomUserDetails(
			dealer.getId(),
			dealer.getEmail(),
			dealer.getPassword(),
			List.of(new SimpleGrantedAuthority("ROLE_DEALER"))
		);
	}

	public static CustomUserDetails fromUser(User user) {
		return new CustomUserDetails(
			user.getId(),
			user.getEmail(),
			user.getPassword(),
			List.of(new SimpleGrantedAuthority("ROLE_USER"))
		);
	}

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return authorities;
	}

	@Override
	public String getPassword() {
		return password;
	}

	@Override
	public String getUsername() {
		return email;
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return true;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\CustomUserDetailsService.java =====
package com.example.osid.common.auth;

import java.util.Optional;

import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.user.entity.User;
import com.example.osid.domain.user.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class CustomUserDetailsService implements UserDetailsService {
	private final MasterRepository masterRepository;
	private final DealerRepository dealerRepository;
	private final UserRepository userRepository;

	@Override
	public CustomUserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
		// Master 議고쉶
		Optional<Master> masterOpt = masterRepository.findByEmailAndIsDeletedFalse(email);
		if (masterOpt.isPresent()) {
			return CustomUserDetails.fromMaster(masterOpt.get());
		}
		// Dealer 議고쉶
		Optional<Dealer> dealerOpt = dealerRepository.findByEmailAndIsDeletedFalse(email);
		if (dealerOpt.isPresent()) {
			return CustomUserDetails.fromDealer(dealerOpt.get());
		}
		// User 議고쉶
		Optional<User> userOpt = userRepository.findByEmailAndIsDeletedFalse(email);
		if (userOpt.isPresent()) {
			return CustomUserDetails.fromUser(userOpt.get());
		}

		throw new UsernameNotFoundException("?ъ슜?먮? 李얠쓣 ???놁뒿?덈떎: " + email);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\EmailValidator.java =====
package com.example.osid.common.auth;

import org.springframework.stereotype.Component;

import com.example.osid.common.exception.CustomException;
import com.example.osid.common.exception.ErrorCode;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.user.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class EmailValidator {
	private final DealerRepository dealerRepository;
	private final UserRepository userRepository;
	private final MasterRepository masterRepository;

	// ?대찓??以묐났 ??諛붾줈 ?덉쇅 ?섏쭚
	public void validateDuplicateEmail(String email) {
		boolean exists = dealerRepository.findByEmail(email).isPresent()
			|| userRepository.findByEmail(email).isPresent()
			|| masterRepository.findByEmail(email).isPresent();

		if (exists) {
			throw new CustomException(ErrorCode.EMAIL_ALREADY_EXISTS);
		}
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\LicenseValidationInterceptor.java =====
package com.example.osid.common.auth;

import java.io.IOException;

import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import com.example.osid.domain.license.enums.LicenseStatus;
import com.example.osid.domain.license.repository.LicenseKeyRepository;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class LicenseValidationInterceptor implements HandlerInterceptor {

	private final LicenseKeyRepository licenseKeyRepository;

	@Override
	public boolean preHandle(HttpServletRequest request,
		HttpServletResponse response,
		Object handler) throws IOException {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth == null || !auth.isAuthenticated()) {
			return true;  // ?몄쬆 ??鍮꾨줈洹몄씤 ?붿껌? ?ㅽ궢
		}

		Object principal = auth.getPrincipal();
		if (principal instanceof CustomUserDetails user) {
			// ?ㅼ쭅 MASTER?먭쾶留??쇱씠?좎뒪 泥댄겕
			boolean isMaster = user.getAuthorities().stream()
				.anyMatch(a -> a.getAuthority().equals("ROLE_MASTER"));
			if (isMaster) {
				boolean hasValid = licenseKeyRepository
					.findByOwnerIdAndLicenseStatus(user.getId(), LicenseStatus.ASSIGNED)
					.isPresent();
				if (!hasValid) {
					response.sendError(HttpStatus.FORBIDDEN.value(),
						"?쇱씠?좎뒪媛 ?녾굅??痍⑥냼?섏뿀?듬땲??");
					return false;
				}
			}
		}
		return true;  // DEALER/USER???꾨? ?듦낵
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\auth\PasswordConfig.java =====
package com.example.osid.common.auth;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class PasswordConfig {

	@Bean
	public PasswordEncoder passwordEncoder() {

		return new BCryptPasswordEncoder(10);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\entity\enums\Role.java =====
package com.example.osid.common.entity.enums;

public enum Role {
    USER,DEALER,MASTER,APPLICANT
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\entity\BaseEntity.java =====
package com.example.osid.common.entity;

import jakarta.persistence.Column;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.MappedSuperclass;
import java.time.LocalDateTime;
import lombok.Getter;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

@Getter
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
public class BaseEntity {

    @CreatedDate
    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @LastModifiedDate
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\exception\BaseCode.java =====
package com.example.osid.common.exception;

import org.springframework.http.HttpStatus;

public interface BaseCode {

    HttpStatus getHttpStatus();

    String getCode();

    String getMessage();

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\exception\CustomException.java =====
package com.example.osid.common.exception;

import lombok.Getter;

@Getter
public class CustomException extends RuntimeException {

    private final BaseCode baseCode;

    public CustomException(BaseCode baseCode) {
        super(baseCode.getMessage());
        this.baseCode = baseCode;
    }

    public CustomException(BaseCode baseCode, String message) {
        super(message);
        this.baseCode = baseCode;
    }
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\exception\ErrorCode.java =====
package com.example.osid.common.exception;

import org.springframework.http.HttpStatus;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum ErrorCode implements BaseCode {

	INVALID_INPUT_VALUE(HttpStatus.BAD_REQUEST, "COMMON_001", "?좏슚?섏? ?딆? ?낅젰 媛믪엯?덈떎."),
	METHOD_NOT_ALLOWED(HttpStatus.METHOD_NOT_ALLOWED, "COMMON_002", "?덉슜?섏? ?딆? ?붿껌 諛⑹떇?낅땲??"),
	ENTITY_NOT_FOUND(HttpStatus.NOT_FOUND, "COMMON_003", "?붿껌???뷀떚?곕? 李얠쓣 ???놁뒿?덈떎."),
	INTERNAL_SERVER_ERROR(HttpStatus.INTERNAL_SERVER_ERROR, "COMMON_004", "?대? ?쒕쾭 ?ㅻ쪟媛 諛쒖깮?덉뒿?덈떎."),
	INVALID_TYPE_VALUE(HttpStatus.BAD_REQUEST, "COMMON_005", "?좏슚?섏? ?딆? ??낆쓽 媛믪엯?덈떎."),
	USER_NOT_FOUND(HttpStatus.NOT_FOUND, "COMMON_006", "?ъ슜?먭? ?놁뒿?덈떎."),
	INVALID_TOKEN(HttpStatus.UNAUTHORIZED, "COMMON_007", "?좏슚?섏? ?딅뒗 ?좏겙?낅땲??"),
	FORBIDDEN(HttpStatus.FORBIDDEN, "COMMON_008", "?묎렐 沅뚰븳???놁뒿?덈떎."),
	EMAIL_ALREADY_EXISTS(HttpStatus.UNAUTHORIZED, "COMMON_009", "?대? 媛?낅맂 ?대찓???낅땲??"),
	AUTHORITY_NOT_FOUND(HttpStatus.FORBIDDEN, "COMMON_010", "沅뚰븳 ?뺣낫媛 ?놁뒿?덈떎."),
	INVALID_PASSWORD(HttpStatus.BAD_REQUEST, "COMMON_011", "?ъ슜??鍮꾨?踰덊샇媛 ?쇱튂?섏? ?딆뒿?덈떎."),
	INVALID_REFRESH_TOKEN(HttpStatus.UNAUTHORIZED, "COMMON_012", "由ы봽?덉떆 ?좏겙???좏슚?섏? ?딆뒿?덈떎."),
	REFRESH_TOKEN_NOT_FOUND(HttpStatus.NOT_FOUND, "COMMON_013", "由ы봽?덉떆 ?좏겙??議댁옱?섏? ?딆뒿?덈떎."),
	REFRESH_TOKEN_MISMATCH(HttpStatus.FORBIDDEN, "COMMON_014", "由ы봽?덉떆 ?좏겙???쇱튂?섏? ?딆뒿?덈떎.");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\exception\GlobalExceptionHandler.java =====
package com.example.osid.common.exception;

import java.util.ArrayList;
import java.util.List;

import org.springframework.dao.DataAccessException;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.authorization.AuthorizationDeniedException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import com.example.osid.common.response.CommonResponse;
import com.example.osid.common.response.ErrorResponse;

import jakarta.persistence.EntityNotFoundException;
import lombok.Builder;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Builder
@RestControllerAdvice
public class GlobalExceptionHandler {

	/**
	 * Custom Exception 泥섎━ - Service 怨꾩링?먯꽌 諛쒖깮??鍮꾩쫰?덉뒪 ?덉쇅 泥섎━
	 */
	@ExceptionHandler(CustomException.class)
	protected ResponseEntity<CommonResponse<Void>> handleCustomException(CustomException e) {
		log.error("CustomException: {}", e.getMessage(), e);

		BaseCode errorCode = e.getBaseCode();

		return new ResponseEntity<>(CommonResponse.error(errorCode), errorCode.getHttpStatus());
		//return CommonResponse.error(errorCode);
	}

	/**
	 * Valid ?덉쇅 泥섎━ - Controller??@Valid 寃利??ㅽ뙣 ??諛쒖깮
	 * 而⑦듃濡ㅻ윭?먯꽌 媛쒕퀎?곸쑝濡?泥섎━?섏? ?딆? 寃쎌슦?먮쭔 ?ш린??泥섎━??
	 */
	@ExceptionHandler(MethodArgumentNotValidException.class)
	protected ResponseEntity<CommonResponse<Void>> handleMethodArgumentNotValidException(
		MethodArgumentNotValidException e) {
		log.error("MethodArgumentNotValidException: {}", e.getMessage(), e);
		//        List<ErrorResponse.FieldError> fieldErrors = processFieldErrors(e.getBindingResult());
		List<ErrorResponse.FieldError> fieldErrors = processFieldErrors(e.getBindingResult());

		return new ResponseEntity<>(CommonResponse.error(ErrorCode.INVALID_INPUT_VALUE, fieldErrors),
			ErrorCode.INVALID_INPUT_VALUE.getHttpStatus());

	}

	/**
	 * Repository(JPA) 怨꾩링 ?덉쇅 泥섎━ - EntityNotFoundException 泥섎━
	 */
	@ExceptionHandler(EntityNotFoundException.class)
	protected ResponseEntity<CommonResponse<Void>> handleEntityNotFoundException(EntityNotFoundException e) {
		log.error("EntityNotFoundException: {}", e.getMessage(), e);

		return new ResponseEntity<>(CommonResponse.error(ErrorCode.ENTITY_NOT_FOUND),
			ErrorCode.ENTITY_NOT_FOUND.getHttpStatus());
	}

	/**
	 * Repository(JPA) 怨꾩링 ?덉쇅 泥섎━ - DataAccessException 泥섎━
	 * (SQL ?덉쇅, Lock ?띾뱷 ?ㅽ뙣 ??DB 愿???덉쇅)
	 */
	@ExceptionHandler(DataAccessException.class)
	protected ResponseEntity<CommonResponse<Void>> handleDataAccessException(DataAccessException e) {
		log.error("DataAccessException: {}", e.getMessage(), e);

		return new ResponseEntity<>(CommonResponse.error(ErrorCode.INTERNAL_SERVER_ERROR),
			ErrorCode.INTERNAL_SERVER_ERROR.getHttpStatus());
	}

	/**
	 * 吏?먰븯吏 ?딅뒗 HTTP 硫붿냼???몄텧 ??諛쒖깮?섎뒗 ?덉쇅 泥섎━
	 */
	@ExceptionHandler(HttpRequestMethodNotSupportedException.class)
	protected ResponseEntity<CommonResponse<Void>> handleHttpRequestMethodNotSupportedException(
		HttpRequestMethodNotSupportedException e) {
		log.error("HttpRequestMethodNotSupportedException: {}", e.getMessage(), e);

		return new ResponseEntity<>(CommonResponse.error(ErrorCode.METHOD_NOT_ALLOWED),
			ErrorCode.METHOD_NOT_ALLOWED.getHttpStatus());
	}

	/**
	 * ?붿껌 ?뚮씪誘명꽣 ???遺덉씪移??덉쇅 泥섎━
	 */
	@ExceptionHandler(MethodArgumentTypeMismatchException.class)
	protected ResponseEntity<CommonResponse<Void>> handleMethodArgumentTypeMismatchException(
		MethodArgumentTypeMismatchException e) {
		log.error("MethodArgumentTypeMismatchException: {}", e.getMessage());

		return new ResponseEntity<>(CommonResponse.error(ErrorCode.INVALID_TYPE_VALUE),
			ErrorCode.INVALID_TYPE_VALUE.getHttpStatus());
	}

	/**
	 * ?꾩닔 ?붿껌 ?뚮씪誘명꽣 ?꾨씫 ?덉쇅 泥섎━
	 */
	@ExceptionHandler(MissingServletRequestParameterException.class)
	protected ResponseEntity<CommonResponse<Void>> handleMissingServletRequestParameterException(
		MissingServletRequestParameterException e) {
		log.error("MissingServletRequestParameterException: {}", e.getMessage());

		return new ResponseEntity<>(CommonResponse.error(ErrorCode.INVALID_INPUT_VALUE),
			ErrorCode.INVALID_INPUT_VALUE.getHttpStatus());
	}

	/**
	 * JSON ?뚯떛 ?ㅻ쪟 ?깆쓽 ?덉쇅 泥섎━
	 */
	@ExceptionHandler(HttpMessageNotReadableException.class)
	protected ResponseEntity<CommonResponse<Void>> handleHttpMessageNotReadableException(
		HttpMessageNotReadableException e) {
		log.error("HttpMessageNotReadableException: {}", e.getMessage());

		return new ResponseEntity<>(CommonResponse.error(ErrorCode.INVALID_INPUT_VALUE),
			ErrorCode.INVALID_INPUT_VALUE.getHttpStatus());
	}

	/**
	 * 洹???紐⑤뱺 ?덉쇅 泥섎━
	 */
	@ExceptionHandler(Exception.class)
	protected ResponseEntity<CommonResponse<Void>> handleException(Exception e) {
		log.error("Exception: {}", e.getMessage(), e);

		return new ResponseEntity<>(CommonResponse.error(ErrorCode.INTERNAL_SERVER_ERROR),
			ErrorCode.INTERNAL_SERVER_ERROR.getHttpStatus());
	}

	/**
	 * BindingResult ?먯꽌 諛쒖깮???꾨뱶 ?먮윭 紐⑸줉??ErrorResponse.FieldError 紐⑸줉?쇰줈 諛섑솚
	 */
	private List<ErrorResponse.FieldError> processFieldErrors(BindingResult bindingResult) {
		List<ErrorResponse.FieldError> fieldErrors = new ArrayList<>();

		for (FieldError fieldError : bindingResult.getFieldErrors()) {
			ErrorResponse.FieldError error = ErrorResponse.FieldError.of(fieldError.getField(),
				fieldError.getRejectedValue() == null ? "" : fieldError.getRejectedValue().toString(),
				fieldError.getDefaultMessage());
			fieldErrors.add(error);
		}

		return fieldErrors;
	}

	@ExceptionHandler(AuthorizationDeniedException.class)
	protected ResponseEntity<CommonResponse<Void>> handleAuthorizationDeniedException(AuthorizationDeniedException e) {

		log.error("AuthorizationDeniedException: {}", e.getMessage());

		return new ResponseEntity<>(CommonResponse.error(ErrorCode.FORBIDDEN),
			ErrorCode.FORBIDDEN.getHttpStatus());
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\exception\SuccessCode.java =====
package com.example.osid.common.exception;

import org.springframework.http.HttpStatus;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum SuccessCode implements BaseCode {
	OK(HttpStatus.OK, "S001", "?붿껌???깃났?덉뒿?덈떎."),
	CREATED(HttpStatus.CREATED, "S002", "?붿껌???앹꽦?섏뿀?듬땲??"),
	NO_CONTENT(HttpStatus.NO_CONTENT, "S003", "?붿껌????젣?섏뿀?듬땲??");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\logging\ApiLoggingInterceptor.java =====
package com.example.osid.common.logging;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.entity.enums.Role;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class ApiLoggingInterceptor implements HandlerInterceptor {

	private static final Logger logger = LoggerFactory.getLogger(ApiLoggingInterceptor.class);

	@Override
	public boolean preHandle(HttpServletRequest request,
		HttpServletResponse response,
		Object handler) throws Exception {
		String uri = request.getRequestURI();   // ex) "/api/orders"
		String method = request.getMethod();       // ex) "POST"

		Long userId = null;
		String email = null;
		Role role = null;

		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null && auth.isAuthenticated()
			&& auth.getPrincipal() instanceof CustomUserDetails) {

			CustomUserDetails user = (CustomUserDetails)auth.getPrincipal();
			userId = user.getId();
			email = user.getUsername();  // CustomUserDetails.getUsername() ??email

			// 沅뚰븳(GrantedAuthority)?먯꽌 ROLE_ ?묐몢???쒓굅 ??enum 蹂??
			String authority = user.getAuthorities().stream()
				.findFirst()
				.map(a -> a.getAuthority().replace("ROLE_", ""))
				.orElse(null);
			try {
				role = authority != null
					? Role.valueOf(authority)
					: null;
			} catch (IllegalArgumentException e) {
				logger.warn("Unknown role in authorities: {}", authority);
			}
		}

		// key=value ?뺥깭濡?濡쒓퉭
		logger.info("event=API_REQUEST userId={} email={} role={} method={} uri={}",
			userId, email, role, method, uri);

		return true;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\logging\LogAop.java =====
package com.example.osid.common.logging;

import java.lang.reflect.Method;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Aspect // aop 湲곕뒫??媛뽰쓬
@Component // bean ?먮룞?깅줉
public class LogAop {

	// pointcut

	// @Service 遺숈? 紐⑤뱺 ?대옒?ㅼ쓽 紐⑤뱺 硫붿꽌?쒕? ??곸쑝濡???
	@Pointcut("within(@org.springframework.stereotype.Service *)")
	public void servicePointcut() {
	}

	// @RestController 遺숈? 紐⑤뱺 ?대옒?ㅼ쓽 紐⑤뱺 硫붿꽌?쒕? ??곸쑝濡???
	@Pointcut("within(@org.springframework.web.bind.annotation.RestController *)")
	public void controllerPointcut() {
	}

	// @TransactionalEventListener 硫붿꽌??異붿쟻??
	@Pointcut("execution(* com.example.osid.domain.waitingorder.service..*(..))")
	public void eventListenerPointcut() {
	}

	// repository ?섏쐞 紐⑤뱺 ?대옒??硫붿꽌???ㅽ뻾 ?쒓컙 痢≪젙
	@Pointcut("execution(* com.example.osid.domain..*.repository..*(..))")
	public void repositoryPointcut() {
	}

	// 諛곗튂 ?ㅼ젙????곸쑝濡???
	@Pointcut("execution(* com.example.osid.config.batch..*(..))")
	public void batchComponentPointcut() {
	}

	// 濡쒓퉭 硫붿꽌??

	// 而⑦듃濡ㅻ윭 吏꾩엯 濡쒓렇
	@Before("controllerPointcut()")
	public void controllerLogMethodCall(JoinPoint joinPoint) {
		logMethodEntry("controller", joinPoint);
	}

	// 而⑦듃濡ㅻ윭 由ы꽩 濡쒓렇
	@AfterReturning(value = "controllerPointcut()", returning = "returnObj")
	public void controllerLogMethodReturn(JoinPoint joinPoint, Object returnObj) {
		logMethodReturn("controller", joinPoint, returnObj);
	}

	// ?쒕퉬??吏꾩엯 濡쒓렇
	@Before("servicePointcut()")
	public void serviceLogMethodCall(JoinPoint joinPoint) {
		logMethodEntry("service", joinPoint);
	}

	// ?쒕퉬??由ы꽩 濡쒓렇 -> ?쒕퉬??硫붿꽌???뺤긽 由ы꽩 ??由ы꽩媛믪쓣 濡쒓렇??湲곕줉
	@AfterReturning(value = "servicePointcut()", returning = "returnObj")
	public void serviceLogMethodReturn(JoinPoint joinPoint, Object returnObj) {
		logMethodReturn("service", joinPoint, returnObj);
	}

	// 諛곗튂 愿??硫붿꽌???몄텧 濡쒓렇 -> @Componet 湲곕컲 ?대옒?ㅼ쓽 硫붿꽌??吏꾩엯 濡쒓렇 ?⑥닚 異쒕젰
	@Before("batchComponentPointcut()")
	public void batchLogMethodCall(JoinPoint joinPoint) {
		log.info("[batch] Method called: {}", joinPoint.getSignature());
	}

	// ?대깽??由ъ뒪??吏꾩엯 濡쒓렇
	@Before("eventListenerPointcut()")
	public void eventListenerLog(JoinPoint joinPoint) {
		logMethodEntry("event", joinPoint);
	}

	// ?쒕퉬??而⑦듃濡ㅻ윭/?대깽???ㅽ뻾 ?쒓컙 痢≪젙 -> ?ㅽ뻾 ?? ???쒓컙 痢≪젙?댁꽌 泥섎━ ?쒓컙 濡쒓퉭
	@Around("servicePointcut() || controllerPointcut() || eventListenerPointcut()")
	public Object logExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {
		long start = System.currentTimeMillis();
		try {
			return joinPoint.proceed();
		} finally {
			long end = System.currentTimeMillis();
			log.info("Executed {} in {}ms", joinPoint.getSignature(), end - start);
		}
	}

	// ?덊룷吏?좊━ ?ㅽ뻾 ?쒓컙 痢≪젙
	@Around("repositoryPointcut()")
	public Object logRepositoryExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {
		long start = System.currentTimeMillis();
		try {
			return joinPoint.proceed();
		} finally {
			long end = System.currentTimeMillis();
			log.debug("[Repository] {} executed in {}ms", joinPoint.getSignature(), end - start);
		}
	}

	// ?덉쇅 諛쒖깮 寃쎌슦 硫붿꽌???대쫫怨??덉쇅 硫붿떆吏 濡쒓렇
	@AfterThrowing(pointcut = "servicePointcut() || controllerPointcut() || batchComponentPointcut() || eventListenerPointcut()", throwing = "ex")
	public void logException(JoinPoint joinPoint, Throwable ex) {
		Method method = getMethod(joinPoint);
		log.error("??Exception in method: {} - {}", method.getName(), ex.getMessage(), ex);
	}

	private void logMethodEntry(String layer, JoinPoint joinPoint) {
		Method method = getMethod(joinPoint);
		log.info("===== [{}] Entering method: {} =====", layer, method.getName());
		logParameters(joinPoint);
	}

	private void logMethodReturn(String layer, JoinPoint joinPoint, Object returnObj) {
		Method method = getMethod(joinPoint);
		log.info("===== [{}] Returning method: {} =====", layer, method.getName());
		logReturnValue(returnObj);
	}

	// JoinPoint?먯꽌 硫붿냼???뺣낫瑜?異붿텧?섎뒗 硫붿냼??
	private Method getMethod(JoinPoint joinPoint) {
		MethodSignature signature = (MethodSignature)joinPoint.getSignature();
		return signature.getMethod();
	}

	// 硫붿냼???뚮씪誘명꽣瑜?濡쒓퉭?섎뒗 硫붿냼??
	private void logParameters(JoinPoint joinPoint) {
		Object[] args = joinPoint.getArgs();
		String[] parameterNames = ((MethodSignature)joinPoint.getSignature()).getParameterNames();

		if (args.length == 0) {
			log.info("No parameters");
		} else {
			for (int i = 0; i < args.length; i++) {
				log.info("Parameter name: {}, type: {}, value: {}",
					parameterNames[i],
					args[i] != null ? args[i].getClass().getSimpleName() : "null",
					args[i]);
			}
		}
	}

	// 諛섑솚??媛앹껜瑜?濡쒓퉭?섎뒗 硫붿냼??
	private void logReturnValue(Object returnObj) {
		if (returnObj != null) {
			log.info("Return type: {}, value: {}", returnObj.getClass().getSimpleName(), returnObj);
		} else {
			log.info("Return value is null");
		}
	}
}

===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\response\CommonControllerAdvice.java =====
package com.example.osid.common.response;

import org.springframework.core.MethodParameter;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;

@RestController
public class CommonControllerAdvice implements ResponseBodyAdvice<Object> {

    @Override
    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {
        return !Void.TYPE.equals(returnType.getParameterType());
    }

    @Override
    public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType,
            Class<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request,
            ServerHttpResponse response) {

        //CommonResponse 諛섑솚, ?곹깭肄붾뱶? ?④퍡
        //created, ?먮윭 ??
        if (body instanceof CommonResponse<?> commonBody) {
            response.setStatusCode(commonBody.getStatus());
            return commonBody;
        }

        //response媛앹껜 ?놁쓣??
        if (body == null) {
            return CommonResponse.ok();
        }

        ResponseStatus responseStatus = returnType.getMethodAnnotation(ResponseStatus.class);
        if (responseStatus != null && responseStatus.value() == HttpStatus.CREATED) {
            return CommonResponse.created(body);
        }

        //response媛앹껜 ?덈뒗 ok?곹깭肄붾뱶 諛섑솚
        return CommonResponse.ok(body);

    }

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\response\CommonResponse.java =====
package com.example.osid.common.response;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.SuccessCode;

import com.example.osid.common.response.ErrorResponse.FieldError;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;

import java.time.LocalDateTime;
import java.util.List;
import lombok.Builder;
import lombok.Getter;
import org.springframework.http.HttpStatus;

@Getter
@Builder
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CommonResponse<T> {

    @Builder.Default
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
    private final LocalDateTime timestamp = LocalDateTime.now();
    private final boolean isError;
    private final HttpStatus status;
    private final String code;
    private final String message;
    private final T data;
    private final ErrorResponse errorResponse;

    public static <T> CommonResponse<T> ok() {
        return CommonResponse.<T>builder()
                .timestamp(LocalDateTime.now())
                .isError(false)
                .status(SuccessCode.OK.getHttpStatus())
                .code(SuccessCode.OK.getCode())
                .message(SuccessCode.OK.getMessage())
                .data(null)
                .errorResponse(null)
                .build();
    }

    public static <T> CommonResponse<T> ok(T data) {
        return CommonResponse.<T>builder()
                .timestamp(LocalDateTime.now())
                .isError(false)
                .status(SuccessCode.OK.getHttpStatus())
                .code(SuccessCode.OK.getCode())
                .message(SuccessCode.OK.getMessage())
                .data(data)
                .errorResponse(null)
                .build();
    }

    public static <T> CommonResponse<T> created() {
        return CommonResponse.<T>builder()
            .timestamp(LocalDateTime.now())
            .isError(false)
            .status(SuccessCode.CREATED.getHttpStatus())
            .code(SuccessCode.CREATED.getCode())
            .message(SuccessCode.CREATED.getMessage())
            .data(null)
            .errorResponse(null)
            .build();
    }

    public static <T> CommonResponse<T> created(T data) {
        return CommonResponse.<T>builder()
                .timestamp(LocalDateTime.now())
                .isError(false)
                .status(SuccessCode.CREATED.getHttpStatus())
                .code(SuccessCode.CREATED.getCode())
                .message(SuccessCode.CREATED.getMessage())
                .data(data)
                .errorResponse(null)
                .build();
    }

    public static CommonResponse<Void> error(BaseCode baseCode) {
        return CommonResponse.<Void>builder()
                .timestamp(LocalDateTime.now())
                .isError(true)
                .status(baseCode.getHttpStatus())
                .code(baseCode.getCode())
                .message(baseCode.getMessage())
                .data(null)
                .errorResponse(null)
                .build();
    }

    public static CommonResponse<Void> error(BaseCode baseCode, List<ErrorResponse.FieldError> fieldErrors) {
        return CommonResponse.<Void>builder()
                .timestamp(LocalDateTime.now())
                .isError(true)
                .status(baseCode.getHttpStatus())
                .code(baseCode.getCode())
                .message(baseCode.getMessage())
                .data(null)
                .errorResponse(ErrorResponse.of(baseCode, fieldErrors))
                .build();
    }
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\response\ErrorResponse.java =====
package com.example.osid.common.response;

import com.example.osid.common.exception.BaseCode;
import com.fasterxml.jackson.annotation.JsonInclude;
import java.util.ArrayList;
import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ErrorResponse {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    private final List<FieldError> fieldErrors;

    public static ErrorResponse of(BaseCode baseCode) {
        return ErrorResponse.builder()
                .fieldErrors(new ArrayList<>())
                .build();
    }

    public static ErrorResponse of(BaseCode baseCode, String message) {
        return ErrorResponse.builder()
                .fieldErrors(new ArrayList<>())
                .build();
    }

    public static ErrorResponse of(BaseCode baseCode, List<FieldError> fieldErrors) {
        return ErrorResponse.builder()
                .fieldErrors(fieldErrors)
                .build();
    }

    @Getter
    @Builder
    public static class FieldError {
        private String field;
        private String value;
        private String reason;

        public static FieldError of(String field, String value, String reason) {
            return FieldError.builder()
                    .field(field)
                    .value(value)
                    .reason(reason)
                    .build();
        }
    }

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\common\response\PageResponse.java =====
package com.example.osid.common.response;

import java.util.List;

import org.springframework.data.domain.Page;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@NoArgsConstructor
@AllArgsConstructor
public class PageResponse<T> {

	private List<T> content;
	private int pageNumber;
	private int pageSize;
	private long totalElements;
	private int totalPages;

	public static <T> PageResponse<T> from(Page<T> page) {
		return new PageResponse<>(
			page.getContent(),
			page.getNumber(),
			page.getSize(),
			page.getTotalElements(),
			page.getTotalPages()
		);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\batch\BatchConfig.java =====
package com.example.osid.config.batch;

import java.time.Duration;
import java.util.List;
import java.util.Map;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.database.JpaCursorItemReader;
import org.springframework.batch.item.database.JpaItemWriter;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.web.reactive.function.client.WebClient;

import com.example.osid.domain.history.dto.PredictRequest;
import com.example.osid.domain.history.dto.PredictResponse;
import com.example.osid.domain.history.entity.History;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.enums.OrderStatus;
import com.example.osid.domain.order.repository.OrderRepository;
import com.example.osid.domain.waitingorder.entity.WaitingOrders;
import com.example.osid.domain.waitingorder.enums.WaitingStatus;
import com.example.osid.domain.waitingorder.repository.WaitingOrderRepository;

import io.netty.channel.ChannelOption;
import jakarta.persistence.EntityManagerFactory;
import lombok.extern.slf4j.Slf4j;
import reactor.netty.http.client.HttpClient;

@Configuration
// @EnableBatchProcessing
@Slf4j
public class BatchConfig {

	private final JobRepository jobRepository;
	private final PlatformTransactionManager txManager;
	private final JpaClearListener jpaClearListener;
	private final WaitingOrderRepository waitingOrderRepository;
	private final OrderRepository orderRepository;
	private final HttpClient httpClient;
	private final WebClient webClient;

	public BatchConfig(JobRepository jobRepository,
		@Qualifier("dataTransactionManager") PlatformTransactionManager txManager,
		JpaClearListener jpaClearListener, WaitingOrderRepository waitingOrderRepository,
		OrderRepository orderRepository) {
		this.jobRepository = jobRepository;
		this.txManager = txManager;
		this.jpaClearListener = jpaClearListener;
		this.waitingOrderRepository = waitingOrderRepository;
		this.orderRepository = orderRepository;

		this.httpClient = HttpClient.create()
			.responseTimeout(Duration.ofSeconds(25))         // ?쒕쾭 ?묐떟 25s ?쒗븳
			.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);
		this.webClient = WebClient.builder()
			.baseUrl("https://mlp-learning-test.onrender.com")
			.clientConnector(new ReactorClientHttpConnector(httpClient))
			.build();
	}

	/**
	 * ?湲?二쇰Ц(`WaitingOrders`) ?뷀떚?곕? 而ㅼ꽌 諛⑹떇?쇰줈 ?쒖감?곸쑝濡??쎌뼱?ㅻ뒗 Reader
	 * - 議곌굔: waitingStatus媛 WAITING???곗씠??
	 * - ?뺣젹: createdAt, id 湲곗? (?⑥“??蹂댁옣)
	 */
	@Bean
	public JpaCursorItemReader<WaitingOrders> waitingOrderReader(
		@Qualifier("dataEntityManager") EntityManagerFactory emf) {
		JpaCursorItemReader<WaitingOrders> reader = new JpaCursorItemReader<>();
		reader.setName("orderCursorReader");
		reader.setEntityManagerFactory(emf);
		reader.setQueryString(
			"SELECT o FROM WaitingOrders o WHERE o.waitingStatus = :status ORDER BY o.createdAt ASC, o.id ASC");
		reader.setParameterValues(Map.of("status", WaitingStatus.WAITING));
		reader.setMaxItemCount(10);
		return reader;
	}

	/**
	 * ?덉륫 寃곌낵(`History`)瑜???ν븯湲??꾪빐 ?곹깭媛 PROCESSING??`WaitingOrders`瑜??쎌뼱?ㅻ뒗 Reader
	 * - 議곌굔: waitingStatus媛 PROCESSING
	 * - ?뺣젹: createdAt, id 湲곗? (?⑥“??蹂댁옣)
	 */
	@Bean
	public JpaCursorItemReader<WaitingOrders> saveHistoriesReader(
		@Qualifier("dataEntityManager") EntityManagerFactory emf) {
		JpaCursorItemReader<WaitingOrders> reader = new JpaCursorItemReader<>();
		reader.setName("orderCursorReader");
		reader.setEntityManagerFactory(emf);
		reader.setQueryString(
			"SELECT o FROM WaitingOrders o WHERE o.waitingStatus = :status ORDER BY o.createdAt ASC, o.id ASC");
		reader.setParameterValues(Map.of("status", WaitingStatus.PROCESSING));
		reader.setMaxItemCount(10);
		return reader;
	}

	/**
	 * ?湲?二쇰Ц???곹깭瑜?PROCESSING?쇰줈 蹂寃쏀븯怨??곌???二쇰Ц ?곹깭瑜?IN_PRODUCTION?쇰줈 ?낅뜲?댄듃?섎뒗 Processor
	 */
	@Bean
	public ItemProcessor<WaitingOrders, WaitingOrders> waitingOrderProcessor() {
		return item -> {

			item.setWaitingStatus(WaitingStatus.PROCESSING);
			Orders orders = item.getOrders();
			orders.setOrderStatus(OrderStatus.IN_PRODUCTION);
			return item;
		};
	}

	/**
	 * WebClient瑜??듯빐 ML API瑜??몄텧?섍퀬 ?덉륫 寃곌낵瑜?湲곕컲?쇰줈 History 媛앹껜 ?앹꽦
	 * - waitingStatus??COMPLETED濡??낅뜲?댄듃
	 * - History??媛?怨듭젙蹂??덉긽 ?뚯슂?쒓컙 諛?珥??뚯슂?쒓컙 ???
	 */
	@Bean
	public ItemProcessor<WaitingOrders, History> historyProcessor() {
		return item -> {
			Orders orders = item.getOrders();
			PredictRequest predictRequest = new PredictRequest(
				orders.getModel().getCategory().toString(),
				orders.getOrderOptions());

			PredictResponse response = webClient.post()
				.uri("/predict_all")
				.bodyValue(predictRequest)
				.retrieve()
				.bodyToMono(PredictResponse.class)
				.block();

			History history = new History();
			history.setBodyNumber(orders.getBodyNumber());
			List<PredictResponse.Stage> stages = response.getStages();
			history.setStage1(stages.get(0).getTotalWithDelay());
			history.setStage2(stages.get(1).getTotalWithDelay());
			history.setStage3(stages.get(2).getTotalWithDelay());
			history.setStage4(stages.get(3).getTotalWithDelay());
			history.setStage5(stages.get(4).getTotalWithDelay());
			history.setTotalDuration(response.getTotalDuration());
			// log.info("{}, pd: {}, twd: {}, tdh: {}",
			// 	stages.get(0).getStage(),
			// 	stages.get(0).getPredDuration(),
			// 	stages.get(0).getTotalWithDelay(),
			// 	stages.get(0).getTransportDelay()
			// );
			// log.info("{}, pd: {}, twd: {}, tdh: {}",
			// 	stages.get(1).getStage(),
			// 	stages.get(1).getPredDuration(),
			// 	stages.get(1).getTotalWithDelay(),
			// 	stages.get(1).getTransportDelay()
			// );
			// log.info("{}, pd: {}, twd: {}, tdh: {}",
			// 	stages.get(2).getStage(),
			// 	stages.get(2).getPredDuration(),
			// 	stages.get(2).getTotalWithDelay(),
			// 	stages.get(2).getTransportDelay()
			// );
			// log.info("{}, pd: {}, twd: {}, tdh: {}",
			// 	stages.get(3).getStage(),
			// 	stages.get(3).getPredDuration(),
			// 	stages.get(3).getTotalWithDelay(),
			// 	stages.get(3).getTransportDelay()
			// );
			// log.info("{},pd: {}, twd: {}, tdh: {}",
			// 	stages.get(4).getStage(),
			// 	stages.get(4).getPredDuration(),
			// 	stages.get(4).getTotalWithDelay(),
			// 	stages.get(4).getTransportDelay()
			// );
			// log.info("紐⑤뜽: {}, ?듭뀡: {}, 諛붾뵒?섎쾭: {}, s1: {}, s2: {}, s3: {}, s4: {}, s5: {}, TotalDuration: {}",
			// 	predictRequest.getModelType(),
			// 	predictRequest.getOptionList(),
			// 	history.getBodyNumber(),
			// 	history.getStage1(),
			// 	history.getStage2(),
			// 	history.getStage3(),
			// 	history.getStage4(),
			// 	history.getStage5(),
			// 	history.getTotalDuration()
			// );
			return history;

		};
	}

	/**
	 * ?곹깭媛 蹂寃쎈맂 `WaitingOrders`瑜??곗씠?곕쿋?댁뒪????ν븯??Writer
	 * - ?곌???Orders??Cascade ?ㅼ젙???섏뼱 ?덉뼱???④퍡 諛섏쁺??
	 */
	@Bean
	public JpaItemWriter<WaitingOrders> waitingOrderWriter(@Qualifier("dataEntityManager") EntityManagerFactory emf) {
		JpaItemWriter<WaitingOrders> writer = new JpaItemWriter<>();
		writer.setEntityManagerFactory(emf);
		return writer;
	}

	/**
	 * ?덉륫 寃곌낵(`History`)瑜??곗씠?곕쿋?댁뒪????ν븯??Writer
	 */
	@Bean
	public JpaItemWriter<History> historyWriter(@Qualifier("dataEntityManager") EntityManagerFactory emf) {
		JpaItemWriter<History> writer = new JpaItemWriter<>();
		writer.setEntityManagerFactory(emf);
		return writer;
	}

	/**
	 * Job 援ъ꽦: ??媛쒖쓽 Step???쒖감?곸쑝濡??ㅽ뻾 (?湲?二쇰Ц 泥섎━ ???덉륫 寃곌낵 ???
	 */
	@Bean
	public Job customJob(Step waitingOrderStep, Step historyStep) {

		var name = "customJob";
		var builder = new JobBuilder(name, jobRepository);
		return builder
			.start(waitingOrderStep)
			.next(historyStep)
			.build();
	}

	/**
	 * ?湲?二쇰Ц ?곹깭 ?낅뜲?댄듃 Step ?뺤쓽
	 * - Chunk 湲곕컲 泥섎━ (chunk size: 10)
	 * - ?ㅽ뙣 ??理쒕? 3???ъ떆??
	 * - Step ?꾨즺 ??1李?罹먯떆 clear瑜??꾪빐 listener ?ы븿
	 */
	@Bean
	public Step waitingOrderStep(JpaCursorItemReader<WaitingOrders> waitingOrderReader,
		ItemProcessor<WaitingOrders, WaitingOrders> waitingOrderProcessor,
		JpaItemWriter<WaitingOrders> waitingOrderWriter) {

		var name = "waitingOrderStep";
		var builder = new StepBuilder(name, jobRepository);
		// return builder.tasklet(customTasklet, txManager).build();
		// ?뮕 chunk(1000): 1000嫄??⑥쐞濡?諛섎났 泥섎━ (?먰븯??chunk size濡?議곗젙)
		return builder
			.<WaitingOrders, WaitingOrders>chunk(10, txManager)
			.reader(waitingOrderReader)
			.processor(waitingOrderProcessor)
			.writer(waitingOrderWriter)
			.faultTolerant()
			.retry(Exception.class)
			.retryLimit(3)
			.listener(jpaClearListener)
			.build();
	}

	/**
	 * ?덉륫 寃곌낵 ???Step ?뺤쓽
	 * - Chunk 湲곕컲 泥섎━ (chunk size: 10)
	 * - ?ㅽ뙣 ??理쒕? 3???ъ떆??
	 * - Step ?꾨즺 ??1李?罹먯떆 clear瑜??꾪빐 listener ?ы븿
	 */
	@Bean
	public Step historyStep(JpaCursorItemReader<WaitingOrders> saveHistoriesReader,
		ItemProcessor<WaitingOrders, History> historyProcessor,
		JpaItemWriter<History> historyWriter,
		HistoryWriteListener historyWriteListener) {

		var name = "historyStep";
		var builder = new StepBuilder(name, jobRepository);
		// return builder.tasklet(customTasklet, txManager).build();
		// ?뮕 chunk(1000): 1000嫄??⑥쐞濡?諛섎났 泥섎━ (?먰븯??chunk size濡?議곗젙)
		return builder
			.<WaitingOrders, History>chunk(10, txManager)
			.reader(saveHistoriesReader)
			.processor(historyProcessor)
			.writer(historyWriter)
			.listener(historyWriteListener) // ?꾩쿂由?由ъ뒪???곌껐
			.faultTolerant()
			.retry(Exception.class)
			.retryLimit(3)
			.listener(jpaClearListener)
			.build();
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\batch\HistoryWriteListener.java =====
package com.example.osid.config.batch;

import java.time.LocalDateTime;

import org.springframework.batch.core.ItemWriteListener;
import org.springframework.batch.item.Chunk;
import org.springframework.stereotype.Component;

import com.example.osid.domain.history.entity.History;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.exception.OrderErrorCode;
import com.example.osid.domain.order.exception.OrderException;
import com.example.osid.domain.order.repository.OrderRepository;
import com.example.osid.domain.waitingorder.entity.WaitingOrders;
import com.example.osid.domain.waitingorder.enums.WaitingStatus;
import com.example.osid.domain.waitingorder.exception.WaitingOrderErrorCode;
import com.example.osid.domain.waitingorder.exception.WaitingOrderException;
import com.example.osid.domain.waitingorder.repository.WaitingOrderRepository;

import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class HistoryWriteListener implements ItemWriteListener<History> {

	private final WaitingOrderRepository waitingOrderRepository;
	private final OrderRepository orderRepository;

	@Override
	public void afterWrite(Chunk<? extends History> items) {
		for (History history : items) {
			Orders order = orderRepository.findByBodyNumber(history.getBodyNumber())
				.orElseThrow(() -> new OrderException(OrderErrorCode.ORDER_NOT_FOUND));
			WaitingOrders waitingOrder = waitingOrderRepository.findByOrders(order)
				.orElseThrow(() -> new WaitingOrderException(WaitingOrderErrorCode.WAITING_ORDER_NOT_FOUND));

			waitingOrder.setWaitingStatus(WaitingStatus.COMPLETED);
			waitingOrderRepository.save(waitingOrder);

			double totalDuration = history.getTotalDuration().doubleValue(); // ex: 1.5 ??1?쒓컙 30遺?
			int hours = (int)totalDuration;
			int minutes = (int)Math.round((totalDuration - hours) * 60);

			LocalDateTime updatedAt = waitingOrder.getUpdatedAt();
			LocalDateTime expectedAt = updatedAt.plusDays(16).plusHours(hours).plusMinutes(minutes);

			order.setExpectedDeliveryAt(expectedAt);

			orderRepository.save(order);
		}
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\batch\JpaClearListener.java =====
package com.example.osid.config.batch;

import org.springframework.batch.core.ChunkListener;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.stereotype.Component;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
@StepScope   // ?닿구 ?щ㈃ EMF???ㅽ뀦 ?ㅽ뻾 ?쒖젏???꾨줈??proxy)濡?二쇱엯?⑸땲??
public class JpaClearListener implements ChunkListener {

	// private final EntityManagerFactory emf;
	//
	// @Override
	// public void afterChunk(ChunkContext context) {
	// 	emf.createEntityManager().clear();   // ???꾩닔 諛⑹?
	// }

	@PersistenceContext
	private EntityManager entityManager;

	@Override
	public void afterChunk(ChunkContext context) {
		entityManager.clear();
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\db\DataDBConfig.java =====
package com.example.osid.config.db;

import java.util.HashMap;

import javax.sql.DataSource;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
@EnableJpaRepositories(
	basePackages = {
		"com.example.osid.domain",
		"com.example.osid.common",
		"com.example.osid.event"
	},
	entityManagerFactoryRef = "dataEntityManager",
	transactionManagerRef = "dataTransactionManager"
)
public class DataDBConfig {

	@Bean
	@ConfigurationProperties(prefix = "spring.datasource-data")
	public DataSource dataDBSource() {
		return DataSourceBuilder.create().build();
	}

	@Bean
	public LocalContainerEntityManagerFactoryBean dataEntityManager() {

		LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();

		em.setDataSource(dataDBSource());
		em.setPackagesToScan(
			new String[] {"com.example.osid.domain", "com.example.osid.common", "com.example.osid.event"});
		em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());

		HashMap<String, Object> properties = new HashMap<>();
		properties.put("hibernate.physical_naming_strategy",
			"org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy");
		properties.put("hibernate.hbm2ddl.auto", "update");
		// properties.put("hibernate.show_sql", "true");
		properties.put("hibernate.format_sql", "true");
		properties.put("hibernate.use_sql_comments", "true");
		properties.put("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect");
		properties.put("hibernate.jdbc.fetch_size", "1000");

		em.setJpaPropertyMap(properties);

		return em;
	}

	@Bean(name = "dataTransactionManager")
	public PlatformTransactionManager dataTransactionManager() {

		JpaTransactionManager transactionManager = new JpaTransactionManager();

		transactionManager.setEntityManagerFactory(dataEntityManager().getObject());

		return transactionManager;
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\db\MetaDBConfig.java =====
package com.example.osid.config.db;

import javax.sql.DataSource;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
public class MetaDBConfig {

	@Primary
	@Bean
	@ConfigurationProperties(prefix = "spring.datasource-meta")
	public DataSource metaDBSource() {
		return DataSourceBuilder.create().build();
	}

	@Primary
	@Bean
	public PlatformTransactionManager metaDBTransactionManager() {
		return new DataSourceTransactionManager(metaDBSource());
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\db\QuartzDBConfig.java =====
// package com.example.osid.config.db;
//
// import javax.sql.DataSource;
//
// import org.springframework.boot.context.properties.ConfigurationProperties;
// import org.springframework.boot.jdbc.DataSourceBuilder;
// import org.springframework.context.annotation.Bean;
// import org.springframework.context.annotation.Configuration;
// import org.springframework.jdbc.datasource.DataSourceTransactionManager;
// import org.springframework.transaction.PlatformTransactionManager;
//
// @Configuration
// public class QuartzDBConfig {
//
// 	@Bean(name = "quartzDataSource")
// 	@ConfigurationProperties(prefix = "spring.datasource-quartz")
// 	public DataSource quartzDataSource() {
// 		return DataSourceBuilder.create().build();
// 	}
//
// 	@Bean(name = "quartzTransactionManager")
// 	public PlatformTransactionManager quartzTransactionManager() {
// 		return new DataSourceTransactionManager(quartzDataSource());
// 	}
// }
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\quartz\DataSourceConfig.java =====
// package com.example.osid.config.quartz;
//
// import org.springframework.boot.autoconfigure.quartz.QuartzDataSource;
// import org.springframework.boot.autoconfigure.quartz.QuartzTransactionManager;
// import org.springframework.context.annotation.Bean;
// import org.springframework.context.annotation.Configuration;
// import org.springframework.core.io.ClassPathResource;
// import org.springframework.jdbc.datasource.DataSourceTransactionManager;
// import org.springframework.jdbc.datasource.init.DataSourceInitializer;
// import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
//
// @Configuration
// public class DataSourceConfig {
//
// 	@QuartzDataSource
// 	DataSource dataSource;
//
// 	public DataSourceConfig(DataSource dataSource) {
// 		this.dataSource = dataSource;
// 	}
//
// 	@Bean
// 	@QuartzTransactionManager
// 	public DataSourceTransactionManager transactionManager() {
// 		return new DataSourceTransactionManager(dataSource);
// 	}
//
// 	@Bean
// 	public DataSourceInitializer databasePoulator() {
// 		ResourceDatabasePopulator populator = new ResourceDatabasePopulator();
// 		populator.addScript(new ClassPathResource("org/springframework/batch/core/schema-drop-mysql.sql"));
// 		populator.addScript(new ClassPathResource("org/springframework/batch/core/schema-mysql.sql"));
// 		populator.setContinueOnError(false);
// 		populator.setIgnoreFailedDrops(false);
// 		DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();
// 		dataSourceInitializer.setDataSource(dataSource);
// 		dataSourceInitializer.setDatabasePopulator(populator);
// 		return dataSourceInitializer;
// 	}
// }
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\quartz\QuartzConfig.java =====
// package com.example.osid.config.quartz;
//
// import org.quartz.JobBuilder;
// import org.quartz.JobDataMap;
// import org.quartz.JobDetail;
// import org.quartz.Trigger;
// import org.quartz.TriggerBuilder;
// import org.springframework.batch.core.configuration.JobLocator;
// import org.springframework.batch.core.launch.JobLauncher;
// import org.springframework.beans.factory.annotation.Autowired;
// import org.springframework.context.annotation.Bean;
// import org.springframework.context.annotation.Configuration;
//
// @Configuration
// public class QuartzConfig {
//
// 	@Autowired
// 	private JobLauncher jobLauncher;
//
// 	@Autowired
// 	private JobLocator jobLocator;
//
// 	@Bean
// 	public JobDetail jobDetail() {
// 		JobDataMap jobDataMap = new JobDataMap();
// 		jobDataMap.put("jobName", "customJob");
//
// 		return JobBuilder.newJob(QuartzJobLauncher.class)
// 			.withIdentity("customJob")
// 			.setJobData(jobDataMap)
// 			.storeDurably()
// 			.build();
//
// 	}
//
// 	@Bean
// 	public Trigger jobTrigger() {
// 		// 	SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder
// 		// 		.simpleSchedule()
// 		// 		.withIntervalInSeconds(10)
// 		// 		.repeatForever();
// 		//
// 		// 	return TriggerBuilder
// 		// 		.newTrigger()
// 		// 		.forJob(jobDetail())
// 		// 		.withIdentity("jobTrigger")
// 		// 		.withSchedule(scheduleBuilder)
// 		// 		.build();
//
// 		// Cron: "0 0 0 * * ?" ??留ㅼ씪 0??0遺?0珥?
// 		return TriggerBuilder
// 			.newTrigger()
// 			.forJob(jobDetail())
// 			.withIdentity("jobTrigger")
// 			.withSchedule(
// 				org.quartz.CronScheduleBuilder.cronSchedule("0 15 4 * * ?")
// 			)
// 			.build();
// 	}
// }
//
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\quartz\QuartzDataSourceConfig.java =====
// package com.example.osid.config.quartz;
//
// import javax.sql.DataSource;
//
// import org.springframework.beans.factory.annotation.Value;
// import org.springframework.boot.autoconfigure.quartz.QuartzDataSource;
// import org.springframework.context.annotation.Bean;
// import org.springframework.context.annotation.Configuration;
//
// import com.zaxxer.hikari.HikariDataSource;
//
// @Configuration
// public class QuartzDataSourceConfig {
//
// 	@Value("${LOCAL_DB_USERNAME}")
// 	private String name;
//
// 	@Value("${LOCAL_DB_PASSWORD}")
// 	private String password;
//
// 	@Bean(name = "quartzDataSource")
// 	@QuartzDataSource
// 	public DataSource quartzDataSource() {
// 		HikariDataSource ds = new HikariDataSource();
// 		ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
// 		ds.setJdbcUrl("jdbc:mysql://localhost:3306/quartz_db");
// 		ds.setUsername(name); // <- ?섍꼍蹂?섎줈 諛붽퓭????
// 		ds.setPassword(password);
// 		return ds;
// 	}
// }
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\quartz\QuartzJobLauncher.java =====
// package com.example.osid.config.quartz;
//
// import org.quartz.JobExecutionContext;
// import org.springframework.batch.core.Job;
// import org.springframework.batch.core.JobParameters;
// import org.springframework.batch.core.JobParametersBuilder;
// import org.springframework.batch.core.configuration.JobLocator;
// import org.springframework.batch.core.launch.JobLauncher;
// import org.springframework.scheduling.quartz.QuartzJobBean;
// import org.springframework.stereotype.Component;
//
// import lombok.Getter;
// import lombok.Setter;
//
// @Component
// public class QuartzJobLauncher extends QuartzJobBean {
//
// 	@Getter
// 	@Setter
// 	String jobName;
//
// 	JobLauncher jobLauncher;
// 	JobLocator jobLocator;
//
// 	public QuartzJobLauncher(JobLauncher jobLauncher, JobLocator jobLocator) {
// 		this.jobLauncher = jobLauncher;
// 		this.jobLocator = jobLocator;
// 	}
//
// 	@Override
// 	protected void executeInternal(JobExecutionContext context) {
// 		try {
// 			Job job = jobLocator.getJob(jobName);
//
// 			JobParameters params = new JobParametersBuilder()
// 				.addString("JobID", String.valueOf(System.currentTimeMillis()))
// 				.toJobParameters();
//
// 			jobLauncher.run(job, params);
// 		} catch (Exception e) {
// 			e.printStackTrace();
// 		}
// 	}
// }
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\quartz\QuartzSchemaInitializerConfig.java =====
// package com.example.osid.config.quartz;
//
// import javax.sql.DataSource;
//
// import org.springframework.beans.factory.annotation.Qualifier;
// import org.springframework.context.annotation.Bean;
// import org.springframework.core.io.ClassPathResource;
// import org.springframework.jdbc.datasource.init.DataSourceInitializer;
// import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
//
// public class QuartzSchemaInitializerConfig {
// 	@Bean
// 	public DataSourceInitializer quartzSchemaInitializer(@Qualifier("quartzDataSource") DataSource quartzDataSource) {
// 		ResourceDatabasePopulator populator = new ResourceDatabasePopulator();
// 		populator.addScript(
// 			new ClassPathResource("quartz/tables_mysql_innodb.sql")); // ?꾩튂??src/main/resources/quartz ???ъ빞 ??
// 		populator.setContinueOnError(false);
// 		populator.setIgnoreFailedDrops(true);
//
// 		DataSourceInitializer initializer = new DataSourceInitializer();
// 		initializer.setDataSource(quartzDataSource);
// 		initializer.setDatabasePopulator(populator);
// 		return initializer;
// 	}
//
// }
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\CacheConfig.java =====
package com.example.osid.config;

import java.util.concurrent.TimeUnit;

import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.github.benmanes.caffeine.cache.Caffeine;

@Configuration
@EnableCaching
public class CacheConfig {

	@Bean
	public CacheManager cacheManager() {
		CaffeineCacheManager cacheManager = new CaffeineCacheManager("models", "options");
		cacheManager.setCaffeine(Caffeine.newBuilder()
			.maximumSize(100)
			.expireAfterWrite(30, TimeUnit.MINUTES)
		);
		cacheManager.setAllowNullValues(false);
		return cacheManager;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\JacksonConfig.java =====
package com.example.osid.config;

import org.openapitools.jackson.nullable.JsonNullableModule;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;

import com.fasterxml.jackson.annotation.JsonInclude;

// JasonNullable ??泥섎━?섎뒗 諛⑸쾿???뚮━湲곗쐞??異붽??곸씤 紐⑤뱢???깅줉
@Configuration
public class JacksonConfig {

	@Bean
	Jackson2ObjectMapperBuilder objectMapperBuilder() {
		Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();
		builder.serializationInclusion(JsonInclude.Include.ALWAYS)
			.modulesToInstall(new JsonNullableModule());
		return builder;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\QueryDslConfig.java =====
package com.example.osid.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.querydsl.jpa.impl.JPAQueryFactory;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;

@Configuration
public class QueryDslConfig {

	@PersistenceContext
	private EntityManager em;

	@Bean
	public JPAQueryFactory jpaQueryFactory() {
		return new JPAQueryFactory(em);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\QuerydslUtils.java =====
package com.example.osid.config;

import org.springframework.data.domain.Pageable;

import com.querydsl.core.types.Order;
import com.querydsl.core.types.OrderSpecifier;
import com.querydsl.core.types.dsl.EntityPathBase;
import com.querydsl.core.types.dsl.Expressions;

public abstract class QuerydslUtils {

	public static <T> OrderSpecifier<?>[] getSort(Pageable pageable, EntityPathBase<T> qClass) {
		return pageable.getSort().stream().map(order ->
				new OrderSpecifier(
					Order.valueOf(order.getDirection().name()),
					Expressions.path(Object.class, qClass, order.getProperty())
				)).toList()
			.toArray(new OrderSpecifier[0]);
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\RabbitMQConfig.java =====
package com.example.osid.config;

import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.QueueBuilder;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConditionalOnProperty(name = "mq.enabled", havingValue = "true", matchIfMissing = false)
public class RabbitMQConfig {

	// Main Exchange
	public static final String EXCHANGE = "order.exchange";
	// public static final String ROUTING_KEY = "order.completed";

	// MyCar & DLQ
	public static final String MY_CAR_QUEUE = "order.completed.myCar.queue";
	public static final String MY_CAR_ROUTING_KEY = "order.completed.myCar";
	public static final String MY_CAR_DLQ = "order.completed.myCar.dlq.queue";
	public static final String MY_CAR_DLX = "dlx.myCar.exchange";
	public static final String MY_CAR_DLQ_ROUTING_KEY = "order.completed.myCar.dlq";

	// Email & DLQ
	public static final String EMAIL_QUEUE = "order.completed.email.queue";
	public static final String EMAIL_ROUTING_KEY = "order.completed.email";
	public static final String EMAIL_DLQ = "order.completed.email.dlq.queue";
	public static final String EMAIL_DLX = "dlx.email.exchange";
	public static final String EMAIL_DLQ_ROUTING_KEY = "order.completed.email.dlq";

	// 硫붿씪 吏????(?ㅽ뙣???ъ떆???⑸룄)
	public static final String EMAIL_DELAY_QUEUE = "order.completed.email.retry.queue";
	public static final String EMAIL_DELAY_ROUTING_KEY = "order.completed.email.retry";

	@Bean
	public DirectExchange orderExchange() {
		return new DirectExchange(EXCHANGE);
	}

	@Bean
	public DirectExchange myCarDlxExchange() {
		return new DirectExchange(MY_CAR_DLX);
	}

	@Bean
	public DirectExchange emailDlxExchange() {
		return new DirectExchange(EMAIL_DLX);
	}

	// 二쇰Ц ?꾨즺 泥섎━??
	//??李??앹꽦
	@Bean
	public Queue mycarQueue() {
		return QueueBuilder.durable(MY_CAR_QUEUE)
			.withArgument("x-dead-letter-exchange", MY_CAR_DLX)
			.withArgument("x-dead-letter-routing-key", MY_CAR_DLQ_ROUTING_KEY)
			.build();
	}

	// 異쒓퀬 硫붿씪 諛쒖넚
	@Bean
	public Queue emailQueue() {
		return QueueBuilder.durable(EMAIL_QUEUE)
			.withArgument("x-dead-letter-exchange", EMAIL_DLX)
			.withArgument("x-dead-letter-routing-key", EMAIL_DLQ_ROUTING_KEY)
			.build();
	}

	// 異쒓퀬 硫붿씪 諛쒖넚 ?ㅽ뙣???ъ떆??
	@Bean
	public Queue emailRetryQueue() {
		return QueueBuilder.durable(EMAIL_DELAY_QUEUE)
			.withArgument("x-dead-letter-exchange", EXCHANGE)
			.withArgument("x-dead-letter-routing-key", EMAIL_ROUTING_KEY)
			.withArgument("x-message-ttl", 5000) // 5珥?delay
			.build();
	}

	// DLQ
	@Bean
	public Queue mycarDlqQueue() {
		return QueueBuilder.durable(MY_CAR_DLQ).build();
	}

	@Bean
	public Queue emailDlqQueue() {
		return QueueBuilder.durable(EMAIL_DLQ).build();
	}

	@Bean
	public Binding mycarBinding() {
		return BindingBuilder
			.bind(mycarQueue())
			.to(orderExchange())
			.with(MY_CAR_ROUTING_KEY);
	}

	@Bean
	public Binding emailBinding() {
		return BindingBuilder
			.bind(emailQueue())
			.to(orderExchange())
			.with(EMAIL_ROUTING_KEY);
	}

	@Bean
	public Binding mycarDlqBinding() {
		return BindingBuilder
			.bind(mycarDlqQueue())
			.to(myCarDlxExchange())
			.with(MY_CAR_DLQ_ROUTING_KEY);
	}

	@Bean
	public Binding emailDlqBinding() {
		return BindingBuilder
			.bind(emailDlqQueue())
			.to(emailDlxExchange())
			.with(EMAIL_DLQ_ROUTING_KEY);
	}

	@Bean
	public Binding emailDelayBinding() {
		return BindingBuilder
			.bind(emailRetryQueue())
			.to(orderExchange())
			.with(EMAIL_DELAY_ROUTING_KEY);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\RabbitMQMessageConverterConfig.java =====
package com.example.osid.config;

import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.amqp.support.converter.MessageConverter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitMQMessageConverterConfig {
	/*
	 * 	json 吏곷젹??class
	 * */

	@Bean
	public MessageConverter jsonMessageConverter() {
		return new Jackson2JsonMessageConverter();
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\RedisCacheConfig.java =====
// package com.example.osid.config;
//
// import java.time.Duration;
// import java.util.HashMap;
// import java.util.Map;
//
// import org.springframework.cache.annotation.EnableCaching;
// import org.springframework.context.annotation.Bean;
// import org.springframework.context.annotation.Configuration;
// import org.springframework.data.redis.cache.RedisCacheConfiguration;
// import org.springframework.data.redis.cache.RedisCacheManager;
// import org.springframework.data.redis.connection.RedisConnectionFactory;
// import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
// import org.springframework.data.redis.serializer.RedisSerializationContext;
// import org.springframework.data.redis.serializer.StringRedisSerializer;
//
// @Configuration
// @EnableCaching
// public class RedisCacheConfig {
//
// 	@Bean
// 	public RedisCacheManager cacheManager(RedisConnectionFactory connectionFactory) {
// 		RedisCacheConfiguration defaultConfig = RedisCacheConfiguration.defaultCacheConfig()
// 			.entryTtl(Duration.ofMinutes(5))
// 			.disableCachingNullValues()
// 			.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))
// 			.serializeValuesWith(
// 				RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer()));
//
// 		Map<String, RedisCacheConfiguration> cacheConfigs = new HashMap<>();
// 		cacheConfigs.put("models", defaultConfig.entryTtl(Duration.ofMinutes(1))); // ?뚯뒪?몄슜 ttl 1遺??ㅼ젙
// 		cacheConfigs.put("options", defaultConfig.entryTtl(Duration.ofMinutes(1)));
//
// 		return RedisCacheManager.builder(connectionFactory)
// 			.cacheDefaults(defaultConfig)
// 			.withInitialCacheConfigurations(cacheConfigs)
// 			.build();
// 	}
// }
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\SchedulerConfig.java =====
package com.example.osid.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;

@Configuration
@EnableScheduling
public class SchedulerConfig {
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\WaitingJobScheduler.java =====
package com.example.osid.config;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.configuration.JobRegistry;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.Scheduled;

@Configuration
public class WaitingJobScheduler {
	private final JobLauncher jobLauncher;
	private final JobRegistry jobRegistry;

	public WaitingJobScheduler(JobLauncher jobLauncher, JobRegistry jobRegistry) {
		this.jobLauncher = jobLauncher;
		this.jobRegistry = jobRegistry;
	}

	@Scheduled(cron = "0 0 12 * * *", zone = "Asia/Seoul")
	public void runCustomJob() throws Exception {

		System.out.println("Wationg schedule start");

		// SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-hh-mm-ss");
		// String date = dateFormat.format(new Date());

		String date = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss"));

		JobParameters jobParameters = new JobParametersBuilder()
			.addString("date", date)
			.toJobParameters();

		jobLauncher.run(jobRegistry.getJob("customJob"), jobParameters);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\config\WebConfig.java =====
package com.example.osid.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.example.osid.common.auth.LicenseValidationInterceptor;
import com.example.osid.common.logging.ApiLoggingInterceptor;

import lombok.RequiredArgsConstructor;

@Configuration  // ?ㅽ봽留??ㅼ젙 ?대옒?ㅻ줈 ?깅줉
@RequiredArgsConstructor  // final ?꾨뱶瑜??앹꽦??二쇱엯?섎룄濡?濡щ났 泥섎━
public class WebConfig implements WebMvcConfigurer {

	private final ApiLoggingInterceptor apiLoggingInterceptor;  // 濡쒓퉭 ?명꽣?됲꽣
	private final LicenseValidationInterceptor licenseValidationInterceptor;

	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		// InterceptorRegistry??ApiLoggingInterceptor瑜??깅줉
		registry.addInterceptor(apiLoggingInterceptor)
			// ?곸슜??URL ?⑦꽩: /api/** 紐⑤뱺 API ?붿껌
			.addPathPatterns("/api/**")
			// ?쒖쇅??URL ?⑦꽩: 濡쒓렇???뚯썝媛?????좏겙 ?놁씠 ?묎렐?댁빞 ?섎뒗 ?붾뱶?ъ씤??
			.excludePathPatterns(
				"/api/auth/login",      // 濡쒓렇???붾뱶?ъ씤??
				"/api/masters/signup",  // Master ?뚯썝媛??
				"/api/dealers/signup",  // Dealer ?뚯썝媛??
				"/api/users/signup"     // User ?뚯썝媛??
			);
		// ?쇱씠?좎뒪 ?좏슚??寃利?
		registry.addInterceptor(licenseValidationInterceptor)
			.addPathPatterns("/api/**")
			.excludePathPatterns(
				"/api/auth/login",
				"/api/masters/signup",
				"/api/dealers/signup",  // Dealer ?뚯썝媛??
				"/api/users/signup"     // User ?뚯썝媛??
			); // ?꾩슂???곕씪 ?쒖쇅 寃쎈줈 議곗젙
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\controller\DealerController.java =====
package com.example.osid.domain.dealer.controller;

import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.response.CommonResponse;
import com.example.osid.domain.dealer.dto.request.DealerBranchChangeRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerDeletedRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerRoleChangeRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerSignUpRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerUpdatedRequestDto;
import com.example.osid.domain.dealer.dto.response.FindByDealerResponseDto;
import com.example.osid.domain.dealer.service.DealerService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/dealers")
@RequiredArgsConstructor
public class DealerController {

	private final DealerService dealerService;

	@PostMapping("/signup")
	@ResponseStatus(HttpStatus.CREATED)
	public CommonResponse<Void> signUpDealer(@RequestBody @Valid DealerSignUpRequestDto dealerSignUpRequestDto) {
		dealerService.signUpDealer(dealerSignUpRequestDto);
		return CommonResponse.created();
	}

	@GetMapping("/me")
	public CommonResponse<FindByDealerResponseDto> findByDealer(
		@AuthenticationPrincipal CustomUserDetails customUserDetails
	) {
		FindByDealerResponseDto me = dealerService.findByDealer(customUserDetails);
		return CommonResponse.ok(me);
	}

	@PatchMapping("/me")
	public CommonResponse<Void> updatedDealer(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@Valid @RequestBody DealerUpdatedRequestDto dealerUpdatedRequestDto
	) {
		dealerService.updatedDealer(customUserDetails, dealerUpdatedRequestDto);
		return CommonResponse.ok();
	}

	@DeleteMapping("/me")
	public CommonResponse<Void> deletedDealer(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@Valid @RequestBody DealerDeletedRequestDto dealerDeletedRequestDto
	) {
		dealerService.deletedDealer(customUserDetails, dealerDeletedRequestDto);
		return CommonResponse.ok();
	}

	@PatchMapping("/role")
	public CommonResponse<Void> updatedRoleChange(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@Valid @RequestBody DealerRoleChangeRequestDto dealerRoleChangeRequestDto
	) {
		dealerService.updatedRoleChangeDealer(customUserDetails, dealerRoleChangeRequestDto);
		return CommonResponse.ok();
	}

	@PatchMapping("/branch")
	public CommonResponse<Void> updatedBranchChange(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@Valid @RequestBody DealerBranchChangeRequestDto dealerBranchChangeRequestDto
	) {
		dealerService.updatedBranchChangeDealer(customUserDetails, dealerBranchChangeRequestDto);
		return CommonResponse.ok();
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\dto\request\DealerBranchChangeRequestDto.java =====
package com.example.osid.domain.dealer.dto.request;

import com.example.osid.domain.dealer.enums.Branch;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;

@Getter
public class DealerBranchChangeRequestDto {

	@Email(message = "?좏슚???대찓???뺤떇?댁뼱???⑸땲??")
	@NotBlank(message = "dealerEmail? ?꾩닔?낅땲??")
	private String dealerEmail;

	@NotNull(message = "branch? ?꾩닔?낅땲??")
	private Branch branch;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\dto\request\DealerDeletedRequestDto.java =====
package com.example.osid.domain.dealer.dto.request;

import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;

@Getter
public class DealerDeletedRequestDto {

	@NotEmpty(message = "鍮꾨?踰덊샇???꾩닔?낅땲??")
	@Pattern(
		regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,}$",
		message = "鍮꾨?踰덊샇???곷Ц ??뚮Ц?? ?レ옄, ?뱀닔臾몄옄瑜??ы븿??8???댁긽?댁뼱???⑸땲??"
	)
	private String password;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\dto\request\DealerRoleChangeRequestDto.java =====
package com.example.osid.domain.dealer.dto.request;

import com.example.osid.common.entity.enums.Role;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;

@Getter
public class DealerRoleChangeRequestDto {

	@Email(message = "?좏슚???대찓???뺤떇?댁뼱???⑸땲??")
	@NotBlank(message = "dealerEmail? ?꾩닔?낅땲??")
	private String dealerEmail;

	@NotNull(message = "role? ?꾩닔?낅땲??")
	private Role role;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\dto\request\DealerSignUpRequestDto.java =====
package com.example.osid.domain.dealer.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;

@Getter
public class DealerSignUpRequestDto {

	@Email
	@NotEmpty(message = "?대찓?쇱? ?꾩닔?낅땲??")
	private String email;

	@NotEmpty(message = "鍮꾨?踰덊샇???꾩닔?낅땲??")
	@Pattern(
		regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,}$",
		message = "鍮꾨?踰덊샇???곷Ц ??뚮Ц?? ?レ옄, ?뱀닔臾몄옄瑜??ы븿??8???댁긽?댁뼱???⑸땲??"
	)
	private String password;

	@NotEmpty(message = "?대쫫? ?꾩닔?낅땲??")
	private String name;

	@NotEmpty(message = "?꾪솕踰덊샇???꾩닔?낅땲??")
	@Pattern(regexp = "^010-[0-9]{4}-[0-9]{4}$", message = "?꾪솕踰덊샇??010-xxxx-xxxx ?뺤떇?댁뼱???⑸땲??")
	private String phoneNumber;

	@Email
	@NotEmpty(message = "Master Email ? ?꾩닔?낅땲??")
	private String masterEmail;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\dto\request\DealerUpdatedRequestDto.java =====
package com.example.osid.domain.dealer.dto.request;

import jakarta.validation.constraints.Pattern;
import lombok.Getter;

@Getter
public class DealerUpdatedRequestDto {

	private String name;

	@Pattern(regexp = "^010-[0-9]{4}-[0-9]{4}$", message = "?꾪솕踰덊샇??010-xxxx-xxxx ?뺤떇?댁뼱???⑸땲??")
	private String phoneNumber;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\dto\response\DealerInfoResponseDto.java =====
package com.example.osid.domain.dealer.dto.response;

import com.example.osid.domain.dealer.enums.Branch;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class DealerInfoResponseDto {
	private Long id;
	private String email;
	private String name;
	private String phoneNumber;
	private Branch branch;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\dto\response\FindByDealerResponseDto.java =====
package com.example.osid.domain.dealer.dto.response;

import com.example.osid.domain.dealer.enums.Branch;

import lombok.Getter;

@Getter
public class FindByDealerResponseDto {

	private Long id;
	private String email;
	private String name;
	private Branch branch;
	private String phoneNumber;
	private String masterEmail;

	public FindByDealerResponseDto(
		Long id,
		String email,
		String name,
		Branch branch,
		String phoneNumber,
		String masterEmail
	) {
		this.id = id;
		this.email = email;
		this.name = name;
		this.branch = branch;
		this.phoneNumber = phoneNumber;
		this.masterEmail = masterEmail;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\entity\Dealer.java =====
package com.example.osid.domain.dealer.entity;

import java.time.LocalDateTime;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.common.entity.enums.Role;
import com.example.osid.domain.dealer.dto.request.DealerUpdatedRequestDto;
import com.example.osid.domain.dealer.enums.Branch;
import com.example.osid.domain.master.entity.Master;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@Entity
@Getter
@Table(name = "dealers")
@AllArgsConstructor
@NoArgsConstructor
public class Dealer extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(nullable = false)
	private String email; //?대찓??

	@Column(nullable = false)
	private String password; //鍮꾨?踰덊샇

	@Column(nullable = false)
	private String name; //?대쫫

	@Column(nullable = false)
	@Enumerated(EnumType.STRING)
	@Builder.Default
	private Branch branch = Branch.誘몃같?? //吏??

	@Column(nullable = false)
	private String phoneNumber; //?꾪솕踰덊샇

	@Column(nullable = false)
	@Enumerated(EnumType.STRING)
	@Builder.Default
	private Role role = Role.APPLICANT; //??븷

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "master_id", nullable = false)
	private Master master;

	@Column(nullable = false)
	@Builder.Default
	private boolean isDeleted = false;

	// null ?덉슜: ??젣 ?꾩뿉??null
	private LocalDateTime deletedAt;

	public Dealer(
		String email,
		String password,
		String name,
		String phoneNumber,
		Master master
	) {
		this.email = email;
		this.password = password;
		this.name = name;
		this.phoneNumber = phoneNumber;
		this.master = master;
	}

	public void updatedDealer(DealerUpdatedRequestDto dealerUpdatedRequestDto) {
		if (dealerUpdatedRequestDto.getName() != null) {
			this.name = dealerUpdatedRequestDto.getName();
		}
		if (dealerUpdatedRequestDto.getPhoneNumber() != null) {
			this.phoneNumber = dealerUpdatedRequestDto.getPhoneNumber();
		}
	}

	// ?뚰봽???쒕━?? isDeleted = true, deletedAt = ?꾩옱 ?쒓컖
	public void softDeletedDealer() {
		this.isDeleted = true;
		this.deletedAt = LocalDateTime.now();
	}

	public void updateRole(Role newRole) {
		this.role = newRole;
	}

	public void updateBranch(Branch newBranch) {
		this.branch = newBranch;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\enums\Branch.java =====
package com.example.osid.domain.dealer.enums;

public enum Branch {
	誘몃같?? ?쒖슱, ??? ?援? 遺?? 愿묒＜, ?몄궛, ?몄쿇, ?먯＜, ?꾩＜, ?쒖궛, ?쒖＜?? 泥?＜
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\exception\DealerErrorCode.java =====
package com.example.osid.domain.dealer.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum DealerErrorCode implements BaseCode {
	DEALER_INVALID_PASSWORD(HttpStatus.BAD_REQUEST, "DEALER_001", "?ъ슜??鍮꾨?踰덊샇媛 ?쇱튂?섏? ?딆뒿?덈떎."),
	DEALER_NOT_FOUND(HttpStatus.NOT_FOUND, "DEALER_002", "?쒕윭瑜?李얠쓣 ???놁뒿?덈떎."),
	DEALER_NOT_BELONG_TO_MASTER(HttpStatus.FORBIDDEN, "DEALER_003", "?대떦 ?쒕윭????留덉뒪???뚯냽???꾨떃?덈떎."),
	INVALID_ROLE(HttpStatus.BAD_REQUEST, "DEALER_004", "?좏슚?섏? ?딆? role 媛믪엯?덈떎.");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\exception\DealerException.java =====
package com.example.osid.domain.dealer.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class DealerException extends CustomException {
	public DealerException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\repository\DealerRepository.java =====
package com.example.osid.domain.dealer.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.master.entity.Master;

@Repository
public interface DealerRepository extends JpaRepository<Dealer, Long> {

	// ?쒕윭?먯꽌 ?대찓??寃??
	Optional<Dealer> findByEmail(String email);

	// ??젣?섏? ?딅뒗 Dealer 議고쉶
	Optional<Dealer> findByEmailAndIsDeletedFalse(String email);

	// ?뱀젙 Master ?뷀떚?곗뿉 ?랁븯硫댁꽌, isDeleted = false???쒕윭 紐⑸줉 議고쉶
	List<Dealer> findByMasterAndIsDeletedFalse(Master master);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\dealer\service\DealerService.java =====
package com.example.osid.domain.dealer.service;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.auth.EmailValidator;
import com.example.osid.common.entity.enums.Role;
import com.example.osid.domain.dealer.dto.request.DealerBranchChangeRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerDeletedRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerRoleChangeRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerSignUpRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerUpdatedRequestDto;
import com.example.osid.domain.dealer.dto.response.FindByDealerResponseDto;
import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.dealer.enums.Branch;
import com.example.osid.domain.dealer.exception.DealerErrorCode;
import com.example.osid.domain.dealer.exception.DealerException;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.master.exception.MasterErrorCode;
import com.example.osid.domain.master.exception.MasterException;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.user.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class DealerService {

	private final DealerRepository dealerRepository;
	private final MasterRepository masterRepository;
	private final UserRepository userRepository;
	private final PasswordEncoder passwordEncoder;
	private final EmailValidator emailValidator;

	public void signUpDealer(DealerSignUpRequestDto dealerSignUpRequestDto) {

		// 怨듯넻???대찓?쇱씠 ?덈뒗吏 ?뺤씤 ( Master, Dealer, User )
		emailValidator.validateDuplicateEmail(dealerSignUpRequestDto.getEmail());

		Master master = verifyActiveMaster(dealerSignUpRequestDto.getMasterEmail());

		String encodedPassword = passwordEncoder.encode(dealerSignUpRequestDto.getPassword());

		Dealer dealer = Dealer.builder()
			.email(dealerSignUpRequestDto.getEmail())
			.password(encodedPassword)
			.name(dealerSignUpRequestDto.getName())
			.phoneNumber(dealerSignUpRequestDto.getPhoneNumber())
			.master(master)
			.build();        // @Builder.Default媛 ?곸슜?섏뼱 branch=誘몃같?? role=APPLICANT, isDeleted=false ?먮룞 ?명똿

		dealerRepository.save(dealer);
	}

	public FindByDealerResponseDto findByDealer(CustomUserDetails customUserDetails) {

		Dealer dealer = verifyDealeer(customUserDetails.getId());

		return new FindByDealerResponseDto(
			dealer.getId(),
			dealer.getEmail(),
			dealer.getName(),
			dealer.getBranch(),
			dealer.getPhoneNumber(),
			dealer.getMaster().getEmail()
		);
	}

	@Transactional("dataTransactionManager")
	public void updatedDealer(
		CustomUserDetails customUserDetails,
		DealerUpdatedRequestDto dealerUpdatedRequestDto
	) {
		Dealer dealer = verifyActiveDealer(customUserDetails.getEmail());
		dealer.updatedDealer(dealerUpdatedRequestDto);
	}

	@Transactional("dataTransactionManager")
	public void deletedDealer(
		CustomUserDetails customUserDetails,
		DealerDeletedRequestDto dealerDeletedRequestDto
	) {
		Dealer dealer = verifyActiveDealer(customUserDetails.getEmail());

		String rawPassword = dealerDeletedRequestDto.getPassword();
		String storedHash = dealer.getPassword();

		if (!passwordEncoder.matches(rawPassword, storedHash)) {
			// 鍮꾨?踰덊샇媛 遺덉씪移섑븯硫??덉쇅 ?섏쭚
			throw new DealerException(DealerErrorCode.DEALER_INVALID_PASSWORD);
		}

		dealer.softDeletedDealer();
	}

	@Transactional("dataTransactionManager")
	public void updatedRoleChangeDealer(
		CustomUserDetails customUserDetails,
		DealerRoleChangeRequestDto dealerRoleChangeRequestDto
	) {
		Master master = verifyActiveMaster(customUserDetails.getEmail());

		Dealer dealer = verifyActiveDealer(dealerRoleChangeRequestDto.getDealerEmail());

		// Dealer媛 ?ㅼ젣濡???Master ?뚯냽?몄? ?뺤씤
		if (!dealer.getMaster().getId().equals(master.getId())) {
			throw new DealerException(DealerErrorCode.DEALER_NOT_BELONG_TO_MASTER);
		}

		Role newRole = dealerRoleChangeRequestDto.getRole();

		// ?쒕윭?먭쾶 ?덉슜??Role?몄? 寃利? DEALER ?먮뒗 APPLICANT留??덉슜
		if (newRole != Role.DEALER && newRole != Role.APPLICANT) {
			throw new DealerException(DealerErrorCode.INVALID_ROLE);
		}

		// ??븷 蹂寃?
		dealer.updateRole(newRole);

	}

	@Transactional("dataTransactionManager")
	public void updatedBranchChangeDealer(
		CustomUserDetails customUserDetails,
		DealerBranchChangeRequestDto dealerBranchChangeRequestDto
	) {
		Master master = verifyActiveMaster(customUserDetails.getEmail());

		Dealer dealer = verifyActiveDealer(dealerBranchChangeRequestDto.getDealerEmail());

		// Dealer媛 ?ㅼ젣濡???Master ?뚯냽?몄? ?뺤씤
		if (!dealer.getMaster().getId().equals(master.getId())) {
			throw new DealerException(DealerErrorCode.DEALER_NOT_BELONG_TO_MASTER);
		}

		Branch newBranch = dealerBranchChangeRequestDto.getBranch();

		dealer.updateBranch(newBranch);
	}

	private Dealer verifyDealeer(Long dealerId) {
		return dealerRepository.findById(dealerId)
			.orElseThrow(() -> new DealerException(DealerErrorCode.DEALER_NOT_FOUND));
	}

	private Master verifyActiveMaster(String email) {
		return masterRepository.findByEmailAndIsDeletedFalse(email)
			.orElseThrow(() -> new MasterException(MasterErrorCode.MASTER_NOT_FOUND));
	}

	private Dealer verifyActiveDealer(String email) {
		return dealerRepository.findByEmailAndIsDeletedFalse(email)
			.orElseThrow(() -> new DealerException(DealerErrorCode.DEALER_NOT_FOUND));
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\email\controller\EmailController.java =====
package com.example.osid.domain.email.controller;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.domain.email.service.EmailService;

import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/mail")
@AllArgsConstructor
public class EmailController {

	private final EmailService emailService;

	@GetMapping("/test")
	public String sendTestMail(@AuthenticationPrincipal CustomUserDetails customUserDetails) {

		String email = customUserDetails.getEmail();
		emailService.sendOrderCompletedEmail(1L);
		return "硫붿씪 ?꾩넚 ?꾨즺";
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\email\service\EmailService.java =====
package com.example.osid.domain.email.service;

import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.email.EmailTemplateProcessor;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.exception.OrderErrorCode;
import com.example.osid.domain.order.exception.OrderException;
import com.example.osid.domain.order.repository.OrderRepository;
import com.example.osid.domain.user.entity.User;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

	@Value("${EMAIL_ADDRESS}")
	private String fromAddress;

	private final JavaMailSender mailSender;
	private final OrderRepository orderRepository;

	public void sendOrderCompletedEmail(Long orderId) {

		Orders order = orderRepository.findWithOptionsById(orderId)
			.orElseThrow(() -> new OrderException(OrderErrorCode.ORDER_NOT_FOUND));

		sendToUser(order);
		sendToDealer(order);

	}

	private void sendToUser(Orders order) {
		User user = order.getUser();

		Map<String, String> vars = new HashMap<>();
		vars.put("怨좉컼?대쫫", user.getName());
		vars.put("bodyNumber", order.getBodyNumber());
		vars.put("modelName", order.getModel().getName());
		vars.put("registeredAt", order.getCreatedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));

		String html = EmailTemplateProcessor.loadTemplate("mailTemplate/OrderCompleteMailForUser.html", vars);
		String subject = "[OSID] 李⑤웾 ?깅줉???꾨즺?섏뿀?듬땲??;

		sendHtmlEmail(user.getEmail(), subject, html);
	}

	private void sendToDealer(Orders order) {
		Dealer dealer = order.getDealer();
		User user = order.getUser();

		Map<String, String> vars = new HashMap<>();
		vars.put("?쒕윭?대쫫", dealer.getName());
		vars.put("怨좉컼?대쫫", user.getName());
		vars.put("bodyNumber", order.getBodyNumber());
		vars.put("modelName", order.getModel().getName());
		vars.put("registeredAt", order.getCreatedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));

		String html = EmailTemplateProcessor.loadTemplate("mailTemplate/OrderCompleteMailForDealer.html", vars);
		String subject = "[OSID] ?대떦 怨좉컼 李⑤웾???깅줉?섏뿀?듬땲??;

		sendHtmlEmail(dealer.getEmail(), subject, html);
	}

	private void sendHtmlEmail(String to, String subject, String htmlContent) {
		try {
			MimeMessage message = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(message, false, "UTF-8");

			helper.setTo(to);
			helper.setSubject(subject);
			helper.setText(htmlContent, true);
			helper.setFrom(fromAddress);
			mailSender.send(message);
		} catch (MessagingException e) {
			log.error("硫붿씪 ?꾩넚 ?ㅽ뙣: {}", e.getMessage(), e);
			throw new RuntimeException("硫붿씪 ?꾩넚 ?ㅽ뙣", e);
		}
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\email\EmailTemplateProcessor.java =====
package com.example.osid.domain.email;

import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Map;

import org.springframework.core.io.ClassPathResource;
import org.springframework.util.StreamUtils;

public class EmailTemplateProcessor {

	public static String loadTemplate(String path, Map<String, String> variables) {
		try {
			InputStream inputStream = new ClassPathResource(path).getInputStream();
			String content = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);

			for (Map.Entry<String, String> entry : variables.entrySet()) {
				content = content.replace("{{" + entry.getKey() + "}}", entry.getValue());
			}

			return content;
		} catch (Exception e) {
			throw new RuntimeException("?쒗뵆由?濡쒕뵫 ?ㅽ뙣: " + path, e);
		}
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\history\controller\MLApiController.java =====
package com.example.osid.domain.history.controller;

import java.time.Duration;
import java.util.Map;

import org.springframework.http.MediaType;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;

import com.example.osid.domain.history.dto.PredictRequest;

import io.netty.channel.ChannelOption;
import reactor.core.publisher.Mono;
import reactor.netty.http.client.HttpClient;

@RestController
public class MLApiController {

	HttpClient hc = HttpClient.create()
		.responseTimeout(Duration.ofSeconds(25))         // ?쒕쾭 ?묐떟 25s ?쒗븳
		.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000); // TCP ?곌껐 5s ?쒗븳

	WebClient webClient = WebClient.builder()
		.baseUrl("https://mlp-learning-test.onrender.com")
		.clientConnector(new ReactorClientHttpConnector(hc))
		.build();

	// private final WebClient webClient = WebClient.builder()
	// 	.baseUrl("https://mlp-learning-test.onrender.com/predict_all")
	// 	.build();

	@PostMapping("/api/my-ml-predict")
	public Mono<Map> predictWithMLApi(@RequestBody PredictRequest input) {
		return webClient.post()
			.uri("/predict_all")
			.contentType(MediaType.APPLICATION_JSON)
			.bodyValue(input)
			.retrieve()
			.bodyToMono(Map.class);

	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\history\dto\PredictRequest.java =====
package com.example.osid.domain.history.dto;

import java.util.List;

import com.example.osid.domain.order.entity.OrderOption;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class PredictRequest {
	@JsonProperty("model_type")
	private String modelType;
	@JsonProperty("option_list")
	private List<Long> optionList;

	public PredictRequest(String modelType, List<OrderOption> orderOptions) {
		this.modelType = modelType;
		this.optionList = orderOptions.stream().map(orderOption -> orderOption.getOption().getId()).toList();
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\history\dto\PredictResponse.java =====
package com.example.osid.domain.history.dto;

import java.math.BigDecimal;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@NoArgsConstructor
public class PredictResponse {

	private List<Stage> stages;

	@JsonProperty("total_duration_h")
	private BigDecimal totalDuration;

	@Getter
	@Setter
	public static class Stage {
		private Integer stage;
		@JsonProperty("pred_duration_h")
		private BigDecimal predDuration;
		@JsonProperty("total_with_delay_h")
		private BigDecimal totalWithDelay;
		@JsonProperty("transport_delay_h")
		private BigDecimal transportDelay;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\history\entity\History.java =====
package com.example.osid.domain.history.entity;

import java.math.BigDecimal;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@Getter
@Setter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "histories")
public class History {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(nullable = false)
	private String bodyNumber;

	@Column(nullable = false)
	private BigDecimal stage1;

	@Column(nullable = false)
	private BigDecimal stage2;

	@Column(nullable = false)
	private BigDecimal stage3;

	@Column(nullable = false)
	private BigDecimal stage4;

	@Column(nullable = false)
	private BigDecimal stage5;

	@Column(nullable = false)
	private BigDecimal totalDuration;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\history\enums\ProductionHistory.java =====
package com.example.osid.domain.history.enums;

public enum ProductionHistory {
    STATUS
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\history\exception\HistoryErrorCode.java =====
package com.example.osid.domain.history.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum HistoryErrorCode implements BaseCode {

	HISTORY_NOT_FOUND(HttpStatus.NOT_FOUND, "HISTORY_001", "?대떦 二쇰Ц??李얠쓣 ???놁뒿?덈떎.");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\history\exception\HistoryException.java =====
package com.example.osid.domain.history.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class HistoryException extends CustomException {
	public HistoryException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\history\repository\HistoryRepository.java =====
package com.example.osid.domain.history.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.history.entity.History;

@Repository
public interface HistoryRepository extends JpaRepository<History, Long> {

	Optional<History> findByBodyNumber(String bodyNumber);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\learning\service\TrainingScheduler.java =====
package com.example.osid.domain.learning.service;

import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class TrainingScheduler {

    private final TrainingService trainingService;

    @Scheduled(fixedRate = 5 * 60 * 1000)
    public void scheduleTrainingAndUpload() {
        System.out.println("[?ㅼ?以꾨윭] 二쇨린???숈뒿 諛??낅줈???쒖옉");
        trainingService.triggerTrainingAndUpload();
    }
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\learning\service\TrainingService.java =====
package com.example.osid.domain.learning.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;

@Service
public class TrainingService {

    @Value("${MLP_UPLOAD_URL}")
    private String uploadUrl;

    public void triggerTrainingAndUpload() {
        try {
            System.out.println("[?ㅼ?以꾨윭] train.py ?ㅽ뻾 ?쒖옉");

            ProcessBuilder pb = new ProcessBuilder("venv\\Scripts\\python.exe", "train.py");
            pb.redirectErrorStream(true);
            Process process = pb.start();

            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(process.getInputStream())
            );

            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println("[Python] " + line);
            }

            int exitCode = process.waitFor();
            System.out.println("[?ㅼ?以꾨윭] train.py 醫낅즺 肄붾뱶: " + exitCode);

            if (exitCode == 0) {
                uploadModel();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void uploadModel() {
        File modelFile = new File("mlp_single_custom.pkl");
        try {
            if (!modelFile.exists()) {
                System.err.println("[Spring] 紐⑤뜽 ?뚯씪???놁뒿?덈떎.");
                return;
            }

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);

            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("model", new FileSystemResource(modelFile));

            HttpEntity<MultiValueMap<String, Object>> request = new HttpEntity<>(body, headers);
            RestTemplate restTemplate = new RestTemplate();
            String response = restTemplate.postForObject(uploadUrl, request, String.class);

            System.out.println("[Spring] ?낅줈???묐떟: " + response);

        } catch (Exception e) {
            System.err.println("[Spring] 紐⑤뜽 ?낅줈???ㅽ뙣: " + e.getMessage());
        } finally {
            if (modelFile.exists()) {
                boolean deleted = modelFile.delete();
                System.out.println("[Spring] 紐⑤뜽 ?뚯씪 ??젣 ?щ?: " + deleted);
            }
        }
    }
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\controller\LicenseKeyController.java =====
package com.example.osid.domain.license.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.response.CommonResponse;
import com.example.osid.domain.license.dto.LicenseInfoResponseDto;
import com.example.osid.domain.license.service.LicenseKeyService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/licenses")
@RequiredArgsConstructor
@PreAuthorize("hasRole('MASTER') and principal.id == 1")
public class LicenseKeyController {

	private final LicenseKeyService licenseKeyService;

	// ??諛쒓툒
	@PostMapping("/assign")
	public CommonResponse<String> assign(@RequestParam Long ownerId) {
		String key = licenseKeyService.assignLicense(ownerId);
		return CommonResponse.ok(key);
	}

	// ???좏슚???뺤씤
	@GetMapping("/validate/{productKey}")
	public CommonResponse<Boolean> validate(@PathVariable String productKey) {
		boolean ok = licenseKeyService.validate(productKey);
		return CommonResponse.ok(ok);
	}

	// ??痍⑥냼
	@PostMapping("/revoke/{productKey}")
	public CommonResponse<Void> revoke(@PathVariable String productKey) {
		licenseKeyService.revoke(productKey);
		return CommonResponse.ok();
	}

	// @GetMapping()
	// public CommonResponse<List<LicenseInfoResponseDto>> findAllLicense() {
	// 	List<LicenseInfoResponseDto> licenseList = licenseKeyService.findAllLicense();
	// 	return CommonResponse.ok(licenseList);
	// }

	@GetMapping()
	public CommonResponse<Page<LicenseInfoResponseDto>> findAllLicense(
		@PageableDefault(size = 10) Pageable pageable
	) {
		Page<LicenseInfoResponseDto> licenseList = licenseKeyService.findAllLicense(pageable);
		return CommonResponse.ok(licenseList);
	}

}

===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\dto\LicenseInfoResponseDto.java =====
package com.example.osid.domain.license.dto;

import java.time.LocalDateTime;

import com.example.osid.domain.license.enums.LicenseStatus;

import lombok.Getter;

@Getter
public class LicenseInfoResponseDto {

	private String productKey;
	private LicenseStatus licenseStatus;
	private Long ownerId;
	private LocalDateTime assignedAt;

	public LicenseInfoResponseDto(
		String productKey,
		LicenseStatus licenseStatus,
		Long ownerId,
		LocalDateTime assignedAt
	) {
		this.productKey = productKey;
		this.licenseStatus = licenseStatus;
		this.ownerId = ownerId;
		this.assignedAt = assignedAt;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\entity\LicenseKey.java =====
package com.example.osid.domain.license.entity;

import java.time.LocalDateTime;

import com.example.osid.domain.license.enums.LicenseStatus;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Getter;

@Entity
@Table(name = "licensekeys")
@Getter
public class LicenseKey {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(nullable = false, unique = true, length = 36)
	private String productKey;

	@Enumerated(EnumType.STRING)
	@Column(nullable = false)
	private LicenseStatus licenseStatus;

	@Column(columnDefinition = "TIMESTAMP")
	private LocalDateTime assignedAt;

	private Long ownerId;

	public LicenseKey() {
	}

	public LicenseKey(String productKey, LicenseStatus licenseStatus) {
		this.productKey = productKey;
		this.licenseStatus = licenseStatus;
	}

	public void setLicenseStatus(LicenseStatus licenseStatus) {
		this.licenseStatus = licenseStatus;
	}

	public void setAssignedAt(LocalDateTime assignedAt) {
		this.assignedAt = assignedAt;
	}

	public void setOwnerId(Long ownerId) {
		this.ownerId = ownerId;
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\enums\LicenseStatus.java =====
package com.example.osid.domain.license.enums;

public enum LicenseStatus {
	AVAILABLE, ASSIGNED, REVOKED
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\exception\LicenseErrorCode.java =====
package com.example.osid.domain.license.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum LicenseErrorCode implements BaseCode {

	// ?ъ슜?먭? ?낅젰???ㅺ? DB??議댁옱?섏? ?딆쓣 ??
	KEY_NOT_FOUND(HttpStatus.BAD_REQUEST, "LICENSE_001", "?좏슚?섏? ?딆? ?쇱씠?좎뒪 ?ㅼ엯?덈떎."),
	// ?대? ?ㅻⅨ 二쇱껜?먭쾶 ?좊떦?섏뼱 ???댁긽 ?ъ슜 遺덇?????
	KEY_ALREADY_ASSIGNED(HttpStatus.CONFLICT, "LICENSE_002", "?대? 諛쒓툒???쇱씠?좎뒪 ?ㅼ엯?덈떎."),
	// ????ъ슜 媛?ν븳 ???먯껜媛 ?놁쓣 ??
	NO_AVAILABLE_KEYS(HttpStatus.SERVICE_UNAVAILABLE, "LICENSE_003", "?ъ슜 媛?ν븳 ?쇱씠?좎뒪 ?ㅺ? ?놁뒿?덈떎."),
	// ?대? 痍⑥냼(revoked)???ㅻ? ?ㅼ떆 ?ъ슜?섎젮 ????
	KEY_REVOKED(HttpStatus.BAD_REQUEST, "LICENSE_004", "痍⑥냼???쇱씠?좎뒪 ?ㅼ엯?덈떎.");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\exception\LicenseException.java =====
package com.example.osid.domain.license.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class LicenseException extends CustomException {
	public LicenseException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\init\LicenseKeyInitializer.java =====
package com.example.osid.domain.license.init;

import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.domain.license.entity.LicenseKey;
import com.example.osid.domain.license.enums.LicenseStatus;
import com.example.osid.domain.license.repository.LicenseKeyRepository;
import com.example.osid.domain.license.util.LicenseKeyGenerator;

import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class LicenseKeyInitializer implements ApplicationRunner {

	private final LicenseKeyRepository licenseKeyRepository;
	private final LicenseKeyGenerator licenseKeyGenerator;
	private static final int INITIAL_POOL_SIZE = 10;  // 珥덇린 ?ъ슜?????덈뒗 ?쇱씠?쇱뒪????

	/**
	 * ?좏뵆由ъ??댁뀡 ?쒖옉 ????踰??ㅽ뻾?⑸땲??
	 * ?꾩옱 AVAILABLE ?곹깭????媛쒖닔瑜?議고쉶?섏뿬,
	 * INITIAL_POOL_SIZE??誘몄튂吏 紐삵븯硫?遺議깊븳 媛쒖닔留뚰겮 ???ㅻ? ?앹꽦?⑸땲??
	 *
	 * @param args ApplicationArguments: ?ㅽ뻾 ?몄옄 (?ъ슜?섏? ?딆쓬)
	 */
	@Override
	@Transactional("dataTransactionManager")
	public void run(ApplicationArguments args) {
		// AVAILABLE ?곹깭 ??媛쒖닔 議고쉶
		long count = licenseKeyRepository.countByLicenseStatus(LicenseStatus.AVAILABLE);
		// ?꾩슂????媛쒖닔 怨꾩궛
		int toCreate = (int)Math.max(0, INITIAL_POOL_SIZE - count);

		// 遺議깊븳 留뚰겮 ?????앹꽦
		for (int i = 0; i < toCreate; i++) {

			// ?쒕뜡 ???앹꽦
			String key = licenseKeyGenerator.generateKey();

			// 以묐났 寃?????앹꽦
			if (licenseKeyRepository.findByProductKeyAndLicenseStatus(key, LicenseStatus.AVAILABLE).isEmpty()) {
				licenseKeyRepository.save(new LicenseKey(key, LicenseStatus.AVAILABLE));
			} else {
				// 以묐났 諛쒖깮 ?쒖뿉 ???쒕룄
				i--;
			}
		}
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\repository\LicenseKeyRepository.java =====
package com.example.osid.domain.license.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.license.entity.LicenseKey;
import com.example.osid.domain.license.enums.LicenseStatus;

@Repository
public interface LicenseKeyRepository extends JpaRepository<LicenseKey, Long> {

	// ?곹깭 蹂꾨줈 ??媛쒖닔 議고쉶
	long countByLicenseStatus(LicenseStatus licenseStatus);

	// 媛??癒쇱? 諛쒓껄?섎뒗 AVAILABLE ???섎굹 媛?몄삤湲?
	Optional<LicenseKey> findFirstByLicenseStatus(LicenseStatus licenseStatus);

	// ?뱀젙 ?ㅺ? AVAILABLE ?곹깭?몄? 議고쉶
	Optional<LicenseKey> findByProductKeyAndLicenseStatus(String productKey, LicenseStatus licenseStatus);

	Optional<LicenseKey> findByOwnerIdAndLicenseStatus(Long ownerId, LicenseStatus licenseStatus);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\scheduler\LicenseKeyRefillScheduler.java =====
package com.example.osid.domain.license.scheduler;

import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.domain.license.entity.LicenseKey;
import com.example.osid.domain.license.enums.LicenseStatus;
import com.example.osid.domain.license.repository.LicenseKeyRepository;
import com.example.osid.domain.license.util.LicenseKeyGenerator;

import lombok.RequiredArgsConstructor;

@Component
@EnableScheduling
@RequiredArgsConstructor
public class LicenseKeyRefillScheduler {

	private final LicenseKeyRepository licenseKeyRepository;
	private final LicenseKeyGenerator licenseKeyGenerator;

	private static final long MIN_POOL_SIZE = 9;    // 理쒖냼 蹂댁쑀 ??
	private static final int TARGET_POOL_SIZE = 15;  // 紐⑺몴 ? ?ш린

	// @Scheduled(cron = "0 0 * * * *")  // 留ㅼ떆 ?뺢컖 ?ㅽ뻾
	@Scheduled(cron = "0 */1 * * * *")
	@Transactional("dataTransactionManager")
	public void refillPoolIfNeeded() {
		long available = licenseKeyRepository.countByLicenseStatus(LicenseStatus.AVAILABLE);
		if (available < MIN_POOL_SIZE) {
			int toCreate = TARGET_POOL_SIZE - (int)available;
			for (int i = 0; i < toCreate; i++) {
				String key = licenseKeyGenerator.generateKey();
				if (licenseKeyRepository.findByProductKeyAndLicenseStatus(key, LicenseStatus.AVAILABLE).isEmpty()) {
					licenseKeyRepository.save(new LicenseKey(key, LicenseStatus.AVAILABLE));
				} else {
					i--;
				}
			}
		}
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\service\LicenseKeyService.java =====
package com.example.osid.domain.license.service;

import java.time.LocalDateTime;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.domain.license.dto.LicenseInfoResponseDto;
import com.example.osid.domain.license.entity.LicenseKey;
import com.example.osid.domain.license.enums.LicenseStatus;
import com.example.osid.domain.license.exception.LicenseErrorCode;
import com.example.osid.domain.license.exception.LicenseException;
import com.example.osid.domain.license.repository.LicenseKeyRepository;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.master.exception.MasterErrorCode;
import com.example.osid.domain.master.exception.MasterException;
import com.example.osid.domain.master.repository.MasterRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class LicenseKeyService {
	/** ?쇱씠?쇱뒪 ?쒕퉬?ㅼ뿉 愿?⑤맂 湲곕뒫
	 *  諛쒓툒湲곕뒫
	 *  ?좏슚??寃??
	 *  ?쇱씠?쇱뒪 ??痍⑥냼
	 *  ?꾩껜 議고쉶
	 *  */
	private final LicenseKeyRepository licenseKeyRepository;
	private final MasterRepository masterRepository;

	@Transactional("dataTransactionManager")
	public String assignLicense(Long ownerId) {
		// 1) 湲곗〈???좊떦???ㅺ? ?덉쑝硫??댁젣
		licenseKeyRepository
			.findByOwnerIdAndLicenseStatus(ownerId, LicenseStatus.ASSIGNED)
			.ifPresent(existing -> {
				existing.setLicenseStatus(LicenseStatus.AVAILABLE);
				existing.setOwnerId(null);
				existing.setAssignedAt(null);
				// JPA 愿由???곸씠誘濡?save() ???대룄 dirty-checking ?쇰줈 諛섏쁺?⑸땲??
			});

		// 2) ?덈줈???ъ슜 媛?ν븳 ?ㅻ? 爰쇰궡???좊떦
		LicenseKey lic = licenseKeyRepository
			.findFirstByLicenseStatus(LicenseStatus.AVAILABLE)
			.orElseThrow(() -> new LicenseException(LicenseErrorCode.NO_AVAILABLE_KEYS));

		lic.setLicenseStatus(LicenseStatus.ASSIGNED);
		lic.setOwnerId(ownerId);
		lic.setAssignedAt(LocalDateTime.now());

		// 3) Master ?뷀떚?곗뿉??????諛섏쁺
		Master master = masterRepository.findById(ownerId)
			.orElseThrow(() -> new MasterException(MasterErrorCode.MASTER_NOT_FOUND));
		master.setProductKey(lic.getProductKey());

		return lic.getProductKey();
	}

	/** 諛쒓툒?????좏슚???뺤씤 */
	public boolean validate(String productKey) {
		return licenseKeyRepository.findByProductKeyAndLicenseStatus(productKey, LicenseStatus.ASSIGNED)
			.filter(l -> l.getLicenseStatus() != LicenseStatus.REVOKED)
			.isPresent();
	}

	// Key 痍⑥냼
	@Transactional("dataTransactionManager")
	public void revoke(String productKey) {
		licenseKeyRepository.findByProductKeyAndLicenseStatus(productKey, LicenseStatus.ASSIGNED)
			.ifPresentOrElse(
				l -> {
					l.setLicenseStatus(LicenseStatus.REVOKED);
					licenseKeyRepository.save(l);
				},
				() -> {
					throw new LicenseException(LicenseErrorCode.KEY_NOT_FOUND);
				}
			);
	}

	// public List<LicenseInfoResponseDto> findAllLicense() {
	//
	// 	List<LicenseKey> findAllLicenses = licenseKeyRepository.findAll();
	//
	// 	List<LicenseInfoResponseDto> licenseList = new ArrayList<>();
	//
	// 	for (LicenseKey licenseKey : findAllLicenses) {
	// 		licenseList.add(new LicenseInfoResponseDto(
	// 				licenseKey.getProductKey(),
	// 				licenseKey.getLicenseStatus(),
	// 				licenseKey.getOwnerId(),
	// 				licenseKey.getAssignedAt()
	// 			)
	// 		);
	// 	}
	//
	// 	return licenseList;
	// }

	public Page<LicenseInfoResponseDto> findAllLicense(Pageable pageable) {
		Page<LicenseKey> page = licenseKeyRepository.findAll(pageable);

		return page.map(licenseKey -> new LicenseInfoResponseDto(
			licenseKey.getProductKey(),
			licenseKey.getLicenseStatus(),
			licenseKey.getOwnerId(),
			licenseKey.getAssignedAt()
		));
	}

	/** 湲곗〈?ㅻ? ownerId???좊떦(媛???? */
	@Transactional("dataTransactionManager")
	public void assignExistingKey(String productKey, Long ownerId) {
		LicenseKey key = licenseKeyRepository.findByProductKeyAndLicenseStatus(productKey, LicenseStatus.AVAILABLE)
			// ?ъ슜 媛?ν븯吏 ?딆? ??議댁옱?섏? ?딄굅???대? ?좊떦/痍⑥냼????寃쎌슦
			.orElseThrow(() -> new LicenseException(LicenseErrorCode.KEY_NOT_FOUND));

		key.setLicenseStatus(LicenseStatus.ASSIGNED);
		key.setOwnerId(ownerId);
		key.setAssignedAt(LocalDateTime.now());
		licenseKeyRepository.save(key);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\license\util\LicenseKeyGenerator.java =====
package com.example.osid.domain.license.util;

import java.security.SecureRandom;
import java.util.Base64;

import org.springframework.stereotype.Component;

@Component
public class LicenseKeyGenerator {

	private final SecureRandom secureRandom = new SecureRandom();

	// 24諛붿씠???쒕뜡 ?앹꽦 ??Base64 URL-safe ?몄퐫??
	public String generateKey() {
		byte[] bytes = new byte[24];
		secureRandom.nextBytes(bytes);
		return Base64.getUrlEncoder().withoutPadding().encodeToString(bytes);
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\controller\MasterController.java =====
package com.example.osid.domain.master.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.response.CommonResponse;
import com.example.osid.domain.master.dto.request.MasterDeletedRequestDto;
import com.example.osid.domain.master.dto.request.MasterSignUpRequestDto;
import com.example.osid.domain.master.dto.request.MasterUpdatedRequestDto;
import com.example.osid.domain.master.dto.response.FindByAllMasterResponseDto;
import com.example.osid.domain.master.dto.response.FindByMasterResponseDto;
import com.example.osid.domain.master.service.MasterService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/masters")
@RequiredArgsConstructor
public class MasterController {

	private final MasterService masterService;

	@PostMapping("/signup")
	@ResponseStatus(HttpStatus.CREATED)
	public CommonResponse<Void> signUpMaster(@RequestBody @Valid MasterSignUpRequestDto masterSignUpRequestDto) {
		masterService.signUpMaster(masterSignUpRequestDto);
		return CommonResponse.created();
	}

	@GetMapping("/me")
	public CommonResponse<FindByMasterResponseDto> findByMaster(
		@AuthenticationPrincipal CustomUserDetails customUserDetails
	) {
		FindByMasterResponseDto me = masterService.findByMaster(customUserDetails);
		return CommonResponse.ok(me);
	}

	@PatchMapping("/me")
	public CommonResponse<Void> updatedMaster(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@Valid @RequestBody MasterUpdatedRequestDto masterUpdatedRequestDto
	) {
		masterService.updatedMaster(customUserDetails, masterUpdatedRequestDto);
		return CommonResponse.ok();
	}

	@DeleteMapping("/me")
	public CommonResponse<Void> deletedMaster(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@Valid @RequestBody MasterDeletedRequestDto masterDeletedRequestDto
	) {
		masterService.deletedMaster(customUserDetails, masterDeletedRequestDto);
		return CommonResponse.ok();
	}

	@GetMapping
	public CommonResponse<List<FindByAllMasterResponseDto>> findByAllMaster(
		@AuthenticationPrincipal CustomUserDetails customUserDetails
	) {
		List<FindByAllMasterResponseDto> masterList = masterService.findByAllMaster(customUserDetails);
		return CommonResponse.ok(masterList);
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\dto\request\MasterDeletedRequestDto.java =====
package com.example.osid.domain.master.dto.request;

import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;

@Getter
public class MasterDeletedRequestDto {

	@NotEmpty(message = "鍮꾨?踰덊샇???꾩닔?낅땲??")
	@Pattern(
		regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,}$",
		message = "鍮꾨?踰덊샇???곷Ц ??뚮Ц?? ?レ옄, ?뱀닔臾몄옄瑜??ы븿??8???댁긽?댁뼱???⑸땲??"
	)
	private String password;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\dto\request\MasterSignUpRequestDto.java =====
package com.example.osid.domain.master.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;

@Getter
public class MasterSignUpRequestDto {

	@NotNull(message = "?ъ뾽??踰덊샇???꾩닔?낅땲??")
	@Pattern(regexp = "^[0-9]{3}-[0-9]{2}-[0-9]{5}$", message = "?ъ뾽??踰덊샇??XXX-XX-XXXXX ?뺤떇?댁뼱???⑸땲??")
	private String businessNumber;

	@NotEmpty(message = "?대쫫? ?꾩닔?낅땲??")
	private String name;

	@NotEmpty(message = "?꾪솕踰덊샇???꾩닔?낅땲??")
	@Pattern(regexp = "^010-[0-9]{4}-[0-9]{4}$", message = "?꾪솕踰덊샇??010-xxxx-xxxx ?뺤떇?댁뼱???⑸땲??")
	private String phoneNumber;

	@Email
	@NotEmpty(message = "?대찓?쇱? ?꾩닔?낅땲??")
	private String email;

	@NotEmpty(message = "鍮꾨?踰덊샇???꾩닔?낅땲??")
	@Pattern(
		regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,}$",
		message = "鍮꾨?踰덊샇???곷Ц ??뚮Ц?? ?レ옄, ?뱀닔臾몄옄瑜??ы븿??8???댁긽?댁뼱???⑸땲??"
	)
	private String password;

	@NotEmpty(message = "二쇱냼???꾩닔?낅땲??")
	private String address;

	@NotEmpty(message = "?쇱씠?쇱뒪???꾩닔?낅땲??")
	private String productKey;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\dto\request\MasterUpdatedRequestDto.java =====
package com.example.osid.domain.master.dto.request;

import jakarta.validation.constraints.Pattern;
import lombok.Getter;

@Getter
public class MasterUpdatedRequestDto {

	private String name;

	@Pattern(regexp = "^010-[0-9]{4}-[0-9]{4}$", message = "?꾪솕踰덊샇??010-xxxx-xxxx ?뺤떇?댁뼱???⑸땲??")
	private String phoneNumber;

	private String address;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\dto\response\FindByAllMasterResponseDto.java =====
package com.example.osid.domain.master.dto.response;

import lombok.Getter;

@Getter
public class FindByAllMasterResponseDto {
	private Long id;
	private String businessNumber;
	private String name;
	private String phoneNumber;
	private String email;
	private String address;
	// private Long dealerCount;

	public FindByAllMasterResponseDto(
		Long id,
		String businessNumber,
		String name,
		String phoneNumber,
		String email,
		String address
		// Long dealerCount
	) {
		this.id = id;
		this.businessNumber = businessNumber;
		this.name = name;
		this.phoneNumber = phoneNumber;
		this.email = email;
		this.address = address;
		// this.dealerCount = dealerCount;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\dto\response\FindByMasterResponseDto.java =====
package com.example.osid.domain.master.dto.response;

import java.util.List;

import com.example.osid.domain.dealer.dto.response.DealerInfoResponseDto;

import lombok.Getter;

@Getter
public class FindByMasterResponseDto {
	private Long id;
	private String businessNumber;
	private String name;
	private String phoneNumber;
	private String email;
	private String address;

	// 留덉뒪??諛묒뿉 ?랁븳 ?쒖꽦 ?쒕윭 紐⑸줉
	private List<DealerInfoResponseDto> dealers;

	public FindByMasterResponseDto(
		Long id,
		String businessNumber,
		String name,
		String phoneNumber,
		String email,
		String address,
		List<DealerInfoResponseDto> dealers
	) {
		this.id = id;
		this.businessNumber = businessNumber;
		this.name = name;
		this.phoneNumber = phoneNumber;
		this.email = email;
		this.address = address;
		this.dealers = dealers;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\entity\Master.java =====
package com.example.osid.domain.master.entity;

import java.time.LocalDateTime;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.common.entity.enums.Role;
import com.example.osid.domain.master.dto.request.MasterUpdatedRequestDto;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@Getter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "masters")
public class Master extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(nullable = false)
	private String businessNumber; //?ъ뾽??踰덊샇

	@Column(nullable = false)
	private String name; // ?대떦???대쫫

	@Column(nullable = false)
	private String phoneNumber; //?꾪솕踰덊샇

	@Column(nullable = false)
	private String email; //?대찓??

	@Column(nullable = false)
	private String password; //鍮꾨?踰덊샇

	@Column(nullable = false)
	private String address; //二쇱냼

	@Column(nullable = false)
	private String productKey; //?쇱씠?쇱뒪

	@Column(nullable = false)
	@Builder.Default
	@Enumerated(EnumType.STRING)
	private Role role = Role.MASTER; //??븷

	@Column(nullable = false)
	@Builder.Default
	private boolean isDeleted = false;

	// null ?덉슜: ??젣 ?꾩뿉??null
	private LocalDateTime deletedAt;

	public Master(
		String businessNumber,
		String name,
		String phoneNumber,
		String email,
		String password,
		String address,
		String productKey
	) {
		this.businessNumber = businessNumber;
		this.name = name;
		this.phoneNumber = phoneNumber;
		this.email = email;
		this.password = password;
		this.address = address;
		this.productKey = productKey;
	}

	public void updatedMaster(MasterUpdatedRequestDto masterUpdatedRequestDto) {
		if (masterUpdatedRequestDto.getName() != null) {
			this.name = masterUpdatedRequestDto.getName();
		}
		if (masterUpdatedRequestDto.getPhoneNumber() != null) {
			this.phoneNumber = masterUpdatedRequestDto.getPhoneNumber();
		}
		if (masterUpdatedRequestDto.getAddress() != null) {
			this.address = masterUpdatedRequestDto.getAddress();
		}
	}

	// ?뚰봽???쒕━?? isDeleted = true, deletedAt = ?꾩옱 ?쒓컖
	public void softDeletedMaster() {
		this.isDeleted = true;
		this.deletedAt = LocalDateTime.now();
	}

	// 留덉뒪??沅뚰븳 ?덈뒗 移쒓뎄媛 License 媛뺤젣 ?쎌엯
	public void setProductKey(String productKey) {
		this.productKey = productKey;
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\exception\MasterErrorCode.java =====
package com.example.osid.domain.master.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum MasterErrorCode implements BaseCode {
	MASTER_INVALID_PASSWORD(HttpStatus.BAD_REQUEST, "MASTER_001", "?ъ슜??鍮꾨?踰덊샇媛 ?쇱튂?섏? ?딆뒿?덈떎."),
	MASTER_NOT_FOUND(HttpStatus.NOT_FOUND, "MASTER_002", "留덉뒪?곕? 李얠쓣 ???놁뒿?덈떎.");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\exception\MasterException.java =====
package com.example.osid.domain.master.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class MasterException extends CustomException {
	public MasterException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\repository\MasterRepository.java =====
package com.example.osid.domain.master.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.master.entity.Master;

@Repository
public interface MasterRepository extends JpaRepository<Master, Long> {

	// Master?먯꽌 ?대찓??寃??
	Optional<Master> findByEmail(String email);

	// ??젣?섏? ?딅뒗 Master 議고쉶
	Optional<Master> findByEmailAndIsDeletedFalse(String email);

	List<Master> findByBusinessNumberAndIsDeletedFalse(String businessNumber);

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\master\service\MasterService.java =====
package com.example.osid.domain.master.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.auth.EmailValidator;
import com.example.osid.domain.dealer.dto.response.DealerInfoResponseDto;
import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.license.service.LicenseKeyService;
import com.example.osid.domain.master.dto.request.MasterDeletedRequestDto;
import com.example.osid.domain.master.dto.request.MasterSignUpRequestDto;
import com.example.osid.domain.master.dto.request.MasterUpdatedRequestDto;
import com.example.osid.domain.master.dto.response.FindByAllMasterResponseDto;
import com.example.osid.domain.master.dto.response.FindByMasterResponseDto;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.master.exception.MasterErrorCode;
import com.example.osid.domain.master.exception.MasterException;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.user.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MasterService {

	private final MasterRepository masterRepository;
	private final UserRepository userRepository;
	private final DealerRepository dealerRepository;
	private final PasswordEncoder passwordEncoder;
	private final EmailValidator emailValidator;
	private final LicenseKeyService licenseKeyService;

	@Transactional("dataTransactionManager")
	public void signUpMaster(MasterSignUpRequestDto masterSignUpRequestDto) {

		// 怨듯넻???대찓?쇱씠 ?덈뒗吏 ?뺤씤 ( Master, Dealer, User )
		emailValidator.validateDuplicateEmail(masterSignUpRequestDto.getEmail());

		String encodedPassword = passwordEncoder.encode(masterSignUpRequestDto.getPassword());

		Master master = Master.builder()
			.businessNumber(masterSignUpRequestDto.getBusinessNumber())
			.name(masterSignUpRequestDto.getName())
			.phoneNumber(masterSignUpRequestDto.getPhoneNumber())
			.email(masterSignUpRequestDto.getEmail())
			.password(encodedPassword)
			.address(masterSignUpRequestDto.getAddress())
			.productKey(masterSignUpRequestDto.getProductKey())
			.build();
		masterRepository.save(master);

		// 3) ?쇱씠?좎뒪 ??寃利?& ?좊떦
		//    - AVAILABLE ?곹깭?몄? ?뺤씤
		//    - ASSIGNED ?곹깭濡?蹂寃? ownerId = master.getId()
		licenseKeyService.assignExistingKey(masterSignUpRequestDto.getProductKey(), master.getId());

	}

	public FindByMasterResponseDto findByMaster(CustomUserDetails customUserDetails) {

		Master master = verifyMaster(customUserDetails.getId());

		List<Dealer> dealers = dealerRepository.findByMasterAndIsDeletedFalse(master);

		List<DealerInfoResponseDto> dealerList = new ArrayList<>();

		for (Dealer dealer : dealers) {
			DealerInfoResponseDto dealerDto = new DealerInfoResponseDto(
				dealer.getId(),
				dealer.getEmail(),
				dealer.getName(),
				dealer.getPhoneNumber(),
				dealer.getBranch()
			);
			dealerList.add(dealerDto);
		}

		return new FindByMasterResponseDto(
			master.getId(),
			master.getBusinessNumber(),
			master.getName(),
			master.getPhoneNumber(),
			master.getEmail(),
			master.getAddress(),
			dealerList
		);
	}

	@Transactional("dataTransactionManager")
	public void updatedMaster(
		CustomUserDetails customUserDetails,
		MasterUpdatedRequestDto masterUpdatedRequestDto
	) {
		Master master = verifyActiveMaster(customUserDetails.getEmail());
		master.updatedMaster(masterUpdatedRequestDto);
	}

	@Transactional("dataTransactionManager")
	public void deletedMaster(
		CustomUserDetails customUserDetails,
		MasterDeletedRequestDto masterDeletedRequestDto
	) {
		Master master = verifyActiveMaster(customUserDetails.getEmail());

		String rawPassword = masterDeletedRequestDto.getPassword();
		String storedHash = master.getPassword();

		if (!passwordEncoder.matches(rawPassword, storedHash)) {
			// 鍮꾨?踰덊샇媛 遺덉씪移섑븯硫??덉쇅 ?섏쭚
			throw new MasterException(MasterErrorCode.MASTER_INVALID_PASSWORD);
		}

		master.softDeletedMaster();
	}

	public List<FindByAllMasterResponseDto> findByAllMaster(CustomUserDetails customUserDetails) {

		Master me = verifyActiveMaster(customUserDetails.getEmail());

		// 2) 媛숈? ?ъ뾽??踰덊샇瑜?媛吏??쒖꽦 留덉뒪?곕뱾 議고쉶
		List<Master> masters = masterRepository
			.findByBusinessNumberAndIsDeletedFalse(me.getBusinessNumber());

		// 3) List<Master> ??List<FindByAllMasterResponseDto>濡?蹂??
		List<FindByAllMasterResponseDto> masterList = new ArrayList<>();
		for (Master master : masters) {
			masterList.add(new FindByAllMasterResponseDto(
				master.getId(),
				master.getBusinessNumber(),
				master.getName(),
				master.getPhoneNumber(),
				master.getEmail(),
				master.getAddress()
			));
		}

		return masterList;
	}

	private Master verifyMaster(Long masterId) {
		return masterRepository.findById(masterId)
			.orElseThrow(() -> new MasterException(MasterErrorCode.MASTER_NOT_FOUND));
	}

	private Master verifyActiveMaster(String email) {
		return masterRepository.findByEmailAndIsDeletedFalse(email)
			.orElseThrow(() -> new MasterException(MasterErrorCode.MASTER_NOT_FOUND));
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\controller\ModelController.java =====
package com.example.osid.domain.model.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.response.CommonResponse;
import com.example.osid.domain.model.dto.ModelCreateRequest;
import com.example.osid.domain.model.dto.ModelMasterResponse;
import com.example.osid.domain.model.dto.ModelResponse;
import com.example.osid.domain.model.dto.ModelUpdateRequest;
import com.example.osid.domain.model.service.ModelServiceImpl;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/model")
public class ModelController {

	private final ModelServiceImpl modelService;

	// get ?붿껌 ?쒖쇅 master 沅뚰븳 ?꾩슂

	//紐⑤뜽 ?앹꽦
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public CommonResponse<Void> createModel(@RequestBody @Valid ModelCreateRequest request) {

		modelService.createModel(request);
		return CommonResponse.created();
	}

	//紐⑤뜽 ?④굔 議고쉶
	@GetMapping("/{modelId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<ModelResponse> findModel(@PathVariable Long modelId) {

		return CommonResponse.ok(modelService.findModel(modelId));
	}

	//紐⑤뜽 ?꾩껜 議고쉶
	@GetMapping
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Page<ModelResponse>> findAllModel(
		@PageableDefault(size = 10, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable
	) {

		return CommonResponse.ok(modelService.findAllModel(pageable));
	}

	//紐⑤뜽 ?섏젙
	@PatchMapping("/{modelId}")
	public CommonResponse<ModelResponse> updateModel(@PathVariable Long modelId,
		@RequestBody @Valid ModelUpdateRequest request) {

		return CommonResponse.ok(modelService.updateModel(modelId, request));
	}

	//紐⑤뜽 ??젣(soft deleted)
	@ResponseStatus(HttpStatus.OK)
	@DeleteMapping("/{modelId}")
	public CommonResponse<Void> deleteModel(@PathVariable Long modelId) {
		modelService.deleteModel(modelId);
		return CommonResponse.ok();
	}

	// master ?꾩슜 紐⑤뜽 ?④굔 議고쉶
	@GetMapping("/master/{modelId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<ModelMasterResponse> findModelForMaster(@PathVariable Long modelId) {

		return CommonResponse.ok(modelService.findModelForMaster(modelId));
	}

	// master ?꾩슜 紐⑤뜽 ?꾩껜 議고쉶
	@GetMapping("/master")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Page<ModelMasterResponse>> findAllModelForMaster(
		@PageableDefault(size = 10, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable,
		@RequestParam(required = false, defaultValue = "all", name = "deleted") String deletedFilter
	) {

		return CommonResponse.ok(modelService.findAllModelForMaster(pageable, deletedFilter));
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\dto\ModelCreateRequest.java =====
package com.example.osid.domain.model.dto;

import com.example.osid.domain.model.enums.ModelCategory;
import com.example.osid.domain.model.enums.ModelColor;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class ModelCreateRequest {

	@NotBlank(message = "紐⑤뜽紐낆쓣 ?낅젰??二쇱꽭??")
	private final String name;
	@NotNull(message = "紐⑤뜽???됱긽???낅젰??二쇱꽭??")
	private final ModelColor color;
	@NotBlank(message = "紐⑤뜽???ㅻ챸???낅젰??二쇱꽭??")
	private final String description;
	@NotBlank(message = "紐⑤뜽???대?吏瑜??낅젰??二쇱꽭??")
	private final String image;
	@NotNull(message = "紐⑤뜽??移댄뀒怨좊━瑜??낅젰??二쇱꽭??")
	private final ModelCategory category;
	@NotBlank(message = "紐⑤뜽???묒듅 ?몄썝???낅젰??二쇱꽭??")
	private final String seatCount;
	@NotNull(message = "紐⑤뜽??媛寃⑹쓣 ?낅젰??二쇱꽭??")
	private final Long price;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\dto\ModelMasterResponse.java =====
package com.example.osid.domain.model.dto;

import java.time.LocalDateTime;

import com.example.osid.domain.model.entity.Model;
import com.example.osid.domain.model.enums.ModelCategory;
import com.example.osid.domain.model.enums.ModelColor;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class ModelMasterResponse {

	private final Long id;
	private final String name;
	private final ModelColor color;
	private final String description;
	private final String image;
	private final ModelCategory category;
	private final String seatCount;
	private final Long price;
	private final LocalDateTime deletedAt;

	public static ModelMasterResponse from(Model model) {
		return new ModelMasterResponse(model.getId(),
			model.getName(), model.getColor(), model.getDescription(),
			model.getImage(), model.getCategory(), model.getSeatCount(),
			model.getPrice(), model.getDeletedAt()
		);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\dto\ModelResponse.java =====
package com.example.osid.domain.model.dto;

import com.example.osid.domain.model.entity.Model;
import com.example.osid.domain.model.enums.ModelCategory;
import com.example.osid.domain.model.enums.ModelColor;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class ModelResponse {

	private final Long id;
	private final String name;
	private final ModelColor color;
	private final String description;
	private final String image;
	private final ModelCategory category;
	private final String seatCount;
	private final Long price;

	public static ModelResponse from(Model model) {
		return new ModelResponse(model.getId(),
			model.getName(), model.getColor(), model.getDescription(),
			model.getImage(), model.getCategory(), model.getSeatCount(),
			model.getPrice()
		);
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\dto\ModelUpdateRequest.java =====
package com.example.osid.domain.model.dto;

import com.example.osid.domain.model.enums.ModelCategory;
import com.example.osid.domain.model.enums.ModelColor;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class ModelUpdateRequest {

	private final String name;
	private final ModelColor color;
	private final String description;
	private final String image;
	private final ModelCategory category;
	private final String seatCount;
	private final Long price;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\entity\Model.java =====
package com.example.osid.domain.model.entity;

import java.time.LocalDateTime;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.domain.model.dto.ModelUpdateRequest;
import com.example.osid.domain.model.enums.ModelCategory;
import com.example.osid.domain.model.enums.ModelColor;
import com.example.osid.domain.model.exception.ModelErrorCode;
import com.example.osid.domain.model.exception.ModelException;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@Entity
@Getter
@Table(name = "models")
@AllArgsConstructor
@NoArgsConstructor
public class Model extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(nullable = false)
	private String name; // 李⑤웾 ?대쫫(?꾨컲??

	@Column(nullable = false)
	@Enumerated(EnumType.STRING)
	private ModelColor color; // 李⑤웾 ?됱긽(?덈뱶)

	@Column(nullable = false)
	private String description; // 李⑤웾 ?ㅻ챸

	@Column(nullable = false)
	private String image; // 李⑤웾 ?대?吏

	@Column(nullable = false)
	@Enumerated(EnumType.STRING)
	private ModelCategory category; // 李?醫낅쪟( ?몃떒, SUV )

	@Column(nullable = false)
	private String seatCount; // 紐??몄듅 ( 2, 5, 7, 9 )

	@Column(nullable = false)
	private Long price; // 李⑤웾 媛寃?

	@Column
	private LocalDateTime deletedAt; //??젣 ?щ?

	public Model(String name, ModelColor color, String description, String image, ModelCategory category,
		String seatCount,
		Long price) {
		this.name = name;
		this.color = color;
		this.description = description;
		this.image = image;
		this.category = category;
		this.seatCount = seatCount;
		this.price = price;
	}

	public void setDeletedAt() {
		if (this.deletedAt != null) {
			throw new ModelException(ModelErrorCode.MODEL_ALREADY_DELETED);
		}
		this.deletedAt = LocalDateTime.now();
	}

	public void updateModel(ModelUpdateRequest request) {
		if (request.getName() != null) {
			this.name = request.getName();
		}
		if (request.getColor() != null) {
			this.color = request.getColor();
		}
		if (request.getDescription() != null) {
			this.description = request.getDescription();
		}
		if (request.getImage() != null) {
			this.image = request.getImage();
		}
		if (request.getCategory() != null) {
			this.category = request.getCategory();
		}
		if (request.getSeatCount() != null) {
			this.seatCount = request.getSeatCount();
		}
		if (request.getPrice() != null) {
			this.price = request.getPrice();
		}
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\enums\ModelCategory.java =====
package com.example.osid.domain.model.enums;

import com.example.osid.domain.model.exception.ModelErrorCode;
import com.example.osid.domain.model.exception.ModelException;
import com.fasterxml.jackson.annotation.JsonCreator;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum ModelCategory {
	SEDAN("?몃떒"),            // ?몃떒
	SUV("SUV"),              // SUV
	ELECTRIC("?꾧린李?),         // ?꾧린李?
	HYBRID("?섏씠釉뚮━??);           // ?섏씠釉뚮━??

	private final String displayModelCategory;

	@JsonCreator
	public static ModelCategory from(String inputCategory) {
		for (ModelCategory category : ModelCategory.values()) {
			if (category.name().equalsIgnoreCase(inputCategory)) {
				return category;
			}
		}
		throw new ModelException(ModelErrorCode.INVALID_MODEL_CATEGORY);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\enums\ModelColor.java =====
package com.example.osid.domain.model.enums;

import com.example.osid.domain.model.exception.ModelErrorCode;
import com.example.osid.domain.model.exception.ModelException;
import com.fasterxml.jackson.annotation.JsonCreator;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum ModelColor {
	RED("鍮④컯"),
	WHITE("?섏뼇"),
	BLACK("寃??),
	BLUE("?뚮옉"),
	GREEN("珥덈줉");

	private final String displayModelColor;

	@JsonCreator
	public static ModelColor from(String inputCategory) {
		for (ModelColor category : ModelColor.values()) {
			if (category.name().equalsIgnoreCase(inputCategory)) {
				return category;
			}
		}
		throw new ModelException(ModelErrorCode.INVALID_MODEL_CATEGORY);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\exception\ModelErrorCode.java =====
package com.example.osid.domain.model.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum ModelErrorCode implements BaseCode {
	MODEL_NOT_FOUND(HttpStatus.NOT_FOUND, "MODEL_001", "紐⑤뜽???녾굅????젣???곹깭?낅땲??"),
	MODEL_ALREADY_DELETED(HttpStatus.NOT_FOUND, "MODEL_002", "?대? ??젣??紐⑤뜽?낅땲??"),
	INVALID_MODEL_CATEGORY(HttpStatus.BAD_REQUEST, "MODEL_003", "?좏슚?섏? ?딆? 紐⑤뜽 移댄뀒怨좊━?낅땲??");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\exception\ModelException.java =====
package com.example.osid.domain.model.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class ModelException extends CustomException {
	public ModelException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\repository\ModelRepository.java =====
package com.example.osid.domain.model.repository;

import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.model.entity.Model;

@Repository
public interface ModelRepository extends JpaRepository<Model, Long>, ModelSearch {

	Page<Model> findAllByDeletedAtIsNull(Pageable pageable);

	Optional<Model> findByIdAndDeletedAtIsNull(Long id);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\repository\ModelSearch.java =====
package com.example.osid.domain.model.repository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.example.osid.domain.model.entity.Model;

import io.micrometer.common.lang.Nullable;

public interface ModelSearch {

	Page<Model> findAllModel(Pageable pageable, @Nullable String deletedFilter);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\repository\ModelSearchImpl.java =====
package com.example.osid.domain.model.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.model.entity.Model;
import com.example.osid.domain.model.entity.QModel;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;

import io.micrometer.common.lang.Nullable;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Repository
public class ModelSearchImpl extends QuerydslRepositorySupport implements ModelSearch {

	public ModelSearchImpl(JPAQueryFactory jpaQueryFactory) {
		super(Model.class);
		this.jpaQueryFactory = jpaQueryFactory;
	}

	private final JPAQueryFactory jpaQueryFactory;

	@Override
	public Page<Model> findAllModel(Pageable pageable, @Nullable String deletedFilter) {

		QModel model = QModel.model;
		BooleanBuilder builder = new BooleanBuilder();

		// MASTER ??寃쎌슦 ??젣???곗씠?곕룄 議고쉶 媛??
		if ("true".equalsIgnoreCase(deletedFilter)) {
			builder.and(model.deletedAt.isNotNull());
		} else if ("false".equalsIgnoreCase(deletedFilter)) {
			builder.and(model.deletedAt.isNull());
		}

		// content 議고쉶
		List<Model> models = jpaQueryFactory
			.selectFrom(model)
			.where(builder)
			.offset(pageable.getOffset())
			.limit(pageable.getPageSize())
			.fetch();

		// count 荑쇰━
		Long count = Optional.ofNullable(
			jpaQueryFactory
				.select(model.count())
				.from(model)
				.where(builder)
				.fetchOne()
		).orElse(0L);

		return new PageImpl<>(models, pageable, count);

	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\service\ModelService.java =====
package com.example.osid.domain.model.service;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.example.osid.domain.model.dto.ModelCreateRequest;
import com.example.osid.domain.model.dto.ModelMasterResponse;
import com.example.osid.domain.model.dto.ModelResponse;
import com.example.osid.domain.model.dto.ModelUpdateRequest;

public interface ModelService {

	void createModel(ModelCreateRequest request);

	ModelResponse findModel(Long modelId);

	Page<ModelResponse> findAllModel(Pageable pageable);

	ModelResponse updateModel(Long modelId, ModelUpdateRequest request);

	void deleteModel(Long modelId);

	ModelMasterResponse findModelForMaster(Long modelId);

	Page<ModelMasterResponse> findAllModelForMaster(Pageable pageable, String deletedFilter);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\model\service\ModelServiceImpl.java =====
package com.example.osid.domain.model.service;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.domain.model.dto.ModelCreateRequest;
import com.example.osid.domain.model.dto.ModelMasterResponse;
import com.example.osid.domain.model.dto.ModelResponse;
import com.example.osid.domain.model.dto.ModelUpdateRequest;
import com.example.osid.domain.model.entity.Model;
import com.example.osid.domain.model.exception.ModelErrorCode;
import com.example.osid.domain.model.exception.ModelException;
import com.example.osid.domain.model.repository.ModelRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ModelServiceImpl implements ModelService {

	private final ModelRepository modelRepository;

	//紐⑤뜽 ?앹꽦
	@Override
	@Transactional("dataTransactionManager")
	@PreAuthorize("hasRole('MASTER')")
	public void createModel(ModelCreateRequest request) {
		Model model = new Model(request.getName(), request.getColor(), request.getDescription(), request.getImage(),
			request.getCategory(),
			request.getSeatCount(), request.getPrice());

		modelRepository.save(model);
	}

	//紐⑤뜽 ?④굔 議고쉶
	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	public ModelResponse findModel(Long modelId) {

		Model model = findActiveModel(modelId);
		return ModelResponse.from(model);
	}

	//紐⑤뜽 ?꾩껜 議고쉶
	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	@Cacheable(cacheNames = "models", key = "#pageable.pageNumber + '-' + #pageable.pageSize")
	public Page<ModelResponse> findAllModel(Pageable pageable) {

		Page<Model> modelList = modelRepository.findAllByDeletedAtIsNull(pageable);
		return modelList.map(ModelResponse::from);
	}

	//紐⑤뜽 ?섏젙
	@Override
	@Transactional("dataTransactionManager")
	@PreAuthorize("hasRole('MASTER')")
	public ModelResponse updateModel(Long modelId, ModelUpdateRequest request) {

		Model model = findActiveModel(modelId);
		model.updateModel(request);

		return ModelResponse.from(model);
	}

	//紐⑤뜽 ??젣 議고쉶
	@Override
	@Transactional("dataTransactionManager")
	@PreAuthorize("hasRole('MASTER')")
	public void deleteModel(Long modelId) {
		Model model = findActiveModel(modelId);
		model.setDeletedAt();
	}

	//master ?꾩슜 紐⑤뜽 ?④굔 議고쉶
	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	@PreAuthorize("hasRole('MASTER')")
	public ModelMasterResponse findModelForMaster(Long modelId) {
		Model model = modelRepository.findById(modelId)
			.orElseThrow(() -> new ModelException(ModelErrorCode.MODEL_NOT_FOUND));
		return ModelMasterResponse.from(model);
	}

	//master ?꾩슜 紐⑤뜽 ?꾩껜 議고쉶
	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	@PreAuthorize("hasRole('MASTER')")
	public Page<ModelMasterResponse> findAllModelForMaster(Pageable pageable, String deletedFilter) {

		Page<Model> modelList = modelRepository.findAllModel(pageable, deletedFilter);
		return modelList.map(ModelMasterResponse::from);
	}

	//??젣?섏? ?딆? 紐⑤뜽留?議고쉶
	private Model findActiveModel(Long modelId) {
		return modelRepository.findByIdAndDeletedAtIsNull(modelId)
			.orElseThrow(() -> new ModelException(ModelErrorCode.MODEL_NOT_FOUND));
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\mycar\controller\MyCarController.java =====
package com.example.osid.domain.mycar.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.response.CommonResponse;
import com.example.osid.domain.mycar.dto.MyCarListResponse;
import com.example.osid.domain.mycar.dto.MyCarResponse;
import com.example.osid.domain.mycar.service.MyCarService;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/myCar")
public class MyCarController {

	private final MyCarService myCarService;

	//??李??④굔 議고쉶
	@GetMapping("/{myCarId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<MyCarResponse> findMyCar(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@PathVariable Long myCarId
	) {

		MyCarResponse myCarResponse = myCarService.findMyCar(customUserDetails, myCarId);
		return CommonResponse.ok(myCarResponse);
	}

	//??李??꾩껜 議고쉶
	@GetMapping
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Page<MyCarListResponse>> findAllMyCar(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@PageableDefault(size = 10, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable
	) {
		return CommonResponse.ok(myCarService.findAllMyCar(customUserDetails, pageable));
	}

	//??李???젣(soft deleted)
	@ResponseStatus(HttpStatus.OK)
	@DeleteMapping("/{myCarId}")
	public CommonResponse<Void> deleteModel(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@PathVariable Long myCarId) {
		myCarService.deleteMyCar(customUserDetails, myCarId);
		return CommonResponse.ok();
	}

	//?뚯뒪?몄슜 ??李??깅줉
	@PostMapping
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<MyCarResponse> saveMyCar(
		@AuthenticationPrincipal CustomUserDetails customUserDetails
	) {
		Long ordersId = 1L;
		Long userId = customUserDetails.getId();
		return CommonResponse.ok(myCarService.saveMyCar(ordersId));
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\mycar\dto\MyCarListResponse.java =====
package com.example.osid.domain.mycar.dto;

import com.example.osid.domain.mycar.entity.Mycar;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class MyCarListResponse {

	private final Long id;
	private final String myCarName;

	public static MyCarListResponse from(Mycar mycar) {
		return new MyCarListResponse(
			mycar.getId(),
			mycar.getOrders().getModel().getName()
		);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\mycar\dto\MyCarResponse.java =====
package com.example.osid.domain.mycar.dto;

import java.util.List;
import java.util.stream.Collectors;

import com.example.osid.domain.order.entity.Orders;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class MyCarResponse {

	private final String bodyNumber;

	private final String modelName;

	private final List<String> optionName;

	public MyCarResponse(Orders orders) {
		this.bodyNumber = orders.getBodyNumber();
		this.modelName = orders.getModel().getName();
		this.optionName = orders.getOrderOptions()
			.stream()
			.map(orderOption -> orderOption.getOption().getName())
			.collect(Collectors.toList());
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\mycar\entity\Mycar.java =====
package com.example.osid.domain.mycar.entity;

import java.time.LocalDateTime;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.user.entity.User;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@Getter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "mycars",
	indexes = {@Index(name = "idx_user_deleted_created", columnList = "user_id, deleted_at")})
public class Mycar extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false)
	private User user;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "orders_id", nullable = false)
	private Orders orders;

	@Column
	private LocalDateTime deletedAt;

	public Mycar(Orders orders) {
		this.orders = orders;
		this.user = orders.getUser();
	}

	public void setDeletedAt() {
		this.deletedAt = LocalDateTime.now();
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\mycar\exception\MyCarErrorCode.java =====
package com.example.osid.domain.mycar.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum MyCarErrorCode implements BaseCode {
	MY_CAR_NOT_FOUND(HttpStatus.NOT_FOUND, "MY_CAR_C001", "議댁옱?섏? ?딅뒗 李⑤웾?낅땲??"),
	CAR_ALREADY_OWNED(HttpStatus.CONFLICT, "MY_CAR_002", "?대? ?깅줉??李⑤웾?낅땲??),
	MY_CAR_NOT_OWED(HttpStatus.FORBIDDEN, "MY_CAR_003", "?묎렐 沅뚰븳???놁뒿?덈떎."),
	ORDER_NOT_COMPLETED(HttpStatus.CONFLICT, "MY_CAR_004", "?앹궛???꾨즺?섏? ?딆? 李⑤웾?낅땲??");
	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\mycar\exception\MyCarException.java =====
package com.example.osid.domain.mycar.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class MyCarException extends CustomException {
	public MyCarException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\mycar\repository\MycarRepository.java =====
package com.example.osid.domain.mycar.repository;

import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.mycar.entity.Mycar;

@Repository
public interface MycarRepository extends JpaRepository<Mycar, Long> {

	Optional<Mycar> findByIdAndDeletedAtIsNull(Long myCarId);

	Page<Mycar> findAllByUserIdAndDeletedAtIsNull(Long userId, Pageable pageable);

	boolean existsByOrdersId(Long ordersId);

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\mycar\service\MyCarService.java =====
package com.example.osid.domain.mycar.service;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.domain.mycar.dto.MyCarListResponse;
import com.example.osid.domain.mycar.dto.MyCarResponse;

public interface MyCarService {

	MyCarResponse findMyCar(CustomUserDetails customUserDetails, Long myCarId);

	Page<MyCarListResponse> findAllMyCar(CustomUserDetails customUserDetails, Pageable pageable);

	void deleteMyCar(CustomUserDetails customUserDetails, Long myCarId);

	MyCarResponse saveMyCar(Long orderId);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\mycar\service\MyCarServiceImpl.java =====
package com.example.osid.domain.mycar.service;

import java.util.Objects;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.domain.mycar.dto.MyCarListResponse;
import com.example.osid.domain.mycar.dto.MyCarResponse;
import com.example.osid.domain.mycar.entity.Mycar;
import com.example.osid.domain.mycar.exception.MyCarErrorCode;
import com.example.osid.domain.mycar.exception.MyCarException;
import com.example.osid.domain.mycar.repository.MycarRepository;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.exception.OrderErrorCode;
import com.example.osid.domain.order.exception.OrderException;
import com.example.osid.domain.order.repository.OrderRepository;
import com.example.osid.domain.user.repository.UserRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class MyCarServiceImpl implements MyCarService {

	private final MycarRepository mycarRepository;
	private final OrderRepository orderRepository;
	private final UserRepository userRepository;

	//myCar ?⑥씪 議고쉶 (紐⑤뜽紐? body number, 二쇰Ц ?듭뀡 list)
	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	public MyCarResponse findMyCar(CustomUserDetails customUserDetails, Long myCarId) {
		Mycar mycar = findMyCarOrElseThrow(myCarId);
		Long userId = customUserDetails.getId();
		validateMyCarOwner(userId, mycar.getUser().getId());
		return new MyCarResponse(mycar.getOrders());
	}

	//myCar ?꾩껜議고쉶 (mycar 紐⑤뜽紐?
	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	public Page<MyCarListResponse> findAllMyCar(CustomUserDetails customUserDetails, Pageable pageable) {
		Long userId = customUserDetails.getId();
		Page<Mycar> myCarList = mycarRepository.findAllByUserIdAndDeletedAtIsNull(userId, pageable);
		return myCarList.map(MyCarListResponse::from);
	}

	//myCar ??젣(soft deleted)
	@Override
	@Transactional(value = "dataTransactionManager")
	public void deleteMyCar(CustomUserDetails customUserDetails, Long myCarId) {
		Long userId = customUserDetails.getId();
		Mycar mycar = findMyCarOrElseThrow(myCarId);
		validateMyCarOwner(userId, mycar.getUser().getId());
		mycar.setDeletedAt();
	}

	@Override
	@Transactional(value = "dataTransactionManager")
	public MyCarResponse saveMyCar(Long ordersId) {

		Orders orders = orderRepository.findWithOptionsById(ordersId)
			.orElseThrow(() -> new OrderException(OrderErrorCode.ORDER_NOT_FOUND));

		// ?대? ?깅줉??李⑤웾??寃쎌슦
		boolean existsMyCar = mycarRepository.existsByOrdersId(ordersId);
		if (existsMyCar) {
			throw new MyCarException(MyCarErrorCode.CAR_ALREADY_OWNED);
		}

		Mycar mycar = new Mycar(orders);
		mycarRepository.save(mycar);
		return new MyCarResponse(orders);
	}

	// myCar 議고쉶???놁쑝硫??덉쇅異쒕젰
	private Mycar findMyCarOrElseThrow(Long myCarId) {
		return mycarRepository.findByIdAndDeletedAtIsNull(myCarId)
			.orElseThrow(() -> new MyCarException(MyCarErrorCode.MY_CAR_NOT_FOUND));
	}

	// 濡쒓렇?명븳 ?좎?? myCar ???좎?媛 ?쇱??섎뒗吏 ?뺤씤
	private void validateMyCarOwner(Long userId, Long myCarUserId) {
		if (!Objects.equals(myCarUserId, userId)) {
			throw new MyCarException(MyCarErrorCode.MY_CAR_NOT_OWED);
		}
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\controller\OptionController.java =====
package com.example.osid.domain.option.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.response.CommonResponse;
import com.example.osid.domain.option.dto.OptionMasterResponse;
import com.example.osid.domain.option.dto.OptionRequest;
import com.example.osid.domain.option.dto.OptionResponse;
import com.example.osid.domain.option.dto.OptionUpdateRequest;
import com.example.osid.domain.option.service.OptionService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/option")
public class OptionController {

	private final OptionService optionService;

	// get ?붿껌 ?쒖쇅 master 沅뚰븳 ?꾩슂

	//?듭뀡 ?앹꽦
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public CommonResponse<Void> createOption(@RequestBody @Valid OptionRequest request) {

		optionService.createOption(request);
		return CommonResponse.created();
	}

	//?듭뀡 ?④굔 議고쉶
	@GetMapping("/{optionId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<OptionResponse> findOption(@PathVariable Long optionId) {

		return CommonResponse.ok(optionService.findOption(optionId));
	}

	//?듭뀡 ?꾩껜 議고쉶
	@GetMapping
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Page<OptionResponse>> findAllOption(
		@PageableDefault(size = 10, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable
	) {

		return CommonResponse.ok(optionService.findAllOption(pageable));
	}

	//?듭뀡 ?섏젙
	@PatchMapping("/{optionId}")
	public CommonResponse<OptionResponse> updateOption(@PathVariable Long optionId,
		@RequestBody @Valid OptionUpdateRequest request) {

		return CommonResponse.ok(optionService.updateOption(optionId, request));
	}

	//?듭뀡 ??젣(soft deleted)
	@ResponseStatus(HttpStatus.OK)
	@DeleteMapping("/{optionId}")
	public CommonResponse<Void> deleteModel(@PathVariable Long optionId) {
		optionService.deleteOption(optionId);
		return CommonResponse.ok();
	}

	// master ?꾩슜 ?듭뀡 ?④굔 議고쉶
	@GetMapping("/master/{optionId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<OptionMasterResponse> findOptionForMaster(@PathVariable Long optionId) {

		return CommonResponse.ok(optionService.findOptionForMaster(optionId));
	}

	// master ?꾩슜 ?듭뀡 ?꾩껜 議고쉶
	@GetMapping("/master")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Page<OptionMasterResponse>> findAllOptionForMaster(
		@PageableDefault(size = 10, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable,
		@RequestParam(required = false, defaultValue = "all", name = "deleted") String deletedFilter
	) {

		return CommonResponse.ok(optionService.findAllOptionForMaster(pageable, deletedFilter));
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\dto\OptionMasterResponse.java =====
package com.example.osid.domain.option.dto;

import java.time.LocalDateTime;

import com.example.osid.domain.option.entity.Option;
import com.example.osid.domain.option.enums.OptionCategory;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class OptionMasterResponse {

	private final Long id;

	private final String name; //?듭뀡 ?대쫫

	private final String description; //?듭뀡 ?ㅻ챸

	private final String image; //?듭뀡 ?대?吏

	private final OptionCategory category; //?듭뀡 移댄뀒怨좊━

	private final Long price; //?듭뀡 媛寃?

	private final LocalDateTime deletedAt;

	public static OptionMasterResponse from(Option option) {
		return new OptionMasterResponse(
			option.getId(),
			option.getName(),
			option.getDescription(),
			option.getImage(),
			option.getCategory(),
			option.getPrice(),
			option.getDeletedAt()
		);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\dto\OptionRequest.java =====
package com.example.osid.domain.option.dto;

import com.example.osid.domain.option.enums.OptionCategory;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class OptionRequest {

	@NotBlank(message = "?듭뀡 ?대쫫???낅젰??二쇱꽭??")
	private final String name; //?듭뀡 ?대쫫
	@NotBlank(message = "?듭뀡 ?ㅻ챸???낅젰??二쇱꽭??")
	private final String description; //?듭뀡 ?ㅻ챸
	@NotBlank(message = "?듭뀡 ?대?吏瑜??낅젰??二쇱꽭??")
	private final String image; //?듭뀡 ?대?吏
	@NotNull(message = "?듭뀡 移댄뀒怨좊━瑜??낅젰??二쇱꽭??")
	private final OptionCategory category; //?듭뀡 移댄뀒怨좊━
	@NotNull(message = "?듭뀡 媛寃⑹쓣 ?낅젰??二쇱꽭??")
	private final Long price; //?듭뀡 媛寃?
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\dto\OptionResponse.java =====
package com.example.osid.domain.option.dto;

import com.example.osid.domain.option.entity.Option;
import com.example.osid.domain.option.enums.OptionCategory;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class OptionResponse {

	private Long id;

	private String name; //?듭뀡 ?대쫫

	private String description; //?듭뀡 ?ㅻ챸

	private String image; //?듭뀡 ?대?吏

	private OptionCategory category; //?듭뀡 移댄뀒怨좊━

	private Long price; //?듭뀡 媛寃?

	public static OptionResponse from(Option option) {
		return new OptionResponse(
			option.getId(),
			option.getName(),
			option.getDescription(),
			option.getImage(),
			option.getCategory(),
			option.getPrice()
		);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\dto\OptionUpdateRequest.java =====
package com.example.osid.domain.option.dto;

import com.example.osid.domain.option.enums.OptionCategory;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class OptionUpdateRequest {

	private final String name; //?듭뀡 ?대쫫
	private final String description; //?듭뀡 ?ㅻ챸
	private final String image; //?듭뀡 ?대?吏
	private final OptionCategory category; //?듭뀡 移댄뀒怨좊━
	private final Long price; //?듭뀡 媛寃?

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\entity\Option.java =====
package com.example.osid.domain.option.entity;

import java.time.LocalDateTime;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.domain.option.dto.OptionUpdateRequest;
import com.example.osid.domain.option.enums.OptionCategory;
import com.example.osid.domain.option.exception.OptionErrorCode;
import com.example.osid.domain.option.exception.OptionException;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@Getter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "options")
public class Option extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(nullable = false)
	private String name; //?듭뀡 ?대쫫

	@Column(nullable = false)
	private String description; //?듭뀡 ?ㅻ챸

	@Column(nullable = false)
	private String image; //?듭뀡 ?대?吏

	@Column(nullable = false, length = 50)
	@Enumerated(EnumType.STRING)
	private OptionCategory category; //?듭뀡 移댄뀒怨좊━

	@Column(nullable = false)
	private Long price; //?듭뀡 媛寃?

	@Column
	private LocalDateTime deletedAt; //??젣 ?щ?

	public Option(String name, String description, String image, OptionCategory category, Long price) {
		this.name = name;
		this.description = description;
		this.image = image;
		this.category = category;
		this.price = price;
	}

	public void setDeletedAt() {
		if (this.deletedAt != null) {
			throw new OptionException(OptionErrorCode.OPTION_ALREADY_DELETED);
		}
		this.deletedAt = LocalDateTime.now();
	}

	public void updateOption(OptionUpdateRequest request) {
		if (request.getName() != null) {
			this.name = request.getName();
		}
		if (request.getDescription() != null) {
			this.description = request.getDescription();
		}
		if (request.getImage() != null) {
			this.image = request.getImage();
		}
		if (request.getCategory() != null) {
			this.category = request.getCategory();
		}
		if (request.getPrice() != null) {
			this.price = request.getPrice();
		}
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\enums\OptionCategory.java =====
package com.example.osid.domain.option.enums;

import com.example.osid.domain.model.exception.ModelErrorCode;
import com.example.osid.domain.model.exception.ModelException;
import com.fasterxml.jackson.annotation.JsonCreator;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum OptionCategory {
	NAVIGATION("?대퉬寃뚯씠??),          // ?대퉬寃뚯씠??
	SUNROOF("?좊（??),             // ?좊（??
	HEATED_SEATS("?댁꽑 ?쒗듃"),        // ?댁꽑 ?쒗듃
	VENTILATED_SEATS("?듯뭾 ?쒗듃"),    // ?듯뭾 ?쒗듃
	LEATHER_SEATS("媛二??쒗듃"),       // 媛二??쒗듃
	PARKING_SENSOR("二쇱감 ?쇱꽌"),      // 二쇱감 ?쇱꽌
	REAR_CAMERA("?꾨갑 移대찓??),         // ?꾨갑 移대찓??
	CRUISE_CONTROL("?щ（利?而⑦듃濡?),      // ?щ（利?而⑦듃濡?
	BLIND_SPOT_MONITOR("?ш컖吏? 媛먯? ?쒖뒪??),  // ?ш컖吏? 媛먯? ?쒖뒪??
	LANE_KEEP_ASSIST("李⑥꽑 ?좎? 蹂댁“"),    // 李⑥꽑 ?좎? 蹂댁“
	ADAPTIVE_HEADLIGHTS("?대뙌?곕툕 ?ㅻ뱶?쇱씠??), // ?대뙌?곕툕 ?ㅻ뱶?쇱씠??
	AUTO_PARKING("?먮룞 二쇱감 蹂댁“"),        // ?먮룞 二쇱감 蹂댁“
	HEAD_UP_DISPLAY("?ㅻ뱶???붿뒪?뚮젅??),     // ?ㅻ뱶???붿뒪?뚮젅??
	WIRELESS_CHARGER("臾댁꽑 異⑹쟾"),    // 臾댁꽑 異⑹쟾
	BOSE_SOUND_SYSTEM("?꾨━誘몄뾼 ?ㅻ뵒??),   // ?꾨━誘몄뾼 ?ㅻ뵒??(BOSE ??
	AWD("?щ쪣 援щ룞 ?쒖뒪??),                 // ?щ쪣 援щ룞 ?쒖뒪??
	SMART_KEY("?ㅻ쭏????),           // ?ㅻ쭏????
	POWER_TAILGATE("?꾨룞???몃쟻??),      // ?꾨룞???몃쟻??
	DASHCAM("釉붾옓諛뺤뒪"),             // 釉붾옓諛뺤뒪
	REMOTE_START("?먭꺽 ?쒕룞");       // ?먭꺽 ?쒕룞

	private final String displayOptionCategory;

	@JsonCreator
	public static OptionCategory from(String inputCategory) {
		for (OptionCategory category : com.example.osid.domain.option.enums.OptionCategory.values()) {
			if (category.name().equalsIgnoreCase(inputCategory)) {
				return category;
			}
		}
		throw new ModelException(ModelErrorCode.INVALID_MODEL_CATEGORY);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\exception\OptionErrorCode.java =====
package com.example.osid.domain.option.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum OptionErrorCode implements BaseCode {
	OPTION_NOT_FOUND(HttpStatus.NOT_FOUND, "OPTION_001", "?듭뀡???녾굅????젣???곹깭?낅땲??"),
	OPTION_ALREADY_DELETED(HttpStatus.CONFLICT, "OPTION_002", "?대? ??젣???듭뀡?낅땲??"),
	INVALID_OPTION_CATEGORY(HttpStatus.BAD_REQUEST, "OPTION_003", "?좏슚?섏? ?딆? ?듭뀡 移댄뀒怨좊━?낅땲??");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\exception\OptionException.java =====
package com.example.osid.domain.option.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class OptionException extends CustomException {
	public OptionException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\repository\OptionRepository.java =====
package com.example.osid.domain.option.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.option.entity.Option;

@Repository
public interface OptionRepository extends JpaRepository<Option, Long>, OptionSearch {

	// option list 諛섑솚
	List<Option> findByIdIn(List<Long> ids);

	Optional<Option> findByIdAndDeletedAtIsNull(Long optionId);

	Page<Option> findAllByDeletedAtIsNull(Pageable pageable);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\repository\OptionSearch.java =====
package com.example.osid.domain.option.repository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.example.osid.domain.option.entity.Option;

import io.micrometer.common.lang.Nullable;

public interface OptionSearch {

	Page<Option> findAllOption(Pageable pageable, @Nullable String deletedFilter);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\repository\OptionSearchImpl.java =====
package com.example.osid.domain.option.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.option.entity.Option;
import com.example.osid.domain.option.entity.QOption;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;

import io.micrometer.common.lang.Nullable;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Repository
public class OptionSearchImpl extends QuerydslRepositorySupport implements OptionSearch {

	public OptionSearchImpl(JPAQueryFactory jpaQueryFactory) {
		super(Option.class);
		this.jpaQueryFactory = jpaQueryFactory;
	}

	private final JPAQueryFactory jpaQueryFactory;

	@Override
	public Page<Option> findAllOption(Pageable pageable, @Nullable String deletedFilter) {

		QOption option = QOption.option;
		BooleanBuilder builder = new BooleanBuilder();

		// MASTER ??寃쎌슦 ??젣???곗씠?곕룄 議고쉶 媛??
		if ("true".equalsIgnoreCase(deletedFilter)) {
			builder.and(option.deletedAt.isNotNull());
		} else if ("false".equalsIgnoreCase(deletedFilter)) {
			builder.and(option.deletedAt.isNull());
		}

		// content 議고쉶
		List<Option> options = jpaQueryFactory
			.selectFrom(option)
			.where(builder)
			.offset(pageable.getOffset())
			.limit(pageable.getPageSize())
			.fetch();

		// count 荑쇰━
		Long count = Optional.ofNullable(
			jpaQueryFactory
				.select(option.count())
				.from(option)
				.where(builder)
				.fetchOne()
		).orElse(0L);

		return new PageImpl<>(options, pageable, count);

	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\service\OptionService.java =====
package com.example.osid.domain.option.service;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.example.osid.domain.option.dto.OptionMasterResponse;
import com.example.osid.domain.option.dto.OptionRequest;
import com.example.osid.domain.option.dto.OptionResponse;
import com.example.osid.domain.option.dto.OptionUpdateRequest;

public interface OptionService {

	void createOption(OptionRequest request);

	OptionResponse findOption(Long optionId);

	Page<OptionResponse> findAllOption(Pageable pageable);

	OptionResponse updateOption(Long optionId, OptionUpdateRequest request);

	void deleteOption(Long optionId);

	OptionMasterResponse findOptionForMaster(Long optionId);

	Page<OptionMasterResponse> findAllOptionForMaster(Pageable pageable, String deletedFilter);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\option\service\OptionServiceImpl.java =====
package com.example.osid.domain.option.service;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.domain.option.dto.OptionMasterResponse;
import com.example.osid.domain.option.dto.OptionRequest;
import com.example.osid.domain.option.dto.OptionResponse;
import com.example.osid.domain.option.dto.OptionUpdateRequest;
import com.example.osid.domain.option.entity.Option;
import com.example.osid.domain.option.exception.OptionErrorCode;
import com.example.osid.domain.option.exception.OptionException;
import com.example.osid.domain.option.repository.OptionRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class OptionServiceImpl implements OptionService {

	private final OptionRepository optionRepository;

	@Override
	@Transactional(value = "dataTransactionManager")
	@PreAuthorize("hasRole('MASTER')")
	public void createOption(OptionRequest request) {
		Option option = new Option(request.getName(), request.getDescription(), request.getImage(),
			request.getCategory(), request.getPrice());
		optionRepository.save(option);
	}

	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	public OptionResponse findOption(Long optionId) {
		Option option = findActiveOption(optionId);
		return OptionResponse.from(option);
	}

	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	@Cacheable(cacheNames = "options", key = "#pageable.pageNumber + '-' + #pageable.pageSize")
	public Page<OptionResponse> findAllOption(Pageable pageable) {
		Page<Option> optionList = optionRepository.findAllByDeletedAtIsNull(pageable);
		return optionList.map(OptionResponse::from);
	}

	@Override
	@Transactional(value = "dataTransactionManager")
	@PreAuthorize("hasRole('MASTER')")
	public OptionResponse updateOption(Long optionId, OptionUpdateRequest request) {
		Option option = findActiveOption(optionId);
		option.updateOption(request);

		return OptionResponse.from(option);
	}

	@Override
	@Transactional(value = "dataTransactionManager")
	@PreAuthorize("hasRole('MASTER')")
	public void deleteOption(Long optionId) {
		Option option = findActiveOption(optionId);
		option.setDeletedAt();
	}

	//master ?꾩슜 ?듭뀡 ?④굔 議고쉶
	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	@PreAuthorize("hasRole('MASTER')")
	public OptionMasterResponse findOptionForMaster(Long modelId) {
		Option option = optionRepository.findById(modelId)
			.orElseThrow(() -> new OptionException(OptionErrorCode.OPTION_NOT_FOUND));
		return OptionMasterResponse.from(option);
	}

	//master ?꾩슜 ?듭뀡 ?꾩껜 議고쉶
	@Override
	@Transactional(value = "dataTransactionManager", readOnly = true)
	@PreAuthorize("hasRole('MASTER')")
	public Page<OptionMasterResponse> findAllOptionForMaster(Pageable pageable, String deletedFilter) {

		Page<Option> optionList = optionRepository.findAllOption(pageable, deletedFilter);
		return optionList.map(OptionMasterResponse::from);
	}

	//??젣?섏? ?딆? 紐⑤뜽留?議고쉶
	private Option findActiveOption(Long optionId) {
		return optionRepository.findByIdAndDeletedAtIsNull(optionId)
			.orElseThrow(() -> new OptionException(OptionErrorCode.OPTION_NOT_FOUND));
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\controller\OrderController.java =====
package com.example.osid.domain.order.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.response.CommonResponse;
import com.example.osid.domain.order.dto.request.OrderRequestDto;
import com.example.osid.domain.order.dto.response.OrderDetailResponse;
import com.example.osid.domain.order.dto.response.OrderResponseDto;
import com.example.osid.domain.order.service.OrderService;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
public class OrderController {

	private final OrderService orderService;

	// 二쇰Ц ?앹꽦
	@PostMapping("/api/dealers/order")
	@ResponseStatus(HttpStatus.CREATED)
	public CommonResponse<OrderResponseDto.Add> createOrder(
		@RequestBody OrderRequestDto.Add requestDto,
		@AuthenticationPrincipal CustomUserDetails customUserDetails
	) {

		OrderResponseDto.Add order = orderService.createOrder(customUserDetails, requestDto);

		return CommonResponse.created(order);

	}

	// 二쇰Ц ?섏젙
	@PatchMapping("/api/dealers/order/{orderId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<OrderResponseDto.Update> updateOrder(
		@PathVariable Long orderId,
		@RequestBody OrderRequestDto.Update requestDto,
		@AuthenticationPrincipal CustomUserDetails customUserDetails
	) {

		OrderResponseDto.Update order = orderService.updateOrder(customUserDetails, orderId, requestDto);

		return CommonResponse.ok(order);

	}

	// 二쇰Ц 痍⑥냼(寃곗젣 誘몄셿猷??? ?붿껌 API
	@PostMapping("/api/dealers/order/{orderId}/fail")
	public CommonResponse<Void> cancelOrder(@PathVariable Long orderId) {
		orderService.cancelOrder(orderId);
		return CommonResponse.ok();
	}

	// 二쇰Ц ?④굔 議고쉶
	@GetMapping("/api/order/{orderId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<OrderDetailResponse> findOrder(
		@PathVariable Long orderId,
		@AuthenticationPrincipal CustomUserDetails customUserDetails
	) {

		OrderDetailResponse order = orderService.findOrder(customUserDetails, orderId);

		return CommonResponse.ok(order);
	}

	// 二쇰Ц ?꾩껜 議고쉶
	@GetMapping("/api/order")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Page<OrderResponseDto.FindAll>> findAllOrder(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@PageableDefault(size = 10, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable
	) {

		Page<OrderResponseDto.FindAll> order = orderService.findAllOrder(customUserDetails, pageable);

		return CommonResponse.ok(order);
	}

	// 二쇰Ц ??젣
	@DeleteMapping("/api/dealers/order/{orderId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Void> deleteOrder(
		@PathVariable Long orderId,
		@AuthenticationPrincipal CustomUserDetails customUserDetails
	) {
		orderService.deleteOrder(customUserDetails, orderId);

		return CommonResponse.ok();
	}

	// 李⑤웾 異쒓퀬 ?꾨즺
	@PostMapping("/api/order/shipped/{orderId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Void> changeShipped(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@PathVariable Long orderId
	) {
		orderService.changeShipped(customUserDetails, orderId);
		return CommonResponse.ok();
	}

	// 李⑤웾 ?섎졊 ?꾨즺
	@PostMapping("/api/order/received/{orderId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Void> changeReceived(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@PathVariable Long orderId
	) {
		orderService.changeReceived(customUserDetails, orderId);
		return CommonResponse.ok();
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\dto\request\OrderRequestDto.java =====
package com.example.osid.domain.order.dto.request;

import java.time.LocalDateTime;
import java.util.List;

import org.openapitools.jackson.nullable.JsonNullable;

import com.example.osid.domain.order.enums.OrderStatus;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

public class OrderRequestDto {

	@Getter
	@NoArgsConstructor
	@AllArgsConstructor
	public static class Add {

		@NotBlank(message = "{javax.validation.constraints.NotBlank.message}")
		private String userEmail;

		@NotEmpty(message = "{javax.validation.constraints.NotNull.message}")
		private List<Long> option;

		@NotNull(message = "{javax.validation.constraints.NotBlank.message}")
		private Long modelId;

		@NotBlank(message = "{javax.validation.constraints.NotBlank.message}")
		private String address;
	}

	@Getter
	@AllArgsConstructor
	public static class Update {
		private JsonNullable<String> address = JsonNullable.undefined();

		private OrderStatus orderStatus;

		private JsonNullable<LocalDateTime> expectedDeliveryAt = JsonNullable.undefined();

		private JsonNullable<LocalDateTime> actualDeliveryAt = JsonNullable.undefined();

	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\dto\response\OrderDetailResponse.java =====
package com.example.osid.domain.order.dto.response;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.enums.OrderStatus;
import com.example.osid.domain.user.entity.User;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;

@Getter
@AllArgsConstructor
@Builder
public class OrderDetailResponse {

	private Header header;
	private OrderBlock order;
	private UserBlock user;
	private PaymentBlock payment;

	public static OrderDetailResponse of(Orders orders, List<ProcessStep> steps) {
		return OrderDetailResponse.builder()
			.header(new Header(orders.getId(), steps))
			.order(OrderBlock.from(orders))
			.user(UserBlock.from(orders.getUser()))
			.payment(PaymentBlock.from(orders))
			.build();
	}

	@Getter
	@AllArgsConstructor
	public static class Header {
		private Long id;
		private List<ProcessStep> steps;
	}

	@Getter
	@AllArgsConstructor
	public static class ProcessStep {
		private String name;
		private LocalDate startDate;
		private LocalDate endDate;

		public static ProcessStep from(String name, LocalDateTime startDate, LocalDateTime endDate) {

			return new ProcessStep(name,
				startDate != null ? startDate.toLocalDate() : null,
				endDate != null ? endDate.toLocalDate() : null
			);
		}
	}

	@Getter
	@AllArgsConstructor
	public static class OrderBlock {
		private String orderNumber;
		private String dealer;
		private String model;
		private List<String> options;
		private LocalDate orderDate;
		private OrderStatus orderStatus;
		private LocalDate expectedDelivery;
		private LocalDate actualDelivery;

		public static OrderBlock from(Orders orders) {
			return new OrderBlock(
				orders.getBodyNumber(),
				orders.getDealer().getName(),
				orders.getModel().getName(),
				orders.getOrderOptions().stream()
					.map(order -> order.getOption().getName())
					.toList(),
				orders.getCreatedAt().toLocalDate(),
				orders.getOrderStatus(),
				orders.getExpectedDeliveryAt() != null ? orders.getExpectedDeliveryAt().toLocalDate() : null,
				orders.getActualDeliveryAt() != null ? orders.getActualDeliveryAt().toLocalDate() : null
			);
		}
	}

	@Getter
	@AllArgsConstructor
	public static class UserBlock {
		private String name;
		private String phone;
		private String email;

		public static UserBlock from(User user) {
			return new UserBlock(
				nullToString(user.getName()),
				nullToString(user.getPhoneNumber()),
				nullToString(user.getEmail())
			);
		}
	}

	@Getter
	@AllArgsConstructor
	public static class PaymentBlock {
		private String payStatus;
		private Long totalPrice;

		public static PaymentBlock from(Orders order) {
			if (order.getPayments() == null) {
				return new PaymentBlock("?뺣낫?놁쓬", order.getTotalPrice());
			}
			return new PaymentBlock(
				nullToString(order.getPayments().getPaymentStatus() != null
					? order.getPayments().getPaymentStatus().toString()
					: null),
				order.getTotalPrice()
			);
		}
	}

	private static String nullToString(String value) {
		return value != null ? value : "?뺣낫?놁쓬";
	}
}

// @Getter
// @AllArgsConstructor
// @Builder
// public class OrderDetailResponse {
//
// 	private Header header;        // ?곷떒 ??꾨씪??
// 	private OrderBlock order;     // 二쇰Ц(醫뚯륫)
// 	private UserBlock user;       // 怨좉컼(?곗륫)
// 	private PaymentBlock payment; // 寃곗젣/媛寃?
//
// 	/* ------------------ ?뺤쟻 ?⑺꽣由?------------------ */
// 	public static OrderDetailResponse of(Orders orders,
// 		List<ProcessStep> steps) {
//
// 		return OrderDetailResponse.builder()
// 			.header(new Header(orders.getId(), steps))
// 			.order(OrderBlock.from(orders))
// 			.user(UserBlock.from(orders.getUser()))
// 			.payment(PaymentBlock.from(orders))
// 			.build();
// 	}
//
// 	/* ------------ ?대? static ?대옒?ㅻ뱾 ------------ */
//
// 	@Getter
// 	@AllArgsConstructor
// 	public static class Header {
// 		private Long id;
// 		private List<ProcessStep> steps;   // ??꾨씪??
// 	}
//
// 	@Getter
// 	@AllArgsConstructor
// 	public static class ProcessStep {
// 		private String name;
// 		private LocalDate startDate;
// 		private LocalDate endDate;
// 	}
//
// 	@Getter
// 	@AllArgsConstructor
// 	public static class OrderBlock {
// 		private String orderNumber;
// 		private String dealer;
// 		private String model;
// 		private List<String> options;
// 		private LocalDate orderDate;
// 		private OrderStatus orderStatus;
// 		private LocalDate expectedDelivery;
// 		private LocalDate actualDelivery;
//
// 		public static OrderBlock from(Orders orders) {
// 			return new OrderBlock(
// 				orders.getBodyNumber(),
// 				orders.getDealer().getName(),
// 				orders.getModel().getName(),
// 				orders.getOrderOptions().stream()
// 					.map(order -> order.getOption().getName())
// 					.toList(),
// 				orders.getCreatedAt().toLocalDate(),
// 				orders.getOrderStatus(),
// 				orders.getExpectedDeliveryAt(),
// 				orders.getActualDeliveryAt()
// 			);
// 		}
// 	}
//
// 	@Getter
// 	@AllArgsConstructor
// 	public static class UserBlock {
// 		private String name;
// 		private String phone;
// 		private String email;
//
// 		public static UserBlock from(User user) {
// 			return new UserBlock(user.getName(), user.getPhoneNumber(), user.getEmail());
// 		}
// 	}
//
// 	@Getter
// 	@AllArgsConstructor
// 	public static class PaymentBlock {
// 		private String payStatus;
// 		private Long totalPrice;
//
// 		public static PaymentBlock from(Orders order) {
// 			return new PaymentBlock(
// 				order.getPayments().getPaymentStatus().toString(),
// 				order.getTotalPrice()
// 			);
// 		}
// 	}
// }
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\dto\response\OrderResponseDto.java =====
package com.example.osid.domain.order.dto.response;

import java.time.LocalDateTime;
import java.util.List;

import com.example.osid.domain.order.enums.OrderStatus;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

public class OrderResponseDto {

	@Builder
	@Getter
	@NoArgsConstructor
	@AllArgsConstructor
	public static class Add {

		private Long id;

		private Long userId;

		private String dealerName;

		private List<String> orderOptions;

		private String model;

		private String address;

		private Long totalPrice;

		private String merchantUid;

		private OrderStatus orderStatus; // 二쇰Ц ?곹깭

		private LocalDateTime createdAt;

	}

	@Builder
	@Getter
	@NoArgsConstructor
	@AllArgsConstructor
	public static class Update {

		private Long id;

		private String userName;

		private String dealerName;

		private List<String> orderOptions;

		private String model;

		private String address;

		private Long totalPrice;

		private OrderStatus orderStatus; // 二쇰Ц ?곹깭

		private LocalDateTime expectedDeliveryAt; // ?덉긽 異쒓퀬??

		private LocalDateTime actualDeliveryAt; // ?ㅼ젣 異쒓퀬??

		private LocalDateTime createdAt;

	}

	@Builder
	@Getter
	@NoArgsConstructor
	@AllArgsConstructor
	public static class FindAll {

		private Long id;

		private String userName;

		private String dealerName;

		private String model;

		// private Long totalPrice;
		//
		// private OrderStatus orderStatus; // 二쇰Ц ?곹깭
		//
		// private LocalDate expectedDeliveryAt; // ?덉긽 異쒓퀬??
		//
		// private LocalDate actualDeliveryAt; // ?ㅼ젣 異쒓퀬??

	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\dto\OrderPaidEvent.java =====
package com.example.osid.domain.order.dto;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

// @Getter
// @RequiredArgsConstructor
// public class OrderPaidEvent {
//
// 	private final Long orderId;
// 	private final List<Long> optionIds;
//
// 	public OrderPaidEvent(Orders orders) {
// 		this.orderId = orders.getId();
// 		this.optionIds = orders.getOrderOptions().stream()
// 			.map(option -> option.getId()).toList();
//
// 	}

@Getter
@RequiredArgsConstructor
public class OrderPaidEvent {

	private final Long orderId;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\entity\OrderOption.java =====
package com.example.osid.domain.order.entity;

import com.example.osid.domain.option.entity.Option;
import com.fasterxml.jackson.annotation.JsonBackReference;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@Getter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "order_option")
public class OrderOption {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@ManyToOne
	@JsonBackReference
	@JoinColumn(name = "order_id")
	private Orders orders;

	@ManyToOne
	@JoinColumn(name = "option_id")
	private Option option;

	public OrderOption(Orders orders, Option option) {
		this.orders = orders;
		this.option = option;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\entity\Orders.java =====
package com.example.osid.domain.order.entity;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.model.entity.Model;
import com.example.osid.domain.order.enums.OrderStatus;
import com.example.osid.domain.payment.entity.Payments;
import com.example.osid.domain.user.entity.User;
import com.example.osid.domain.waitingorder.entity.WaitingOrders;
import com.fasterxml.jackson.annotation.JsonManagedReference;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@Setter
@Getter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "orders")
public class Orders extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(nullable = true)
	private String address; // 諛곗넚吏

	private String merchantUid;  // 二쇰Ц 怨좎쑀 ?앸퀎??(寃곗젣??

	@Column(nullable = false, unique = true)
	private String bodyNumber; // 李?怨좎쑀 踰덊샇

	@Column(nullable = false)
	private Long totalPrice; // 珥앷?寃?

	@Enumerated(EnumType.STRING)
	private OrderStatus orderStatus; // 二쇰Ц ?곹깭

	@Column(name = "expected_delivery_date")
	private LocalDateTime expectedDeliveryAt; // ?덉긽 異쒓퀬??

	@Column(name = "actual_delivery_date")
	private LocalDateTime actualDeliveryAt; // ?ㅼ젣 異쒓퀬??

	@Column(name = "received_at")
	private LocalDateTime receivedAt; // 李⑤웾 ?섎졊??

	@ManyToOne
	private User user; // ?좎? ?뺣낫

	@ManyToOne
	private Dealer dealer; // ?쒕윭?뺣낫

	@ManyToOne
	private Model model; // 李⑤웾 紐⑤뜽 ?뺣낫

	@OneToMany(mappedBy = "orders", cascade = CascadeType.ALL, orphanRemoval = true)
	@JsonManagedReference
	private List<OrderOption> orderOptions; // ?듭뀡 ?뺣낫

	// 1:1 WaitingOrders (?묐갑??
	@OneToOne(
		mappedBy = "orders",
		cascade = CascadeType.ALL,
		orphanRemoval = true,
		fetch = FetchType.LAZY
	)
	private WaitingOrders waitingOrders;

	@OneToOne(
		cascade = CascadeType.MERGE,
		orphanRemoval = true,
		fetch = FetchType.LAZY
	)
	@JoinColumn(name = "payment_id")
	private Payments payments;

	// 二쇰Ц ???吏곸쟾???먮룞 ?앹꽦
	@PrePersist
	public void prePersist() {
		if (this.merchantUid == null) {
			this.merchantUid = "order_" + UUID.randomUUID().toString().substring(0, 8);
		}
		if (this.bodyNumber == null) {
			this.bodyNumber = "car_" + UUID.randomUUID().toString();
		}
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\enums\OrderStatus.java =====
package com.example.osid.domain.order.enums;

public enum OrderStatus {
	ORDERED, // 二쇰Ц ?묒닔
	CANCELLED, // 二쇰Ц 痍⑥냼
	REFUNDED, // ?섎텋 ?꾨즺
	COMPLETED, // 二쇰Ц ?꾨즺
	FAILED, // 二쇰Ц 泥섎━ ?ㅽ뙣
	IN_PRODUCTION,  // ?앹궛以?
	SHIPPED,         // 異쒓퀬?꾨즺
	RECEIVED        // ?섎졊 ?꾨즺
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\exception\OrderErrorCode.java =====
package com.example.osid.domain.order.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum OrderErrorCode implements BaseCode {

	ORDER_NOT_FOUND(HttpStatus.NOT_FOUND, "ORDER_001", "?대떦 二쇰Ц??李얠쓣 ???놁뒿?덈떎."),
	ORDER_ACCESS_DENIED(HttpStatus.FORBIDDEN, "ORDER_002", "?대떦 二쇰Ц??????묎렐 沅뚰븳???놁뒿?덈떎."),
	ORDER_CANCELLATION_NOT_ALLOWED(HttpStatus.BAD_REQUEST, "ORDER_003", "二쇰Ц? ?꾩옱 ?곹깭?먯꽌 痍⑥냼?????놁뒿?덈떎.");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\exception\OrderException.java =====
package com.example.osid.domain.order.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class OrderException extends CustomException {
	public OrderException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\repository\OrderOptionRepository.java =====
package com.example.osid.domain.order.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.osid.domain.order.entity.OrderOption;

public interface OrderOptionRepository extends JpaRepository<OrderOption, Long> {

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\repository\OrderRepository.java =====
package com.example.osid.domain.order.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.example.osid.domain.order.entity.Orders;

public interface OrderRepository extends JpaRepository<Orders, Long> {

	Optional<Orders> findByMerchantUid(String merchantUid);

	Optional<Orders> findByBodyNumber(String bodyNumber);
	
	@Query("SELECT o FROM Orders o JOIN FETCH o.orderOptions WHERE o.id = :id")
	Optional<Orders> findWithOptionsById(Long id);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\repository\OrderSearch.java =====
package com.example.osid.domain.order.repository;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.example.osid.common.entity.enums.Role;
import com.example.osid.domain.order.entity.Orders;

public interface OrderSearch {
	Page<Orders> findOrderAllForUserOrDealer(Role role, Pageable pageable, Long id);

	Page<Orders> findOrderAllForMaster(Role role, Pageable pageable, List<Long> dealerIds);
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\repository\OrderSearchImpl.java =====
package com.example.osid.domain.order.repository;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;
import org.springframework.stereotype.Repository;

import com.example.osid.common.entity.enums.Role;
import com.example.osid.common.exception.CustomException;
import com.example.osid.common.exception.ErrorCode;
import com.example.osid.config.QuerydslUtils;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.entity.QOrders;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Repository
public class OrderSearchImpl extends QuerydslRepositorySupport implements OrderSearch {

	public OrderSearchImpl(JPAQueryFactory jpaQueryFactory) {
		super(Orders.class);
		this.jpaQueryFactory = jpaQueryFactory;

	}

	private final JPAQueryFactory jpaQueryFactory;

	@Override
	public Page<Orders> findOrderAllForUserOrDealer(Role role, Pageable pageable, Long id) {

		QOrders orders = QOrders.orders;

		BooleanBuilder predicate = new BooleanBuilder();

		switch (role) {
			case USER -> predicate.and(orders.user.id.eq(id)); // ?먯떊??二쇰Ц??嫄댁뿉 ??댁꽌留??꾩껜 議고쉶 媛??

			case DEALER -> predicate.and(orders.dealer.id.eq(id)); // ?먯떊??二쇰Ц??嫄댁뿉 ??댁꽌留??꾩껜 議고쉶 媛??

			default -> throw new CustomException(ErrorCode.FORBIDDEN); // ?뺤쓽?섏? ?딆? ??븷
		}

		List<Orders> pagingOrders = jpaQueryFactory
			.select(orders)
			.from(orders)
			.where(predicate)
			.offset(pageable.getOffset())
			.limit(pageable.getPageSize())
			.orderBy(QuerydslUtils.getSort(pageable, orders))
			.fetch();

		long total = jpaQueryFactory
			.selectFrom(orders)
			.where(predicate)
			.fetchCount();

		return new PageImpl<>(pagingOrders, pageable, total);
	}

	@Override
	public Page<Orders> findOrderAllForMaster(Role role, Pageable pageable, List<Long> dealerIds) {

		QOrders orders = QOrders.orders;

		BooleanBuilder predicate = new BooleanBuilder();

		if (role == Role.MASTER && dealerIds != null && !dealerIds.isEmpty()) {
			predicate.and(orders.dealer.id.in(dealerIds));
		} else {
			return Page.empty(pageable);
		}

		List<Orders> pagingOrders = jpaQueryFactory
			.select(orders)
			.from(orders)
			.where(predicate)
			.offset(pageable.getOffset())
			.limit(pageable.getPageSize())
			.orderBy(QuerydslUtils.getSort(pageable, orders))
			.fetch();

		long total = jpaQueryFactory
			.selectFrom(orders)
			.where(predicate)
			.fetchCount();

		return new PageImpl<>(pagingOrders, pageable, total);
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\order\service\OrderService.java =====
package com.example.osid.domain.order.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.entity.enums.Role;
import com.example.osid.common.exception.CustomException;
import com.example.osid.common.exception.ErrorCode;
import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.dealer.exception.DealerErrorCode;
import com.example.osid.domain.dealer.exception.DealerException;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.history.entity.History;
import com.example.osid.domain.history.repository.HistoryRepository;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.master.exception.MasterErrorCode;
import com.example.osid.domain.master.exception.MasterException;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.model.entity.Model;
import com.example.osid.domain.model.exception.ModelErrorCode;
import com.example.osid.domain.model.exception.ModelException;
import com.example.osid.domain.model.repository.ModelRepository;
import com.example.osid.domain.option.entity.Option;
import com.example.osid.domain.option.exception.OptionErrorCode;
import com.example.osid.domain.option.exception.OptionException;
import com.example.osid.domain.option.repository.OptionRepository;
import com.example.osid.domain.order.dto.request.OrderRequestDto;
import com.example.osid.domain.order.dto.response.OrderDetailResponse;
import com.example.osid.domain.order.dto.response.OrderResponseDto;
import com.example.osid.domain.order.entity.OrderOption;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.enums.OrderStatus;
import com.example.osid.domain.order.exception.OrderErrorCode;
import com.example.osid.domain.order.exception.OrderException;
import com.example.osid.domain.order.repository.OrderRepository;
import com.example.osid.domain.order.repository.OrderSearch;
import com.example.osid.domain.user.entity.User;
import com.example.osid.domain.user.exception.UserErrorCode;
import com.example.osid.domain.user.exception.UserException;
import com.example.osid.domain.user.repository.UserRepository;
import com.example.osid.domain.waitingorder.entity.WaitingOrders;
import com.example.osid.domain.waitingorder.enums.WaitingStatus;
import com.example.osid.domain.waitingorder.exception.WaitingOrderErrorCode;
import com.example.osid.domain.waitingorder.exception.WaitingOrderException;
import com.example.osid.domain.waitingorder.repository.WaitingOrderRepository;
import com.example.osid.event.OrderCompletedMyCarEvent;
import com.example.osid.event.OrderEventPublisher;
import com.example.osid.event.entity.FailedEvent;
import com.example.osid.event.enums.FailedEventType;
import com.example.osid.event.repository.FailedEventRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@RequiredArgsConstructor
public class OrderService {

	private final OrderRepository orderRepository;
	private final OptionRepository optionRepository;
	private final ModelRepository modelRepository;
	private final UserRepository userRepository;
	private final DealerRepository dealerRepository;
	private final OrderSearch orderSearch;
	private final MasterRepository masterRepository;
	private final FailedEventRepository failedEventRepository;
	private final OrderEventPublisher orderEventPublisher;
	private final HistoryRepository historyRepository;
	private final WaitingOrderRepository waitingOrderRepository;

	// 二쇰Ц ?앹꽦
	public OrderResponseDto.Add createOrder(CustomUserDetails customUserDetails, OrderRequestDto.Add requestDto) {
		/*
		 * dealerId濡??쒕윭 媛?몄삤湲?
		 * ?좎? ?대찓?쇰줈 ?좎? 媛?몄삤湲?
		 * ?듭뀡 id 由ъ뒪?몃줈 ?듭뀡?먯꽌 媛?몄삤湲?
		 * 紐⑤뜽 id濡?紐⑤뜽 媛앹껜 媛?몄삤湲?
		 * ?듭뀡由ъ뒪?몃줈 ?듭뀡媛寃?怨꾩궛
		 * 李⑤웾 怨좎쑀踰덊샇 ?앹꽦
		 * 珥?媛寃?怨꾩궛
		 * order 媛앹껜 ?앹꽦
		 * orderoption ?앹꽦
		 * order 媛앹껜 ???
		 * */

		// ?덉쇅泥섎━ refactor
		Dealer dealer = dealerRepository.findByEmailAndIsDeletedFalse(customUserDetails.getEmail())
			.orElseThrow(() -> new DealerException(DealerErrorCode.DEALER_NOT_FOUND));

		User user = userRepository.findByEmailAndIsDeletedFalse(requestDto.getUserEmail())
			.orElseThrow(() -> new UserException(UserErrorCode.USER_NOT_FOUND));

		Model model = modelRepository.findById(requestDto.getModelId())
			.orElseThrow(() -> new ModelException(ModelErrorCode.MODEL_NOT_FOUND));

		List<Option> options = optionRepository.findByIdIn(requestDto.getOption());

		if (options.size() != requestDto.getOption().size()) {
			throw new OptionException(OptionErrorCode.OPTION_NOT_FOUND);
		}

		// 珥?湲덉븸 怨꾩궛
		Long totalPrice = options.stream().mapToLong(Option::getPrice).sum() + model.getPrice();

		Orders orders = Orders.builder()
			.address(requestDto.getAddress())
			.totalPrice(totalPrice)
			.orderStatus(OrderStatus.ORDERED)
			.user(user)
			.dealer(dealer)
			.model(model)
			.build();

		List<OrderOption> orderOptions = options
			.stream()
			.map(option -> new OrderOption(orders, option))
			.toList();

		orders.setOrderOptions(orderOptions);

		Orders saveorder = orderRepository.save(orders);

		// Option ?대쫫留?由ъ뒪?명솕
		// List<String> optionNames = options
		// 	.stream()
		// 	.map(Option::getName)
		// 	.toList();

		List<String> optionNames = changeOptions(saveorder);

		return OrderResponseDto.Add.builder()
			.id(saveorder.getId())
			.model(saveorder.getModel().getName())
			.userId(saveorder.getUser().getId())
			.dealerName(saveorder.getDealer().getName())
			.orderOptions(optionNames)
			.merchantUid(saveorder.getMerchantUid())
			.address(saveorder.getAddress())
			.totalPrice(saveorder.getTotalPrice())
			.orderStatus(saveorder.getOrderStatus())
			.createdAt(saveorder.getCreatedAt())
			.build();

	}

	// 二쇰Ц ?섏젙
	@Transactional("dataTransactionManager")
	public OrderResponseDto.Update updateOrder(CustomUserDetails customUserDetails, Long orderId,
		OrderRequestDto.Update requestDto) {

		// ?덉쇅泥섎━ refactor
		Orders orders = extractOrder(orderId);

		// 寃利?
		validateOrderOwner(orders, customUserDetails, extractRole(customUserDetails));

		if (requestDto.getAddress().isPresent()) {
			orders.setAddress(requestDto.getAddress().get());
		}

		// List<Option> -> List<String>
		List<String> optionNames = changeOptions(orders);

		return OrderResponseDto.Update.builder()
			.id(orders.getId())
			.userName(orders.getUser().getName())
			.model(orders.getModel().getName())
			.dealerName(orders.getDealer().getName())
			.orderOptions(optionNames)
			.address(orders.getAddress())
			.totalPrice(orders.getTotalPrice())
			.orderStatus(orders.getOrderStatus())
			.expectedDeliveryAt(orders.getExpectedDeliveryAt())
			.actualDeliveryAt(orders.getActualDeliveryAt())
			.createdAt(orders.getCreatedAt())
			.build();

	}

	// 二쇰Ц 痍⑥냼 -> 寃곗젣媛 ?쒕?濡?吏꾪뻾?섏? ?딆븯??寃쎌슦?먮쭔
	@Transactional("dataTransactionManager")
	public void cancelOrder(Long orderId) {

		Orders order = extractOrder(orderId);

		WaitingOrders waitingOrders = waitingOrderRepository.findByOrders(order)
			.orElseThrow(() -> new WaitingOrderException(WaitingOrderErrorCode.WAITING_ORDER_NOT_FOUND));

		// ?湲곗뿴???곹깭媛 Waiting???꾨땲硫?二쇰Ц 痍⑥냼 遺덇???
		if (!waitingOrders.getWaitingStatus().equals(WaitingStatus.WAITING)) {
			throw new OrderException(OrderErrorCode.ORDER_CANCELLATION_NOT_ALLOWED);
		}

		order.setOrderStatus(OrderStatus.FAILED);
	}

	// 二쇰Ц ?④굔議고쉶
	public OrderDetailResponse findOrder(CustomUserDetails customUserDetails, Long orderId) {

		// ?덉쇅泥섎━ refactor
		Orders orders = extractOrder(orderId);

		// List<Option> -> List<String>
		List<String> optionNames = changeOptions(orders);

		// role媛?媛?몄삤湲?
		Role role = extractRole(customUserDetails);

		// 寃利?
		validateOrderOwner(orders, customUserDetails, role);

		// List<OrderDetailResponse.ProcessStep> processSteps = buildProcessSteps(role, orders);

		// ?앹궛???ㅼ뼱媛吏 ?딆쓣 寃쎌슦 processStep? 鍮?由ъ뒪??諛섑솚
		List<OrderDetailResponse.ProcessStep> processSteps = historyRepository.findByBodyNumber(orders.getBodyNumber())
			.map(h -> buildProcessSteps(role, orders, h))
			.orElse(Collections.emptyList());

		return OrderDetailResponse.of(orders, processSteps);

	}

	// 二쇰Ц ?꾩껜 議고쉶
	public Page<OrderResponseDto.FindAll> findAllOrder(
		CustomUserDetails customUserDetails, Pageable pageable) {

		// role 媛?媛?몄삤湲?
		Role role = extractRole(customUserDetails);

		if (role.equals(Role.MASTER)) {

			// ?먭린媛 愿由ы븯???쒕윭??二쇰Ц嫄대쭔 議고쉶 媛?ν븯?꾨줉 ?섏젙
			Master master = masterRepository.findByEmailAndIsDeletedFalse(customUserDetails.getEmail())
				.orElseThrow(() -> new MasterException(MasterErrorCode.MASTER_NOT_FOUND));

			List<Long> dealerIds = dealerRepository.findByMasterAndIsDeletedFalse(master)
				.stream()
				.map(dealer -> dealer.getId())
				.toList();

			return orderSearch.findOrderAllForMaster(role, pageable, dealerIds).map(
				order -> new OrderResponseDto.FindAll(
					order.getId(),
					order.getUser().getName(),
					order.getDealer().getName(),
					order.getModel().getName())
			);

		} else {
			// ?좎? ?쒕윭???꾩껜 二쇰Ц 議고쉶
			return orderSearch.findOrderAllForUserOrDealer(
					role, pageable, customUserDetails.getId())
				.map(order -> new OrderResponseDto.FindAll(
					order.getId(),
					order.getUser().getName(),
					order.getDealer().getName(),
					order.getModel().getName())
				);

		}

	}

	// 二쇰Ц ??젣
	@Transactional("dataTransactionManager")
	public void deleteOrder(CustomUserDetails customUserDetails, Long orderId) {

		// ?덉쇅泥섎━ refactor
		Orders orders = extractOrder(orderId);

		WaitingOrders waitingOrders = waitingOrderRepository.findByOrders(orders)
			.orElseThrow(() -> new WaitingOrderException(WaitingOrderErrorCode.WAITING_ORDER_NOT_FOUND));

		// ?湲곗뿴???곹깭媛 Waiting???꾨땲硫?二쇰Ц 痍⑥냼 遺덇???
		if (!waitingOrders.getWaitingStatus().equals(WaitingStatus.WAITING)) {
			throw new OrderException(OrderErrorCode.ORDER_CANCELLATION_NOT_ALLOWED);
		}

		// 寃利?
		validateOrderOwner(orders, customUserDetails, extractRole(customUserDetails));

		orderRepository.delete(orders);

	}

	// 異쒓퀬?꾨즺 ?곹깭 蹂寃?諛?異쒓퀬?꾨즺???좎쭨 ?앹꽦
	@Transactional("dataTransactionManager")
	public void changeShipped(CustomUserDetails customUserDetails, Long orderId) {

		Orders orders = extractOrder(orderId);

		validateOrderOwner(orders, customUserDetails, extractRole(customUserDetails));

		orders.setOrderStatus(OrderStatus.SHIPPED);

		orders.setActualDeliveryAt(LocalDateTime.now());

		// orderRepository.save(orders);

		// 二쇰Ц ?꾨즺 ?대깽??硫붿떆吏 ?앹꽦
		OrderCompletedMyCarEvent event = new OrderCompletedMyCarEvent(orderId);
		try {
			//硫붿떆吏 ?먮줈 ?꾩넚
			orderEventPublisher.publishOrderCompletedMyCar(event);
		} catch (Exception e) {
			// ?ㅽ뙣 ?대깽?????
			failedEventRepository.save(
				new FailedEvent(event.getOrderId(),
					0,
					e.getMessage(),
					FailedEventType.MY_CAR));
		}

	}

	// ?섎졊 ?꾨즺 ?곹깭 蹂寃?
	@Transactional("dataTransactionManager")
	public void changeReceived(CustomUserDetails customUserDetails, Long orderId) {

		Orders orders = extractOrder(orderId);

		validateOrderOwner(orders, customUserDetails, extractRole(customUserDetails));

		orders.setOrderStatus(OrderStatus.RECEIVED);

		orders.setReceivedAt(LocalDateTime.now());

		// orderRepository.save(orders);

	}

	// role 媛?몄삤湲?
	private Role extractRole(CustomUserDetails customUserDetails) {

		Collection<? extends GrantedAuthority> grantedAuthorities = customUserDetails.getAuthorities();

		// ?덉쇅泥섎━ refactor
		String authorityString = grantedAuthorities.stream()
			.findFirst()
			.map(GrantedAuthority::getAuthority)
			.orElseThrow(() -> new CustomException(ErrorCode.AUTHORITY_NOT_FOUND));

		Role role = Role.valueOf(authorityString.replace("ROLE_", ""));

		return role;
	}

	// 寃利?
	private void validateOrderOwner(Orders orders, CustomUserDetails userDetails, Role role) {
		Long id = userDetails.getId();

		// ?덉쇅泥섎━ refactor
		switch (role) {
			case USER -> {
				if (!orders.getUser().getId().equals(id)) {
					throw new OrderException(OrderErrorCode.ORDER_ACCESS_DENIED);
				}
			}

			case DEALER -> {
				if (!orders.getDealer().getId().equals(id)) {
					throw new OrderException(OrderErrorCode.ORDER_ACCESS_DENIED);
				}
			}

			case MASTER -> {
				if (!orders.getDealer().getMaster().getId().equals(id)) {
					throw new OrderException(OrderErrorCode.ORDER_ACCESS_DENIED);
				}
			}

			default -> throw new CustomException(ErrorCode.FORBIDDEN);

		}
	}

	// ?덉쇅泥섎━ 諛?order 媛앹껜 諛섑솚 硫붿냼?쒗솕(Refactor)
	private Orders extractOrder(Long orderId) {

		Orders orders = orderRepository.findById(orderId)
			.orElseThrow(() -> new OrderException(OrderErrorCode.ORDER_NOT_FOUND));

		return orders;
	}

	// List<Option> -> List<String>
	private List<String> changeOptions(Orders orders) {

		return orders.getOrderOptions().stream()
			.map(OrderOption::getOption)
			.map(Option::getName)
			.toList();

	}

	// processStep??鍮뚮뱶?섎뒗 硫붿냼??
	private List<OrderDetailResponse.ProcessStep> buildProcessSteps(Role role, Orders orders, History history) {
		WaitingOrders waitingOrders = waitingOrderRepository.findByOrders(orders)
			.orElseThrow(() -> new WaitingOrderException(WaitingOrderErrorCode.WAITING_ORDER_NOT_FOUND));

		// History history = historyRepository.findByBodyNumber(orders.getBodyNumber())
		// 	.orElseThrow(() -> new HistoryException(HistoryErrorCode.HISTORY_NOT_FOUND));

		List<OrderDetailResponse.ProcessStep> steps = new ArrayList<>();

		LocalDateTime base = waitingOrders.getUpdatedAt(); // 湲곗? ?쒖옉??

		steps.add(OrderDetailResponse.ProcessStep.from("二쇰Ц", orders.getCreatedAt(),
			waitingOrders.getCreatedAt()));
		steps.add(OrderDetailResponse.ProcessStep.from("?앹궛?湲?, waitingOrders.getCreatedAt(),
			waitingOrders.getUpdatedAt()));

		double total = history.getTotalDuration().doubleValue();
		List<Integer> time = hourMin(total);
		LocalDateTime expectedAt = base.plusHours(time.get(0)).plusMinutes(time.get(1)).plusDays(8);

		if (role.equals(Role.USER)) {
			steps.add(OrderDetailResponse.ProcessStep.from("?앹궛以?, waitingOrders.getUpdatedAt(),
				expectedAt));
			// 異쒓퀬 ?④퀎
			steps.add(OrderDetailResponse.ProcessStep.from(
				"異쒓퀬以鍮?,
				expectedAt,
				expectedAt.plusDays(8)
			));
			steps.add(OrderDetailResponse.ProcessStep.from(
				"異쒓퀬 ?꾨즺",
				orders.getActualDeliveryAt(),
				orders.getActualDeliveryAt()
			));
			steps.add(OrderDetailResponse.ProcessStep.from(
				"?섎졊 ?꾨즺",
				orders.getReceivedAt(),
				orders.getReceivedAt()
			));

			return steps;

		}

		// 愿由ъ옄??怨듭젙?④퀎
		Map<String, Double> stageDurationMap = Map.of(
			"?꾨젅??, history.getStage1().doubleValue(),
			"李⑥껜", history.getStage2().doubleValue(),
			"?꾩옣", history.getStage3().doubleValue(),
			"?섏옣", history.getStage4().doubleValue(),
			"寃??, history.getStage5().doubleValue()
		);

		LocalDateTime current = base;

		for (Map.Entry<String, Double> entry : stageDurationMap.entrySet()) {

			List<Integer> admintime = hourMin(entry.getValue());

			LocalDateTime end = current.plusHours(admintime.get(0)).plusMinutes(admintime.get(1));

			if (entry.getKey().equals("?꾨젅??)) {
				end = end.plusDays(8);
			}

			steps.add(OrderDetailResponse.ProcessStep.from(
				entry.getKey(),
				current,
				end
			));

			current = end;
		}
		// 異쒓퀬 ?④퀎
		steps.add(OrderDetailResponse.ProcessStep.from(
			"異쒓퀬以鍮?,
			current,
			current.plusDays(8)
		));
		steps.add(OrderDetailResponse.ProcessStep.from(
			"異쒓퀬 ?꾨즺",
			orders.getActualDeliveryAt(),
			orders.getActualDeliveryAt()
		));
		steps.add(OrderDetailResponse.ProcessStep.from(
			"?섎졊 ?꾨즺",
			orders.getReceivedAt(),
			orders.getReceivedAt()
		));

		return steps;
	}

	private List<Integer> hourMin(double duration) {
		int hours = (int)duration;
		int minutes = (int)((duration - hours) * 60);

		List<Integer> hours1 = List.of(hours, minutes);

		return hours1;

	}

}


===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\payment\controller\PaymentController.java =====
package com.example.osid.domain.payment.controller;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.response.CommonResponse;
import com.example.osid.domain.payment.dto.PaymentRequestDto;
import com.example.osid.domain.payment.service.PaymentService;
import com.siot.IamportRestClient.IamportClient;
import com.siot.IamportRestClient.exception.IamportResponseException;
import com.siot.IamportRestClient.response.IamportResponse;
import com.siot.IamportRestClient.response.Payment;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequiredArgsConstructor
@Slf4j
@RequestMapping("api/payment")
public class PaymentController {

	@Value("${IMP_API_KEY}")
	private String apiKey;

	@Value("${imp.api.secretkey}")
	private String secretKey;

	private IamportClient iamportClient;

	private final PaymentService paymentService;

	@PostConstruct
	public void init() {
		this.iamportClient = new IamportClient(apiKey, secretKey);
	}

	@PostMapping("/{imp_uid}")
	public IamportResponse<Payment> validateIamport(@PathVariable("imp_uid") String impUid,
		@RequestBody PaymentRequestDto.Paid request) throws IamportResponseException, IOException {

		IamportResponse<Payment> payment = iamportClient.paymentByImpUid(impUid);

		log.info("寃곗젣 ?붿껌 ?묐떟. 寃곗젣 ?댁뿭 - 二쇰Ц 踰덊샇: {}", payment.getResponse().getMerchantUid());

		// 寃곗젣 ?꾨즺 泥섎━ ?? merchantUid濡?二쇰Ц 議고쉶?댁꽌 ?곌?愿怨??곌껐 媛??
		paymentService.processPaymentDone(request, payment);

		return payment;
	}

	@PostMapping("/cancel")
	public CommonResponse<Void> createPayment(@RequestBody PaymentRequestDto.Cancel cancelReq) throws
		IamportResponseException,
		IOException {
		paymentService.cancelReservation(cancelReq);
		return CommonResponse.ok();
	}

	// @GetMapping("/manualreview")
	// public CommonResponse<PaymentResponseDto.ManualReview> findManualReview(
	// 	@PageableDefault(size = 10, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable
	// ) {
	// 	paymentService.findManaulReview(pageable);
	// }

}

===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\payment\dto\PaymentRequestDto.java =====
package com.example.osid.domain.payment.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

public class PaymentRequestDto {

	@Getter
	@Setter
	@NoArgsConstructor
	@AllArgsConstructor
	public static class Paid {

		private String impUid; // ?꾩엫?ы듃 寃곗젣 怨좎쑀 踰덊샇

		private String merchantUid; // 二쇰Ц 怨좎쑀 踰덊샇 (Order.merchantUid)

		private Long amount; // 寃곗젣 湲덉븸

		private Long userId;

	}

	@Getter
	@Setter
	@NoArgsConstructor
	@AllArgsConstructor
	public static class Cancel {

		private String merchantUid; // 二쇰Ц 怨좎쑀 踰덊샇 (Order.merchantUid)

		private int refundAmount; // 寃곗젣 湲덉븸

	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\payment\dto\PaymentResponseDto.java =====
package com.example.osid.domain.payment.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

public class PaymentResponseDto {

	@Getter
	@Setter
	@NoArgsConstructor
	@AllArgsConstructor
	public static class ManualReview {

		private String merchantUid; // 二쇰Ц 怨좎쑀 踰덊샇 (Order.merchantUid)

		private Long amount; // 寃곗젣 湲덉븸

		private Long userId;

	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\payment\entity\Payments.java =====
package com.example.osid.domain.payment.entity;

import java.time.LocalDate;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.domain.payment.enums.PaymentStatus;
import com.example.osid.domain.user.entity.User;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "payments")
public class Payments extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	private String impUid;

	@Enumerated(EnumType.STRING)
	private PaymentStatus paymentStatus; // 寃곗젣 ?곹깭

	@Column(nullable = false)
	private LocalDate paidAt; // 寃곗젣??

	@Column(nullable = false)
	private Long amount; // 吏遺덉븸

	@ManyToOne(fetch = FetchType.LAZY)
	private User user;

	public Payments(User user, Long amount, String impUid, PaymentStatus paymentStatus,
		LocalDate paidAt) {
		this.user = user;
		this.amount = amount;
		this.impUid = impUid;
		this.paymentStatus = paymentStatus;
		this.paidAt = paidAt;
	}

	public void changePaymentBySuccess(PaymentStatus paymentStatus) {
		this.paymentStatus = paymentStatus;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\payment\enums\PaymentStatus.java =====
package com.example.osid.domain.payment.enums;

public enum PaymentStatus {
	READY,
	PAID, // 寃곗젣 ?꾨즺
	FAILED, // 寃곗젣 ?ㅽ뙣
	CANCELLED, // 寃곗젣 痍⑥냼
	REFUNDED, // ?섎텋 ?꾨즺
	MANUAL_REVIEW
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\payment\exception\PaymentErrorCode.java =====
package com.example.osid.domain.payment.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum PaymentErrorCode implements BaseCode {
	PAYMENT_NOT_FOUND(HttpStatus.NOT_FOUND, "PAYMENT_001", "?대떦 寃곗젣瑜?李얠쓣 ???놁뒿?덈떎."),
	PAYMENT_AMOUNT_MISMATCH(HttpStatus.BAD_REQUEST, "PAYMENT_002", "寃곗젣 湲덉븸???쇱튂?섏? ?딆뒿?덈떎."),
	PAYMENT_REFUND_TOO_LARGE(HttpStatus.BAD_REQUEST, "PAYMENT_003", "?섎텋 湲덉븸??寃곗젣 湲덉븸??珥덇낵?⑸땲??");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\payment\exception\PaymentException.java =====
package com.example.osid.domain.payment.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class PaymentException extends CustomException {
	public PaymentException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\payment\repository\PaymentRepository.java =====
package com.example.osid.domain.payment.repository;

import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

import com.example.osid.domain.payment.entity.Payments;
import com.example.osid.domain.payment.enums.PaymentStatus;

public interface PaymentRepository extends JpaRepository<Payments, Long> {

	Optional<Payments> findByImpUid(String impUid);

	boolean existsByImpUidAndPaymentStatus(String impUid, PaymentStatus paymentStatus);

	Page<Payments> findByPaymentStatus(Pageable pageable, PaymentStatus paymentStatus);

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\payment\service\PaymentService.java =====
package com.example.osid.domain.payment.service;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.domain.order.dto.OrderPaidEvent;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.enums.OrderStatus;
import com.example.osid.domain.order.exception.OrderErrorCode;
import com.example.osid.domain.order.exception.OrderException;
import com.example.osid.domain.order.repository.OrderRepository;
import com.example.osid.domain.payment.dto.PaymentRequestDto;
import com.example.osid.domain.payment.entity.Payments;
import com.example.osid.domain.payment.enums.PaymentStatus;
import com.example.osid.domain.payment.exception.PaymentErrorCode;
import com.example.osid.domain.payment.exception.PaymentException;
import com.example.osid.domain.payment.repository.PaymentRepository;
import com.example.osid.domain.user.entity.User;
import com.example.osid.domain.user.exception.UserErrorCode;
import com.example.osid.domain.user.exception.UserException;
import com.example.osid.domain.user.repository.UserRepository;
import com.example.osid.domain.waitingorder.entity.WaitingOrders;
import com.example.osid.domain.waitingorder.enums.WaitingStatus;
import com.example.osid.domain.waitingorder.exception.WaitingOrderErrorCode;
import com.example.osid.domain.waitingorder.exception.WaitingOrderException;
import com.example.osid.domain.waitingorder.repository.WaitingOrderRepository;
import com.siot.IamportRestClient.IamportClient;
import com.siot.IamportRestClient.exception.IamportResponseException;
import com.siot.IamportRestClient.request.CancelData;
import com.siot.IamportRestClient.response.IamportResponse;
import com.siot.IamportRestClient.response.Payment;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class PaymentService {

	private final OrderRepository orderRepository;
	private final PaymentRepository paymentRepository;
	private final UserRepository userRepository;
	private final ApplicationEventPublisher eventPublisher;
	private final WaitingOrderRepository waitingOrderRepository;

	@Value("${IMP_API_KEY}")
	private String apiKey;

	@Value("${imp.api.secretkey}")
	private String secretKey;

	private IamportClient iamportClient;

	@PostConstruct
	public void init() {
		this.iamportClient = new IamportClient(apiKey, secretKey);
	}

	private static final int FULL_REFUND = 0;

	// 寃곗젣 ?깃났 泥섎━
	@Transactional("dataTransactionManager")
	public void processPaymentDone(PaymentRequestDto.Paid request, IamportResponse<Payment> payment) throws
		IamportResponseException,
		IOException {

		Payment iamportPayment = payment.getResponse();
		String impUid = request.getImpUid();
		String merchantUid = request.getMerchantUid();
		Long userId = request.getUserId();
		Long totalPrice = request.getAmount();

		// ?대? Paid 泥섎━??impUid 寃쎌슦 諛붾줈 由ы꽩(硫깅벑??泥댄겕)
		if (paymentRepository.existsByImpUidAndPaymentStatus(request.getImpUid(), PaymentStatus.PAID)) {
			log.info("duplicate callback ignored: {}", request.getImpUid());
			return;
		}

		// orders ?뚯씠釉붿뿉???ㅻ뜑 ?곹깭 蹂??
		Orders currentOrder = orderRepository.findByMerchantUid(merchantUid)
			.orElseThrow(() -> new OrderException(OrderErrorCode.ORDER_NOT_FOUND));

		// Payment ?뚯씠釉붿뿉 ??ν븷 User 媛앹껜
		User user = userRepository.findById(userId)
			.orElseThrow(() -> new UserException(UserErrorCode.USER_NOT_FOUND));

		// 二쇰Ц???곹뭹?ㅼ뿉 ???媛곴컖 寃곗젣?댁뿭 ???
		Payments savePayments = createPaymentHistory(user, totalPrice, PaymentStatus.READY, impUid);
		currentOrder.setPayments(savePayments);

		// 1李?寃利?
		validatedAmount(totalPrice, iamportPayment.getAmount().longValue(), payment, savePayments);

		// 2李?寃利?
		validatedAmount(totalPrice, currentOrder.getTotalPrice(), payment, savePayments);

		currentOrder.setOrderStatus(OrderStatus.COMPLETED);

		savePayments.changePaymentBySuccess(PaymentStatus.PAID);

		eventPublisher.publishEvent(new OrderPaidEvent(currentOrder.getId()));

	}

	// 寃곗젣?댁뿭 ?뚯씠釉???ν븯??硫붿꽌??
	private Payments createPaymentHistory(User user, Long totalPrice, PaymentStatus paymentStatus,
		String impUid) {
		Payments payments = new Payments(user, totalPrice, impUid, paymentStatus, LocalDate.now());
		Payments savePayments = paymentRepository.save(payments);

		return savePayments;
	}

	//
	private void validatedAmount(Long totalPrice, Long amount, IamportResponse<Payment> payment,
		Payments savePayments) throws IamportResponseException, IOException {
		if (!totalPrice.equals(amount)) {
			savePayments.changePaymentBySuccess(PaymentStatus.FAILED);

			CancelData cancelData = createCancelData(payment, FULL_REFUND);

			// iamportClient.cancelPaymentByImpUid(cancelData);

			safelyCancelPayment(payment, FULL_REFUND, savePayments);

			throw new PaymentException(PaymentErrorCode.PAYMENT_AMOUNT_MISMATCH);
		}
	}

	// 寃곗젣 ?섎텋
	@Transactional("dataTransactionManager")
	public void cancelReservation(PaymentRequestDto.Cancel cancelReq) throws IamportResponseException, IOException {

		Orders currentOrder = orderRepository.findByMerchantUid(cancelReq.getMerchantUid())
			.orElseThrow(() -> new OrderException(OrderErrorCode.ORDER_NOT_FOUND));

		WaitingOrders waitingOrders = waitingOrderRepository.findByOrders(currentOrder)
			.orElseThrow(() -> new WaitingOrderException(WaitingOrderErrorCode.WAITING_ORDER_NOT_FOUND));

		// ?湲곗뿴???곹깭媛 Waiting???꾨땲硫?二쇰Ц 痍⑥냼 遺덇???
		if (!waitingOrders.getWaitingStatus().equals(WaitingStatus.WAITING)) {
			throw new OrderException(OrderErrorCode.ORDER_CANCELLATION_NOT_ALLOWED);
		}

		IamportResponse<Payment> response = iamportClient.paymentByImpUid(currentOrder.getPayments().getImpUid());

		Payment iamportPayment = response.getResponse();

		// ??媛믪쓣 鍮꾧탳?댁꽌 ?욎씠 ?щ㈃ 1 媛숈쑝硫?0 ?묒쑝硫?-1 諛섑솚
		// ?섎텋 湲덉븸??寃곗젣 湲덉븸蹂대떎 ??媛믪씠 ?ㅼ뼱?ㅻ뒗 寃껋쓣 諛⑹??섍린 ?꾪븿
		if (BigDecimal.valueOf(cancelReq.getRefundAmount())
			.compareTo(iamportPayment.getAmount()) > 0) {
			throw new PaymentException(PaymentErrorCode.PAYMENT_REFUND_TOO_LARGE);
		}

		//cancelData ?앹꽦
		CancelData cancelData = createCancelData(response, cancelReq.getRefundAmount());

		Payments payments = paymentRepository.findByImpUid(currentOrder.getPayments().getImpUid())
			.orElseThrow(() -> new PaymentException(PaymentErrorCode.PAYMENT_NOT_FOUND));

		//寃곗젣 痍⑥냼
		// iamportClient.cancelPaymentByImpUid(cancelData);
		safelyCancelPayment(response, cancelReq.getRefundAmount(), payments);

		payments.changePaymentBySuccess(PaymentStatus.REFUNDED);

		currentOrder.setOrderStatus(OrderStatus.REFUNDED);

		waitingOrderRepository.delete(waitingOrders);

	}

	// 痍⑥냼 ?곗씠???앹꽦
	private CancelData createCancelData(IamportResponse<Payment> payment, int refundAmount) {
		if (refundAmount == 0) { //?꾩븸 ?섎텋??寃쎌슦
			return new CancelData(payment.getResponse().getImpUid(), true);
		}
		//遺遺??섎텋??寃쎌슦 checksum???낅젰??以??
		return new CancelData(payment.getResponse().getImpUid(), true, new BigDecimal(refundAmount));

	}

	// ?섎텋 ?ㅽ뙣 ?鍮?
	private void safelyCancelPayment(IamportResponse<Payment> payment, int refundAmount, Payments payments) {
		try {
			iamportClient.cancelPaymentByImpUid(createCancelData(payment, refundAmount));
		} catch (IamportResponseException | IOException ex) {
			log.error("?꾩엫?ы듃 痍⑥냼 ?ㅽ뙣 impUid={}, refund={}, msg={}",
				payment, refundAmount, ex.getMessage(), ex);

			// ?ㅽ뙣 ??寃곗젣?댁뿭???섎룞泥섎━ ?뚮옒洹?湲곕줉(?댁쁺??媛쒖엯 ?꾩슂)
			payments.changePaymentBySuccess(PaymentStatus.MANUAL_REVIEW);
			return;
		}
	}

	// public Page<PaymentResponseDto.ManualReview> findManaulReview(Pageable pageable) {
	//
	// 	Page<Payments> payments = paymentRepository.findbyPaymentStatus(pageable, PaymentStatus.MANUAL_REVIEW);
	//
	// 	return payments
	// 		.stream()
	// 		.map(payment ->
	// 			new PaymentResponseDto(
	// 				payment.getUser().getId(),
	// 				payment.getAmount(),
	// 				orderRepository.findByPayments(payment)
	// 					.orElseThrow(() -> new OrderException(OrderErrorCode.ORDER_NOT_FOUND))
	// 			));
	// }

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\controller\UserController.java =====
package com.example.osid.domain.user.controller;

import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.response.CommonResponse;
import com.example.osid.domain.user.dto.request.UserDeletedRequestDto;
import com.example.osid.domain.user.dto.request.UserSignUpRequestDto;
import com.example.osid.domain.user.dto.request.UserUpdatedRequestDto;
import com.example.osid.domain.user.dto.response.FindbyUserResponseDto;
import com.example.osid.domain.user.service.UserService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
public class UserController {
	private final UserService userService;

	@PostMapping("/signup")
	@ResponseStatus(HttpStatus.CREATED)
	public CommonResponse<Void> signUpUser(@RequestBody @Valid UserSignUpRequestDto userSignUpRequestDto) {
		userService.signUpUser(userSignUpRequestDto);
		return CommonResponse.created();
	}

	@GetMapping("/me")
	public CommonResponse<FindbyUserResponseDto> findByUser(
		@AuthenticationPrincipal CustomUserDetails customUserDetails
	) {
		FindbyUserResponseDto me = userService.findbyUser(customUserDetails);
		return CommonResponse.ok(me);
	}

	@PatchMapping("/me")
	public CommonResponse<Void> updatedUser(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@Valid @RequestBody UserUpdatedRequestDto userUpdatedRequestDto
	) {
		userService.updatedUser(customUserDetails, userUpdatedRequestDto);
		return CommonResponse.ok();
	}

	@DeleteMapping("/me")
	public CommonResponse<Void> deletedUser(
		@AuthenticationPrincipal CustomUserDetails customUserDetails,
		@Valid @RequestBody UserDeletedRequestDto userDeletedRequestDto
	) {
		userService.deletedUser(customUserDetails, userDeletedRequestDto);
		return CommonResponse.ok();
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\dto\request\UserDeletedRequestDto.java =====
package com.example.osid.domain.user.dto.request;

import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;

@Getter
public class UserDeletedRequestDto {

	@NotEmpty(message = "鍮꾨?踰덊샇???꾩닔?낅땲??")
	@Pattern(
		regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,}$",
		message = "鍮꾨?踰덊샇???곷Ц ??뚮Ц?? ?レ옄, ?뱀닔臾몄옄瑜??ы븿??8???댁긽?댁뼱???⑸땲??"
	)
	private String password;

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\dto\request\UserSignUpRequestDto.java =====
package com.example.osid.domain.user.dto.request;

import java.time.LocalDate;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;

@Getter
public class UserSignUpRequestDto {

	@Email
	@NotEmpty(message = "?대찓?쇱? ?꾩닔?낅땲??")
	private String email;

	@NotEmpty(message = "鍮꾨?踰덊샇???꾩닔?낅땲??")
	@Pattern(
		regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,}$",
		message = "鍮꾨?踰덊샇???곷Ц ??뚮Ц?? ?レ옄, ?뱀닔臾몄옄瑜??ы븿??8???댁긽?댁뼱???⑸땲??"
	)
	private String password;

	@NotEmpty(message = "?대쫫? ?꾩닔?낅땲??")
	private String name;

	@NotNull(message = "?앸뀈?붿씪? ?꾩닔?낅땲??")
	@PastOrPresent(message = "?앸뀈?붿씪? ?꾩옱 ?좎쭨蹂대떎 怨쇨굅?ъ빞 ?⑸땲??") // ?좎쭨媛 怨쇨굅 ?먮뒗 ?ㅻ뒛?댁뼱???쒕떎??異붽? 寃利?
	private LocalDate dateOfBirth; // ?앸뀈?붿씪

	@NotEmpty(message = "?꾪솕踰덊샇???꾩닔?낅땲??")
	@Pattern(regexp = "^010-[0-9]{4}-[0-9]{4}$", message = "?꾪솕踰덊샇??010-xxxx-xxxx ?뺤떇?댁뼱???⑸땲??")
	private String phoneNumber;

	@NotEmpty(message = "二쇱냼???꾩닔?낅땲??")
	private String address;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\dto\request\UserUpdatedRequestDto.java =====
package com.example.osid.domain.user.dto.request;

import jakarta.validation.constraints.Pattern;
import lombok.Getter;

@Getter
public class UserUpdatedRequestDto {

	private String name;

	@Pattern(regexp = "^010-[0-9]{4}-[0-9]{4}$", message = "?꾪솕踰덊샇??010-xxxx-xxxx ?뺤떇?댁뼱???⑸땲??")
	private String phoneNumber;

	private String address;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\dto\response\FindbyUserResponseDto.java =====
package com.example.osid.domain.user.dto.response;

import java.time.LocalDate;

import lombok.Getter;

@Getter
public class FindbyUserResponseDto {
	private Long id;
	private String email;
	private String name;
	private LocalDate dateOfBirth;
	private String phoneNumber;
	private String address;

	public FindbyUserResponseDto(
		Long id,
		String email,
		String name,
		LocalDate dateOfBirth,
		String phoneNumber,
		String address
	) {
		this.id = id;
		this.email = email;
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.phoneNumber = phoneNumber;
		this.address = address;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\entity\User.java =====
package com.example.osid.domain.user.entity;

import java.time.LocalDate;
import java.time.LocalDateTime;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.common.entity.enums.Role;
import com.example.osid.domain.user.dto.request.UserUpdatedRequestDto;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@Entity
@Getter
@Table(name = "users")
@AllArgsConstructor
@NoArgsConstructor
public class User extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(nullable = false, unique = true)
	private String email; //?대찓??

	@Column(nullable = false)
	private String password; //鍮꾨?踰덊샇

	@Column(nullable = false)
	private String name; //?대쫫

	@Column(nullable = false)
	private LocalDate dateOfBirth; //?앸뀈?붿씪

	@Column(nullable = false)
	private String phoneNumber; //?꾪솕踰덊샇

	@Column(nullable = false)
	private String address; //二쇱냼

	@Column(nullable = false)
	@Builder.Default
	@Enumerated(EnumType.STRING)
	private Role role = Role.USER;

	@Column(nullable = false)
	@Builder.Default
	private boolean isDeleted = false;

	// null ?덉슜: ??젣 ?꾩뿉??null
	private LocalDateTime deletedAt;

	public User(
		String email,
		String password,
		String name,
		LocalDate dateOfBirth,
		String phoneNumber,
		String address) {
		this.email = email;
		this.password = password;
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.phoneNumber = phoneNumber;
		this.address = address;
	}

	public void updatedUser(UserUpdatedRequestDto userUpdatedRequestDto) {
		if (userUpdatedRequestDto.getName() != null) {
			this.name = userUpdatedRequestDto.getName();
		}
		if (userUpdatedRequestDto.getPhoneNumber() != null) {
			this.phoneNumber = userUpdatedRequestDto.getPhoneNumber();
		}
		if (userUpdatedRequestDto.getAddress() != null) {
			this.address = userUpdatedRequestDto.getAddress();
		}
	}

	// ?뚰봽???쒕━?? isDeleted = true, deletedAt = ?꾩옱 ?쒓컖
	public void softDeletedUser() {
		this.isDeleted = true;
		this.deletedAt = LocalDateTime.now();
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\exception\UserErrorCode.java =====
package com.example.osid.domain.user.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum UserErrorCode implements BaseCode {
	USER_INVALID_PASSWORD(HttpStatus.BAD_REQUEST, "USER_001", "?ъ슜??鍮꾨?踰덊샇媛 ?쇱튂?섏? ?딆뒿?덈떎."),
	USER_NOT_FOUND(HttpStatus.NOT_FOUND, "USER_002", "?ъ슜?먮? 李얠쓣 ???놁뒿?덈떎.");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\exception\UserException.java =====
package com.example.osid.domain.user.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class UserException extends CustomException {
	public UserException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\repository\UserRepository.java =====
package com.example.osid.domain.user.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.osid.domain.user.entity.User;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {

	// email濡??좎? 寃??
	Optional<User> findByEmail(String email);

	// ??젣?섏? ?딅뒗 User 議고쉶
	Optional<User> findByEmailAndIsDeletedFalse(String email);

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\user\service\UserService.java =====
package com.example.osid.domain.user.service;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.auth.EmailValidator;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.user.dto.request.UserDeletedRequestDto;
import com.example.osid.domain.user.dto.request.UserSignUpRequestDto;
import com.example.osid.domain.user.dto.request.UserUpdatedRequestDto;
import com.example.osid.domain.user.dto.response.FindbyUserResponseDto;
import com.example.osid.domain.user.entity.User;
import com.example.osid.domain.user.exception.UserErrorCode;
import com.example.osid.domain.user.exception.UserException;
import com.example.osid.domain.user.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserService {

	private final UserRepository userRepository;
	private final DealerRepository dealerRepository;
	private final MasterRepository masterRepository;
	private final PasswordEncoder passwordEncoder;
	private final EmailValidator emailValidator;

	public void signUpUser(UserSignUpRequestDto userSignUpRequestDto) {

		// 怨듯넻???대찓?쇱씠 ?덈뒗吏 ?뺤씤 ( Master, Dealer, User )
		emailValidator.validateDuplicateEmail(userSignUpRequestDto.getEmail());

		String encodedPassword = passwordEncoder.encode(userSignUpRequestDto.getPassword());

		// User user = new User(
		// 	userSignUpRequestDto.getEmail(),
		// 	encodedPassword,
		// 	userSignUpRequestDto.getName(),
		// 	userSignUpRequestDto.getDateOfBirth(),
		// 	userSignUpRequestDto.getPhoneNumber(),
		// 	userSignUpRequestDto.getAddress()
		// );

		User user = User.builder()
			.email(userSignUpRequestDto.getEmail())
			.password(encodedPassword)
			.name(userSignUpRequestDto.getName())
			.dateOfBirth(userSignUpRequestDto.getDateOfBirth())
			.phoneNumber(userSignUpRequestDto.getPhoneNumber())
			.address(userSignUpRequestDto.getAddress())
			.build();

		userRepository.save(user);
	}

	public FindbyUserResponseDto findbyUser(CustomUserDetails customUserDetails) {
		User user = verifyActiveUser(customUserDetails.getEmail());

		return new FindbyUserResponseDto(
			user.getId(),
			user.getEmail(),
			user.getName(),
			user.getDateOfBirth(),
			user.getPhoneNumber(),
			user.getAddress()
		);
	}

	@Transactional("dataTransactionManager")
	public void updatedUser(
		CustomUserDetails customUserDetails,
		UserUpdatedRequestDto userUpdatedRequestDto
	) {
		User user = verifyUser(customUserDetails.getId());
		user.updatedUser(userUpdatedRequestDto);
	}

	@Transactional("dataTransactionManager")
	public void deletedUser(
		CustomUserDetails customUserDetails,
		UserDeletedRequestDto userDeletedRequestDto
	) {
		User user = verifyActiveUser(customUserDetails.getEmail());

		String rawPassword = userDeletedRequestDto.getPassword();
		String storedHash = user.getPassword();

		if (!passwordEncoder.matches(rawPassword, storedHash)) {
			// 鍮꾨?踰덊샇媛 遺덉씪移섑븯硫??덉쇅 ?섏쭚
			throw new UserException(UserErrorCode.USER_INVALID_PASSWORD);
		}

		user.softDeletedUser();
	}

	private User verifyUser(Long userId) {
		return userRepository.findById(userId)
			.orElseThrow(() -> new UserException(UserErrorCode.USER_NOT_FOUND));
	}

	private User verifyActiveUser(String email) {
		return userRepository.findByEmailAndIsDeletedFalse(email)
			.orElseThrow(() -> new UserException(UserErrorCode.USER_NOT_FOUND));
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\waitingorder\entity\WaitingOrders.java =====
package com.example.osid.domain.waitingorder.entity;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.waitingorder.enums.WaitingStatus;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Setter
@Getter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "waiting_orders")
public class WaitingOrders extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "order_id")
	private Orders orders;

	@Enumerated(EnumType.STRING)
	private WaitingStatus waitingStatus;

	public WaitingOrders(Orders orders) {
		this.orders = orders;
		this.waitingStatus = WaitingStatus.WAITING;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\waitingorder\enums\WaitingStatus.java =====
package com.example.osid.domain.waitingorder.enums;

public enum WaitingStatus {
	WAITING,        // 珥덇린 ?곹깭
	PROCESSING,        // 泥섎━ 以?(?덉륫 以鍮??꾨즺)
	COMPLETED        // ?덉륫 寃곌낵 ????꾨즺
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\waitingorder\exception\WaitingOrderErrorCode.java =====
package com.example.osid.domain.waitingorder.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum WaitingOrderErrorCode implements BaseCode {

	WAITING_ORDER_NOT_FOUND(HttpStatus.NOT_FOUND, "WAITING_001", "?대떦 ?湲곗뿴??李얠쓣 ???놁뒿?덈떎.");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\waitingorder\exception\WaitingOrderException.java =====
package com.example.osid.domain.waitingorder.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class WaitingOrderException extends CustomException {
	public WaitingOrderException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\waitingorder\repository\WaitingOrderRepository.java =====
package com.example.osid.domain.waitingorder.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.waitingorder.entity.WaitingOrders;

public interface WaitingOrderRepository extends JpaRepository<WaitingOrders, Long> {

	// Page<WaitingOrders> findAllByWaitingStatus(WaitingStatus status, Pageable pageable);

	Optional<WaitingOrders> findByOrders(Orders orders);

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\domain\waitingorder\service\WaitingOrderListener.java =====
package com.example.osid.domain.waitingorder.service;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.event.TransactionPhase;
import org.springframework.transaction.event.TransactionalEventListener;

import com.example.osid.domain.order.dto.OrderPaidEvent;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.exception.OrderErrorCode;
import com.example.osid.domain.order.exception.OrderException;
import com.example.osid.domain.order.repository.OrderRepository;
import com.example.osid.domain.waitingorder.entity.WaitingOrders;
import com.example.osid.domain.waitingorder.repository.WaitingOrderRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Component
@Slf4j
public class WaitingOrderListener {

	private final WaitingOrderRepository waitingOrderRepository;
	private final OrderRepository orderRepository;

	@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
	@Transactional(transactionManager = "dataTransactionManager", propagation = Propagation.REQUIRES_NEW)
	public void handleWaitingOrderSaved(OrderPaidEvent event) {

		Orders orders = orderRepository.findById(event.getOrderId())
			.orElseThrow(() -> new OrderException(OrderErrorCode.ORDER_NOT_FOUND));

		WaitingOrders save = waitingOrderRepository.save(new WaitingOrders(orders));

		log.info("save WatinOrders id : {}, orderId : {}, date : {}", save.getId(), save.getOrders().getId(),
			save.getCreatedAt());
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\controller\FailedEventController.java =====
package com.example.osid.event.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.osid.common.response.CommonResponse;
import com.example.osid.event.dto.FailedEventResponse;
import com.example.osid.event.service.FailedEventService;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping("api/masters/failedEvent")
public class FailedEventController {

	private final FailedEventService failedEventService;

	@GetMapping
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<Page<FailedEventResponse>> findAllFailedEvent(
		@PageableDefault(size = 10, sort = "createdAt", direction = Sort.Direction.ASC) Pageable pageable
	) {
		Page<FailedEventResponse> failedEvents = failedEventService.findAllFailedEvent(pageable);
		return CommonResponse.ok(failedEvents);
	}

	@PostMapping("/{failedEventId}")
	@ResponseStatus(HttpStatus.OK)
	public CommonResponse<String> retry(
		@PathVariable Long failedEventId
	) {
		String retryResult = failedEventService.retryFailedEvent(failedEventId);

		return CommonResponse.ok(retryResult);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\dto\FailedEventResponse.java =====
package com.example.osid.event.dto;

import java.time.LocalDateTime;

import com.example.osid.event.entity.FailedEvent;
import com.example.osid.event.enums.FailedEventType;
import com.fasterxml.jackson.annotation.JsonFormat;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class FailedEventResponse {

	private final Long id;
	private final Long orderId;
	private final int retryCount;
	private final String errorMessage;
	private final FailedEventType failedEventType;
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd-HH:mm:ss")
	private final LocalDateTime createdAt;

	public static FailedEventResponse from(FailedEvent failedEvent) {
		return new FailedEventResponse(
			failedEvent.getId(),
			failedEvent.getOrderId(),
			failedEvent.getRetryCount(),
			failedEvent.getErrorMessage(),
			failedEvent.getEventType(),
			failedEvent.getCreatedAt()
		);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\entity\FailedEvent.java =====
package com.example.osid.event.entity;

import com.example.osid.common.entity.BaseEntity;
import com.example.osid.event.OrderCompletedEmailEvent;
import com.example.osid.event.OrderCompletedMyCarEvent;
import com.example.osid.event.enums.FailedEventType;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Setter
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "failed_event")
public class FailedEvent extends BaseEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	private Long orderId;
	private int retryCount;
	@Column(name = "error_message", length = 5000)
	private String errorMessage;

	@Enumerated(EnumType.STRING)
	private FailedEventType eventType;

	// myCar failedEvent
	public FailedEvent(OrderCompletedMyCarEvent event) {
		this.orderId = event.getOrderId();
		this.retryCount = event.getRetryCount();
		this.errorMessage = event.getErrorMessage();
		this.eventType = FailedEventType.MY_CAR;
	}

	// ?대찓??failedEvent
	public FailedEvent(OrderCompletedEmailEvent event) {
		this.orderId = event.getOrderId();
		this.retryCount = event.getRetryCount();
		this.errorMessage = event.getErrorMessage();
		this.eventType = FailedEventType.EMAIL;
	}

	public FailedEvent(Long orderId, int retryCount, String errorMessage, FailedEventType failedEventType) {
		this.orderId = orderId;
		this.retryCount = retryCount;
		this.errorMessage = errorMessage;
		this.eventType = failedEventType;
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\enums\FailedEventType.java =====
package com.example.osid.event.enums;

public enum FailedEventType {
	MY_CAR, EMAIL
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\exception\FailedEventErrorCode.java =====
package com.example.osid.event.exception;

import org.springframework.http.HttpStatus;

import com.example.osid.common.exception.BaseCode;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum FailedEventErrorCode implements BaseCode {
	EVENT_NOT_FOUND(HttpStatus.NOT_FOUND, "EVENT_001", "?대깽?몃? 李얠쓣 ???놁뒿?덈떎."),
	EVENT_TYPE_NOT_EXIST(HttpStatus.NOT_FOUND, "EVENT_002", "議댁옱?섏? ?딅뒗 ?대깽????낆엯?덈떎.");

	private final HttpStatus httpStatus;
	private final String code;
	private final String message;
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\exception\FailedEventException.java =====
package com.example.osid.event.exception;

import com.example.osid.common.exception.BaseCode;
import com.example.osid.common.exception.CustomException;

public class FailedEventException extends CustomException {
	public FailedEventException(BaseCode baseCode) {
		super(baseCode);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\listener\dlq\EmailDlqListener.java =====
package com.example.osid.event.listener.dlq;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

import com.example.osid.config.RabbitMQConfig;
import com.example.osid.event.OrderCompletedEmailEvent;
import com.example.osid.event.entity.FailedEvent;
import com.example.osid.event.repository.FailedEventRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
@ConditionalOnProperty(name = "mq.enabled", havingValue = "true", matchIfMissing = false)
public class EmailDlqListener {

	private final FailedEventRepository failedEventRepository;

	@RabbitListener(queues = RabbitMQConfig.EMAIL_DLQ)
	public void handleDlq(OrderCompletedEmailEvent event) {
		log.warn("EMAIL_DLQ 硫붿떆吏 ?섏떊: orderId={}, retryCount={}, error={}",
			event.getOrderId(), event.getRetryCount(), event.getErrorMessage());

		// DB ???
		FailedEvent failedEvent = new FailedEvent(event);
		failedEventRepository.save(failedEvent);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\listener\dlq\MyCarDlqListener.java =====
package com.example.osid.event.listener.dlq;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

import com.example.osid.config.RabbitMQConfig;
import com.example.osid.event.OrderCompletedMyCarEvent;
import com.example.osid.event.entity.FailedEvent;
import com.example.osid.event.repository.FailedEventRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
@ConditionalOnProperty(name = "mq.enabled", havingValue = "true", matchIfMissing = false)
public class MyCarDlqListener {

	private final FailedEventRepository failedEventRepository;

	@RabbitListener(queues = RabbitMQConfig.MY_CAR_DLQ)
	public void handleDlq(OrderCompletedMyCarEvent event) {
		log.warn("MY_CAR_DLQ 硫붿떆吏 ?섏떊: orderId={}, retryCount={}, error={}",
			event.getOrderId(), event.getRetryCount(), event.getErrorMessage());

		// DB ???
		FailedEvent failedEvent = new FailedEvent(event);
		failedEventRepository.save(failedEvent);
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\listener\OrderCompletedEmailListener.java =====
package com.example.osid.event.listener;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

import com.example.osid.config.RabbitMQConfig;
import com.example.osid.domain.email.service.EmailService;
import com.example.osid.event.OrderCompletedEmailEvent;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
@ConditionalOnProperty(name = "mq.enabled", havingValue = "true", matchIfMissing = false)
public class OrderCompletedEmailListener {

	// 理쒕? ?ъ떆???잛닔
	private static final int MAX_RETRY = 3;

	private final EmailService emailService;
	private final RabbitTemplate rabbitTemplate;

	@RabbitListener(queues = RabbitMQConfig.EMAIL_QUEUE)
	public void handleOrderCompletedEmail(OrderCompletedEmailEvent event) {
		int retryCount = event.getRetryCount();
		log.info("?대찓???대깽???섏떊: orderId={}, retryCount={}", event.getOrderId(), retryCount);

		try {
			emailService.sendOrderCompletedEmail(event.getOrderId());
			log.info("?대찓???꾩넚 ?깃났: orderId={}", event.getOrderId());

		} catch (Exception e) {
			// ?ъ떆??媛?ν븳 ?덉쇅
			int nextRetry = retryCount + 1;
			if (nextRetry > MAX_RETRY) {
				event.setErrorMessage(e.getMessage());
				event.setRetryCount(nextRetry);
				sendToDlq(event);
			} else {
				event.setRetryCount(nextRetry);
				sendToDelayQueue(event);
			}
		}
	}

	// ?ㅽ뙣???대찓??利됱떆 ?ъ떆??
	// private void resendToQueue(OrderCompletedEmailEvent event) {
	// 	log.info("?대찓???ъ떆??硫붿떆吏 ?꾩넚: orderId={}, retryCount={}", event.getOrderId(), event.getRetryCount());
	// 	rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE, RabbitMQConfig.EMAIL_ROUTING_KEY, event);
	// }

	// ?ㅽ뙣???대찓??retry queue濡??꾩넚
	private void sendToDelayQueue(OrderCompletedEmailEvent event) {
		log.warn("?대찓???ъ떆??硫붿떆吏 ?꾩넚: orderId={}, retryCount={}", event.getOrderId(), event.getRetryCount());
		rabbitTemplate.convertAndSend(
			RabbitMQConfig.EXCHANGE,  // 吏?????꾩슜 ?듭뒪泥댁씤吏
			RabbitMQConfig.EMAIL_DELAY_ROUTING_KEY,
			event
		);
	}

	private void sendToDlq(OrderCompletedEmailEvent event) {
		log.error("?대찓??DLQ ?꾩넚: orderId={}, error={}", event.getOrderId(), event.getErrorMessage());
		OrderCompletedEmailEvent toSend = new OrderCompletedEmailEvent(
			event.getOrderId(),
			event.getErrorMessage(),
			event.getRetryCount()
		);
		rabbitTemplate.convertAndSend(RabbitMQConfig.EMAIL_DLX, RabbitMQConfig.EMAIL_DLQ_ROUTING_KEY, toSend);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\listener\OrderCompletedMyCarListener.java =====
package com.example.osid.event.listener;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

import com.example.osid.config.RabbitMQConfig;
import com.example.osid.domain.mycar.exception.MyCarException;
import com.example.osid.domain.mycar.service.MyCarService;
import com.example.osid.domain.order.exception.OrderException;
import com.example.osid.event.OrderCompletedEmailEvent;
import com.example.osid.event.OrderCompletedMyCarEvent;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
@ConditionalOnProperty(name = "mq.enabled", havingValue = "true", matchIfMissing = false)
public class OrderCompletedMyCarListener {

	// 理쒕? ?ъ떆???잛닔
	private static final int MAX_RETRY = 3;

	private final MyCarService myCarService;
	private final RabbitTemplate rabbitTemplate;

	// myCar ?앹꽦 -> email 諛쒗뻾
	@RabbitListener(queues = RabbitMQConfig.MY_CAR_QUEUE)
	public void handleOrderCompleted(OrderCompletedMyCarEvent event) {
		int retryCount = event.getRetryCount();
		log.info("myCar ?앹꽦 ?대깽???섏떊: orderId={}, retryCount={}", event.getOrderId(), retryCount);

		try {
			myCarService.saveMyCar(event.getOrderId());
			log.info("MyCar ????깃났, orderId={}", event.getOrderId());
			publishEmailEvent(event.getOrderId());

		} catch (MyCarException | OrderException e) {
			// 鍮꾩쫰?덉뒪 濡쒖쭅 ?덉쇅??諛붾줈 DLQ ?꾩넚 (MyCarException, OrderException)
			log.warn("?ъ쿂由?遺덇??ν븳 ?덉쇅: {} -> DLQ ?대룞", e.getMessage());
			event.setErrorMessage(e.getMessage());
			event.setRetryCount(event.getRetryCount() + 1);
			sendToDlq(event);
		} catch (Exception e) {
			// ?ъ떆??媛?ν븳 ?쇰컲 ?덉쇅(3???ㅽ뙣??DLQ ?대룞)
			int nextRetry = event.getRetryCount() + 1;
			if (nextRetry > MAX_RETRY) {
				event.setErrorMessage(e.getMessage());
				event.setRetryCount(nextRetry);
				sendToDlq(event);  // DLQ ?꾩넚??硫붿꽌??
			} else {
				event.setRetryCount(nextRetry);
				resendToQueue(event); // ?ъ떆??
			}
		}
	}

	private void resendToQueue(OrderCompletedMyCarEvent event) {
		log.info("?ъ떆??硫붿떆吏 ?꾩넚: orderId={}, retryCount={}", event.getOrderId(), event.getRetryCount());
		rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE, RabbitMQConfig.MY_CAR_ROUTING_KEY, event);
	}

	private void sendToDlq(OrderCompletedMyCarEvent event) {
		log.error("DLQ ?꾩넚 : orderId={}, error={}", event.getOrderId(), event.getErrorMessage());
		OrderCompletedMyCarEvent toSend = new OrderCompletedMyCarEvent(
			event.getOrderId(),
			event.getErrorMessage(),
			event.getRetryCount()
		);
		rabbitTemplate.convertAndSend(RabbitMQConfig.MY_CAR_DLX, RabbitMQConfig.MY_CAR_DLQ_ROUTING_KEY, toSend);
	}

	private void publishEmailEvent(Long orderId) {
		OrderCompletedEmailEvent emailEvent = new OrderCompletedEmailEvent(orderId);
		rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE, RabbitMQConfig.EMAIL_ROUTING_KEY, emailEvent);
		log.info("?대찓???대깽??諛쒗뻾 : orderId={}", orderId);
	}
}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\repository\FailedEventRepository.java =====
package com.example.osid.event.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.osid.event.entity.FailedEvent;

@Repository
public interface FailedEventRepository extends JpaRepository<FailedEvent, Long> {

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\service\FailedEventService.java =====
package com.example.osid.event.service;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.config.RabbitMQConfig;
import com.example.osid.event.OrderCompletedEmailEvent;
import com.example.osid.event.OrderCompletedMyCarEvent;
import com.example.osid.event.dto.FailedEventResponse;
import com.example.osid.event.entity.FailedEvent;
import com.example.osid.event.exception.FailedEventErrorCode;
import com.example.osid.event.exception.FailedEventException;
import com.example.osid.event.repository.FailedEventRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class FailedEventService {

	private final FailedEventRepository failedEventRepository;
	private final RabbitTemplate rabbitTemplate;

	@Transactional(readOnly = true)
	@PreAuthorize("hasRole('MASTER')")
	public Page<FailedEventResponse> findAllFailedEvent(Pageable pageable) {

		Page<FailedEvent> failedEvents = failedEventRepository.findAll(pageable);

		return failedEvents.map(FailedEventResponse::from);
	}

	@Transactional
	@PreAuthorize("hasRole('MASTER')")
	public String retryFailedEvent(Long failedEventId) {
		FailedEvent failedEvent = failedEventRepository.findById(failedEventId)
			.orElseThrow(() -> new FailedEventException(FailedEventErrorCode.EVENT_NOT_FOUND));

		// ?대깽???ш뎄??(retryCount 珥덇린??
		switch (failedEvent.getEventType()) {
			case MY_CAR -> resendMyCarEvent(failedEvent);
			case EMAIL -> resendEmailEvent(failedEvent);
			default -> throw new FailedEventException(FailedEventErrorCode.EVENT_TYPE_NOT_EXIST);
		}

		// ?ъ쿂由??깃났 ???ㅽ뙣 ?대깽????젣
		failedEventRepository.delete(failedEvent);
		return "OK";

	}

	private void resendMyCarEvent(FailedEvent failedEvent) {
		OrderCompletedMyCarEvent retryEvent = new OrderCompletedMyCarEvent(
			failedEvent.getOrderId(),
			null,
			0
		);
		rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE, RabbitMQConfig.MY_CAR_ROUTING_KEY, retryEvent);
		log.info("MyCar ?ъ쿂由??꾩넚: orderId={}", failedEvent.getOrderId());
	}

	private void resendEmailEvent(FailedEvent failedEvent) {
		OrderCompletedEmailEvent retryEvent = new OrderCompletedEmailEvent(
			failedEvent.getOrderId(),
			null,
			0
		);
		rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE, RabbitMQConfig.EMAIL_ROUTING_KEY, retryEvent);
		log.info("Email ?ъ쿂由??꾩넚: orderId={}", failedEvent.getOrderId());
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\OrderCompletedEmailEvent.java =====
package com.example.osid.event;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class OrderCompletedEmailEvent {

	// orderId, (?ㅽ뙣?덉쓣 寃쎌슦)?먮윭 硫붿꽭吏, ?ъ떆???잛닔
	private Long orderId;
	private String errorMessage;
	private int retryCount;

	public OrderCompletedEmailEvent(Long orderId) {
		this.orderId = orderId;
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\OrderCompletedMyCarEvent.java =====
package com.example.osid.event;

import java.io.Serializable;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class OrderCompletedMyCarEvent implements Serializable {

	// orderId, (?ㅽ뙣?덉쓣 寃쎌슦)?먮윭 硫붿꽭吏, ?ъ떆???잛닔
	private Long orderId;
	private String errorMessage;
	private int retryCount;

	public OrderCompletedMyCarEvent(Long orderId) {
		this.orderId = orderId;
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\event\OrderEventPublisher.java =====
package com.example.osid.event;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.stereotype.Component;
import org.springframework.transaction.support.TransactionSynchronization;
import org.springframework.transaction.support.TransactionSynchronizationManager;

import com.example.osid.config.RabbitMQConfig;

import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class OrderEventPublisher {

	private final RabbitTemplate rabbitTemplate;

	// myCar ?앹꽦
	public void publishOrderCompletedMyCar(OrderCompletedMyCarEvent event) {
		// ?몃옖??뀡 ?꾨즺 ???ㅽ뻾
		if (TransactionSynchronizationManager.isActualTransactionActive()) {
			TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization() {
				@Override
				public void afterCommit() {
					rabbitTemplate.convertAndSend(
						RabbitMQConfig.EXCHANGE,
						RabbitMQConfig.MY_CAR_ROUTING_KEY,
						event
					);
				}
			});
		}
	}

}
===== D:\Last\Car-Order-Tracker\src\main\java\com\example\osid\OsidApplication.java =====
package com.example.osid;

import org.springframework.amqp.rabbit.annotation.EnableRabbit;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableJpaAuditing
@EnableAspectJAutoProxy // AOP ?ъ슜???꾪븿
@EnableRabbit
@EnableCaching
@EnableScheduling
// @EnableBatchProcessing
public class OsidApplication {

	public static void main(String[] args) {
		SpringApplication.run(OsidApplication.class, args);
	}

}
===== D:\Last\Car-Order-Tracker\src\main\resources\logback-spring.xml =====
<configuration>

    <!-- 濡쒓렇 ?뚯씪 寃쎈줈 諛??대쫫 ?ㅼ젙-->
    <property name="LOG_PATH" value="logs"/>
    <property name="LOG_FILE_NAME" value="console"/>
    <property name="ERR_LOG_FILE_NAME" value="exceptions"/>

    <conversionRule conversionWord="clr"
                    class="org.springframework.boot.logging.logback.ColorConverter"/>

    <!-- 濡쒓렇 ?⑦꽩 ?ㅼ젙 -->
    <property name="LOG_PATTERN"
              value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative]  %clr(%-5level) %clr(${PID:-}){magenta} %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{36}){cyan} %clr(:){faint} %msg%n"/>

    <property name="FILE_LOG_PATTERN"
              value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %logger{36} - %msg%n"/>

    <!-- 肄섏넄 濡쒓렇 -->
    <!--    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">-->
    <!--        <encoder>-->
    <!--            <pattern>[%d{HH:mm:ss.SSS}] [%-5level] %logger{36} - %msg%n</pattern>-->
    <!--        </encoder>-->
    <!--    </appender>-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- ?뚯씪 濡쒓렇 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- ???ㅼ젣 濡쒓렇瑜???湲곕낯 ?뚯씪 寃쎈줈 -->
        <file>logs/app.log</file>

        <!-- ???몄젣, ?대뼸寃?濡ㅻ쭅(遺꾨━)?좎? ?뺤쓽 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- ???좎쭨蹂꾨줈 ?뚯씪??遺꾨━???⑦꽩.
                 ?? logs/app-2025-06-07.log, logs/app-2025-06-08.log -->
            <fileNamePattern>logs/app-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- ??蹂닿????쇱닔. 7?쇱씠 吏??濡쒓렇 ?뚯씪? ?먮룞 ??젣 -->
            <maxHistory>7</maxHistory>
        </rollingPolicy>

        <encoder>
            <!-- ???뚯씪???④만 濡쒓렇 ?뺤떇. ????????遺?珥?諛由ъ큹 ?ы븿 -->
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- ERROR ?덈꺼 濡쒓렇瑜?蹂꾨룄 ?뚯씪??濡쒓렇 泥섎━ -->
    <appender name="EXCEPTION_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- .gz,.zip ?깆쓣 ?ｌ쑝硫??먮룞 ?쇱옄蹂?濡쒓렇?뚯씪 ?뺤텞 -->
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- ?쇱옄蹂?濡쒓렇?뚯씪 理쒕? 蹂닿?二쇨린(~??, ?대떦 ?ㅼ젙???댁긽???뚯씪? ?먮룞?쇰줈 ?쒓굅-->
            <maxHistory>7</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- ERROR ?덈꺼? 湲濡쒕쾶 ?덉쇅 ?⑤뱾?ъ뿉留?-->
    <logger name="com.example.osid.common.exception" level="ERROR" additivity="false">
        <appender-ref ref="EXCEPTION_FILE"/>
        <appender-ref ref="CONSOLE"/>
    </logger>

    <!-- 猷⑦듃 濡쒓굅: 紐⑤뱺 ?⑦궎吏??濡쒓렇瑜?INFO ?덈꺼濡?肄섏넄+?뚯씪??蹂대궦??-->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>
</configuration>
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\dealer\service\DealerServiceTest.java =====
package com.example.osid.domain.dealer.service;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.auth.EmailValidator;
import com.example.osid.common.entity.enums.Role;
import com.example.osid.domain.dealer.dto.request.DealerDeletedRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerRoleChangeRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerSignUpRequestDto;
import com.example.osid.domain.dealer.dto.request.DealerUpdatedRequestDto;
import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.dealer.exception.DealerErrorCode;
import com.example.osid.domain.dealer.exception.DealerException;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.master.exception.MasterErrorCode;
import com.example.osid.domain.master.exception.MasterException;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.user.repository.UserRepository;

class DealerServiceTest {

	@Mock
	private DealerRepository dealerRepository;
	@Mock
	private MasterRepository masterRepository;
	@Mock
	private UserRepository userRepository;
	@Mock
	private PasswordEncoder passwordEncoder;
	@Mock
	private EmailValidator emailValidator;

	@InjectMocks
	private DealerService dealerService;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.openMocks(this);
	}

	@Test
	void signUpDealer_success() {
		// given: DTO mock ?앹꽦 諛?諛섑솚媛??ㅼ젙
		DealerSignUpRequestDto dto = mock(DealerSignUpRequestDto.class);
		when(dto.getEmail()).thenReturn("dealer@example.com");        // ?대찓??
		when(dto.getPassword()).thenReturn("12345678aA!");         // 鍮꾨?踰덊샇
		when(dto.getName()).thenReturn("?띻만??);                    // ?대쫫
		when(dto.getPhoneNumber()).thenReturn("010-1234-5678");     // ?꾪솕踰덊샇
		when(dto.getMasterEmail()).thenReturn("master@example.com"); // 留덉뒪???대찓??

		// given: ?곌? Master ?뷀떚??stub ?ㅼ젙
		Master master = Master.builder()
			.id(2L)                                         // DB?먯꽌 遺?щ맂 id
			.businessNumber("111-22-33333")               // ?ъ뾽??踰덊샇
			.name("MasterName")                           // 留덉뒪???대쫫
			.phoneNumber("010-0000-0000")                 // ?꾪솕踰덊샇
			.email("master@example.com")                  // ?대찓??
			.password("pwd")                              // 鍮꾨?踰덊샇 ?댁떆
			.address("Somewhere")                        // 二쇱냼
			.productKey("KEY")                           // ?쇱씠?쇱뒪 ??
			.build();
		when(masterRepository.findByEmailAndIsDeletedFalse("master@example.com"))
			.thenReturn(Optional.of(master));              // 議고쉶 ??留덉뒪??諛섑솚

		// given: 鍮꾨?踰덊샇 ?뷀샇??stub
		when(passwordEncoder.encode("12345678aA!")).thenReturn("encodedPwd");

		// when: ?쒕퉬???몄텧
		dealerService.signUpDealer(dto);

		// then: ?대찓??以묐났 寃???몄텧 ?뺤씤
		verify(emailValidator).validateDuplicateEmail("dealer@example.com");
		// then: 留덉뒪??議고쉶 ?몄텧 ?뺤씤
		verify(masterRepository).findByEmailAndIsDeletedFalse("master@example.com");
		// then: ??λ맂 Dealer 媛앹껜 罹≪쿂 諛??꾨뱶 寃利?
		ArgumentCaptor<Dealer> captor = ArgumentCaptor.forClass(Dealer.class);
		verify(dealerRepository).save(captor.capture());             // save ?몄텧 ???몄옄 罹≪쿂
		Dealer saved = captor.getValue();                             // 罹≪쿂??媛앹껜 媛?몄삤湲?
		assertEquals("dealer@example.com", saved.getEmail());       // ?대찓??寃利?
		assertEquals("encodedPwd", saved.getPassword());   // ?뷀샇?붾맂 鍮꾨?踰덊샇 寃利?
		assertEquals(master, saved.getMaster());     // ?곌? 留덉뒪??寃利?
	}

	@Test
	void signUpDealer_masterNotFound_throwsException() {
		// given: DTO mock 諛?留덉뒪??誘몃컻寃??쒕굹由ъ삤
		DealerSignUpRequestDto dto = mock(DealerSignUpRequestDto.class);
		when(dto.getMasterEmail()).thenReturn("noone@example.com");
		when(masterRepository.findByEmailAndIsDeletedFalse("noone@example.com"))
			.thenReturn(Optional.empty());                       // 議고쉶 ??Optional.empty()

		// when & then: ?덉쇅 諛쒖깮 ?뺤씤 諛??먮윭肄붾뱶 寃利?
		MasterException ex = assertThrows(MasterException.class,
			() -> dealerService.signUpDealer(dto));
		assertEquals(MasterErrorCode.MASTER_NOT_FOUND, ex.getBaseCode());
	}

	@Test
	void findByDealer_success() {
		// given
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getId()).thenReturn(1L);

		Master master = Master.builder()
			.id(1L)
			.email("master@example.com")
			.build();

		Dealer dealer = Dealer.builder()
			.id(1L)
			.email("dealer@example.com")
			.name("?띻만??)
			.phoneNumber("010-1234-5678")
			.branch(com.example.osid.domain.dealer.enums.Branch.?쒖슱)
			.master(master)
			.build();

		when(dealerRepository.findById(1L)).thenReturn(Optional.of(dealer));

		// when
		var result = dealerService.findByDealer(userDetails);

		// then
		assertEquals(Long.valueOf(1L), result.getId());
		assertEquals("dealer@example.com", result.getEmail());
		assertEquals("?띻만??, result.getName());
		assertEquals("010-1234-5678", result.getPhoneNumber());
		assertEquals("master@example.com", result.getMasterEmail());
		assertEquals(com.example.osid.domain.dealer.enums.Branch.?쒖슱, result.getBranch());
	}

	@Test
	void updatedDealer_success() {
		// given
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getEmail()).thenReturn("dealer@example.com");

		Dealer dealer = Dealer.builder()
			.id(1L)
			.email("dealer@example.com")
			.name("Old Name")
			.phoneNumber("010-0000-0000")
			.master(Master.builder().id(1L).build())
			.build();

		when(dealerRepository.findByEmailAndIsDeletedFalse("dealer@example.com"))
			.thenReturn(Optional.of(dealer));

		DealerUpdatedRequestDto dto = mock(DealerUpdatedRequestDto.class);
		when(dto.getName()).thenReturn("New Name");
		when(dto.getPhoneNumber()).thenReturn("010-9999-9999");

		// when
		dealerService.updatedDealer(userDetails, dto);

		// then
		assertEquals("New Name", dealer.getName());
		assertEquals("010-9999-9999", dealer.getPhoneNumber());
	}

	@Test
	void deletedDealer_success() {
		// given
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getEmail()).thenReturn("dealer@example.com");

		Dealer dealer = Dealer.builder()
			.id(1L)
			.email("dealer@example.com")
			.password("encodedPwd")
			.isDeleted(false)
			.master(Master.builder().id(1L).build())
			.build();

		when(dealerRepository.findByEmailAndIsDeletedFalse("dealer@example.com"))
			.thenReturn(Optional.of(dealer));

		when(passwordEncoder.matches("Password1!", "encodedPwd")).thenReturn(true);

		DealerDeletedRequestDto dto = mock(DealerDeletedRequestDto.class);
		when(dto.getPassword()).thenReturn("Password1!");

		// when
		dealerService.deletedDealer(userDetails, dto);

		// then
		assertTrue(dealer.isDeleted());
		assertNotNull(dealer.getDeletedAt());
	}

	@Test
	void updatedRoleChangeDealer_success() {
		// given: 濡쒓렇?명븳 留덉뒪??(CustomUserDetails)
		CustomUserDetails masterDetails = mock(CustomUserDetails.class);
		when(masterDetails.getEmail()).thenReturn("master@example.com");

		// given: 留덉뒪???뷀떚??
		Master master = Master.builder()
			.id(100L)
			.email("master@example.com")
			.build();
		when(masterRepository.findByEmailAndIsDeletedFalse("master@example.com"))
			.thenReturn(Optional.of(master));

		// given: ?대떦 留덉뒪?곗뿉 ?뚯냽???쒕윭
		Dealer dealer = Dealer.builder()
			.id(200L)
			.email("dealer@example.com")
			.name("?띻만??)
			.role(Role.APPLICANT)
			.master(master) // 留덉뒪?곗뿉 ?랁빐 ?덉뼱????
			.build();
		when(dealerRepository.findByEmailAndIsDeletedFalse("dealer@example.com"))
			.thenReturn(Optional.of(dealer));

		// given: ??븷 蹂寃??붿껌 DTO
		DealerRoleChangeRequestDto dto = mock(DealerRoleChangeRequestDto.class);
		when(dto.getDealerEmail()).thenReturn("dealer@example.com");
		when(dto.getRole()).thenReturn(Role.DEALER); // ?좏슚??Role

		// when
		dealerService.updatedRoleChangeDealer(masterDetails, dto);

		// then
		assertEquals(Role.DEALER, dealer.getRole()); // ??븷??蹂寃쎈릺?덈뒗吏 ?뺤씤
	}

	@Test
	void updatedRoleChangeDealer_fail_notBelongToMaster() {
		// given: 濡쒓렇?명븳 留덉뒪??(CustomUserDetails)
		CustomUserDetails masterDetails = mock(CustomUserDetails.class);
		when(masterDetails.getEmail()).thenReturn("masterA@example.com");

		// given: ?ㅼ젣 濡쒓렇?명븳 留덉뒪??
		Master masterA = Master.builder()
			.id(1L)
			.email("masterA@example.com")
			.build();
		when(masterRepository.findByEmailAndIsDeletedFalse("masterA@example.com"))
			.thenReturn(Optional.of(masterA));

		// given: ?쒕윭??留덉뒪??B ?뚯냽
		Master masterB = Master.builder()
			.id(2L)
			.email("masterB@example.com")
			.build();
		Dealer dealer = Dealer.builder()
			.id(10L)
			.email("dealer@example.com")
			.name("?쒕윭1")
			.role(Role.APPLICANT)
			.master(masterB) // ?ㅻⅨ 留덉뒪?곗뿉 ?뚯냽
			.build();
		when(dealerRepository.findByEmailAndIsDeletedFalse("dealer@example.com"))
			.thenReturn(Optional.of(dealer));

		// given: ??븷 蹂寃??붿껌
		DealerRoleChangeRequestDto dto = mock(DealerRoleChangeRequestDto.class);
		when(dto.getDealerEmail()).thenReturn("dealer@example.com");
		when(dto.getRole()).thenReturn(Role.DEALER);

		// when & then: ?덉쇅 諛쒖깮 寃利?
		DealerException ex = assertThrows(DealerException.class,
			() -> dealerService.updatedRoleChangeDealer(masterDetails, dto));

		assertEquals(DealerErrorCode.DEALER_NOT_BELONG_TO_MASTER, ex.getBaseCode());
	}

	@Test
	void updatedBranchChangeDealer() {
	}
}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\license\service\LicenseKeyServiceTest.java =====
package com.example.osid.domain.license.service;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.time.LocalDateTime;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.example.osid.domain.license.dto.LicenseInfoResponseDto;
import com.example.osid.domain.license.entity.LicenseKey;
import com.example.osid.domain.license.enums.LicenseStatus;
import com.example.osid.domain.license.repository.LicenseKeyRepository;
import com.example.osid.domain.master.repository.MasterRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

class LicenseKeyServiceTest {

	@Mock
	private LicenseKeyRepository licenseKeyRepository;

	@Mock
	private MasterRepository masterRepository;

	@InjectMocks
	private LicenseKeyService licenseKeyService;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.openMocks(this);
	}

	@Test
	void findAllLicense_success() {
		// given: ?섑뵆 ?쇱씠?쇱뒪 ??3媛??앹꽦
		List<LicenseKey> licenseKeys = List.of(
				createLicenseKey("KEY-1", LicenseStatus.ASSIGNED, 1L),
				createLicenseKey("KEY-2", LicenseStatus.AVAILABLE, null),
				createLicenseKey("KEY-3", LicenseStatus.REVOKED, 2L)
		);
		Page<LicenseKey> licenseKeyPage = new PageImpl<>(licenseKeys);
		Pageable pageable = Pageable.unpaged();
		when(licenseKeyRepository.findAll(pageable)).thenReturn(licenseKeyPage);

		// when: ?쒕퉬??硫붿꽌???몄텧
		Page<LicenseInfoResponseDto> resultPage = licenseKeyService.findAllLicense(pageable);
		List<LicenseInfoResponseDto> result = resultPage.getContent();

		// then: 寃곌낵 寃利?
		assertEquals(3, resultPage.getTotalElements());

		LicenseInfoResponseDto first = result.get(0);
		assertEquals("KEY-1", first.getProductKey());
		assertEquals(LicenseStatus.ASSIGNED, first.getLicenseStatus());
		assertEquals(Long.valueOf(1L), first.getOwnerId());
		assertNotNull(first.getAssignedAt());
	}

	// ?ы띁 硫붿꽌?? ?뚯뒪?몄슜 LicenseKey 媛앹껜 ?앹꽦
	private LicenseKey createLicenseKey(String key, LicenseStatus status, Long ownerId) {
		LicenseKey licenseKey = new LicenseKey(key, status);
		licenseKey.setOwnerId(ownerId);
		licenseKey.setAssignedAt(LocalDateTime.of(2025, 6, 15, 16, 48)); // 怨좎젙 ?쒓컙 ?ъ슜
		return licenseKey;
	}
}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\master\service\MasterServiceTest.java =====
package com.example.osid.domain.master.service;

import static org.junit.Assert.*;
import static org.mockito.BDDMockito.*;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.auth.EmailValidator;
import com.example.osid.domain.dealer.dto.response.DealerInfoResponseDto;
import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.license.service.LicenseKeyService;
import com.example.osid.domain.master.dto.request.MasterDeletedRequestDto;
import com.example.osid.domain.master.dto.request.MasterSignUpRequestDto;
import com.example.osid.domain.master.dto.request.MasterUpdatedRequestDto;
import com.example.osid.domain.master.dto.response.FindByAllMasterResponseDto;
import com.example.osid.domain.master.dto.response.FindByMasterResponseDto;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.master.exception.MasterException;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.user.repository.UserRepository;

class MasterServiceTest {

	@Mock // ?섏〈 媛앹껜
	private MasterRepository masterRepository;
	@Mock // ?섏〈 媛앹껜
	private UserRepository userRepository;
	@Mock // ?섏〈 媛앹껜
	private DealerRepository dealerRepository;
	@Mock // ?섏〈 媛앹껜
	private PasswordEncoder passwordEncoder;
	@Mock // ?섏〈 媛앹껜
	private EmailValidator emailValidator;
	@Mock // ?섏〈 媛앹껜
	private LicenseKeyService licenseKeyService;

	@InjectMocks // ?ㅼ젣 ?뚯뒪?????
	private MasterService masterService;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.openMocks(this);
	}

	@Test
	void signUpMaster_success() {
		// given ?뚯뒪???섍꼍쨌?낅젰媛?以鍮?
		MasterSignUpRequestDto dto = mock(MasterSignUpRequestDto.class);
		when(dto.getEmail()).thenReturn("test@example.com");
		when(dto.getPassword()).thenReturn("Password1!");
		when(dto.getBusinessNumber()).thenReturn("123-45-67890");
		when(dto.getName()).thenReturn("John Doe");
		when(dto.getPhoneNumber()).thenReturn("010-1234-5678");
		when(dto.getAddress()).thenReturn("Seoul");
		when(dto.getProductKey()).thenReturn("LICENSE-KEY-123");

		when(passwordEncoder.encode(dto.getPassword())).thenReturn("encodedPwd");
		Master savedMaster = Master.builder()
			.id(1L)
			.businessNumber(dto.getBusinessNumber())
			.name(dto.getName())
			.phoneNumber(dto.getPhoneNumber())
			.email(dto.getEmail())
			.password("encodedPwd")
			.address(dto.getAddress())
			.productKey(dto.getProductKey())
			.build();
		when(masterRepository.save(any(Master.class))).thenReturn(savedMaster);

		// when ?ㅼ젣 硫붿꽌???몄텧
		masterService.signUpMaster(dto);

		// then  寃곌낵쨌?곹샇?묒슜 寃利?
		verify(emailValidator).validateDuplicateEmail(dto.getEmail());
		verify(passwordEncoder).encode(dto.getPassword());
		verify(masterRepository).save(any(Master.class));
		verify(licenseKeyService).assignExistingKey(eq(dto.getProductKey()), isNull());
	}

	@Test
	void findByMaster_success() {
		// given: CustomUserDetails?먯꽌 諛섑솚??Master ID ?ㅼ젙
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getId()).thenReturn(1L);

		// given: 留덉뒪???뷀떚??stub
		Master master = Master.builder()
			.id(1L)
			.businessNumber("123-45-67890")
			.name("Master Name")
			.phoneNumber("010-1111-2222")
			.email("master@example.com")
			.password("pwdHash")
			.address("Seoul")
			.productKey("KEY123")
			.build();
		when(masterRepository.findById(1L)).thenReturn(Optional.of(master));

		// given: 留덉뒪??諛묒쓽 ?쒕윭 由ъ뒪??stub
		Dealer dealer = Dealer.builder()
			.id(10L)
			.email("dealer@example.com")
			.password("encodedPwd")
			.name("Dealer Name")
			.phoneNumber("010-3333-4444")
			.branch(com.example.osid.domain.dealer.enums.Branch.誘몃같??
			.role(com.example.osid.common.entity.enums.Role.APPLICANT)
			.master(master)
			.build();
		when(dealerRepository.findByMasterAndIsDeletedFalse(master))
			.thenReturn(List.of(dealer));

		// when: ?쒕퉬???몄텧
		FindByMasterResponseDto response = masterService.findByMaster(userDetails);

		// then: 諛섑솚 DTO??留덉뒪???뺣낫 寃利?
		assertEquals(Long.valueOf(1L), response.getId());                               // ID
		assertEquals("123-45-67890", response.getBusinessNumber());       // ?ъ뾽??踰덊샇
		assertEquals("Master Name", response.getName());                  // ?대쫫
		assertEquals("010-1111-2222", response.getPhoneNumber());         // ?꾪솕踰덊샇
		assertEquals("master@example.com", response.getEmail());          // ?대찓??
		assertEquals("Seoul", response.getAddress());                     // 二쇱냼

		// then: ?쒕윭 由ъ뒪??寃利?
		List<DealerInfoResponseDto> dealers = response.getDealers();        // DTO 由ъ뒪??
		assertEquals(1, dealers.size());                                   // 媛쒖닔
		DealerInfoResponseDto d = dealers.get(0);
		assertEquals(Long.valueOf(10L), d.getId());                                   // ?쒕윭 ID
		assertEquals("dealer@example.com", d.getEmail());                // ?쒕윭 ?대찓??
		assertEquals("Dealer Name", d.getName());                        // ?쒕윭 ?대쫫
		assertEquals("010-3333-4444", d.getPhoneNumber());               // ?쒕윭 ?꾪솕踰덊샇
		assertEquals(com.example.osid.domain.dealer.enums.Branch.誘몃같?? d.getBranch()); // ?쒕윭 吏??
	}

	@Test
	void updatedMaster_success() {
		// given
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getEmail()).thenReturn("master@example.com");

		Master master = Master.builder()
			.id(1L)
			.businessNumber("123-45-67890")
			.name("Old Name")
			.phoneNumber("010-0000-0000")
			.email("master@example.com")
			.password("encodedPwd")
			.address("Old Address")
			.productKey("KEY123")
			.build();
		when(masterRepository.findByEmailAndIsDeletedFalse("master@example.com"))
			.thenReturn(Optional.of(master));

		MasterUpdatedRequestDto dto = mock(MasterUpdatedRequestDto.class);
		when(dto.getName()).thenReturn("New Name");
		when(dto.getPhoneNumber()).thenReturn("010-9999-9999");
		when(dto.getAddress()).thenReturn(null); // 二쇱냼??null ???낅뜲?댄듃 ????

		// when
		masterService.updatedMaster(userDetails, dto);

		// then
		assertEquals("New Name", master.getName());                   // 蹂寃쎈맖
		assertEquals("010-9999-9999", master.getPhoneNumber());       // 蹂寃쎈맖
		assertEquals("Old Address", master.getAddress());             // 洹몃?濡??좎?
	}

	@Test
	void updatedMaster_fail_masterNotFound() {
		// given: ?몄쬆???ъ슜?먯쓽 ?뺣낫瑜??됰궡?대뒗 CustomUserDetails瑜?留뚮뱺??
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getEmail()).thenReturn("notfound@example.com");

		// given: ?낅뜲?댄듃???대쫫留?議댁옱?섎뒗 dto瑜?留뚮뱺??
		MasterUpdatedRequestDto dto = mock(MasterUpdatedRequestDto.class);
		when(dto.getName()).thenReturn("New Name");

		// given: ?대찓?쇰줈 Master瑜?紐?李얘쾶 ?섍린 ?꾪빐 Optional.empty()瑜?由ы꽩?섎룄濡?mock ?ㅼ젙
		when(masterRepository.findByEmailAndIsDeletedFalse("notfound@example.com"))
			.thenReturn(Optional.empty());

		// when & then: ?대떦 ?곹솴?먯꽌 MasterException???곗졇???⑥쓣 寃利?
		assertThrows(MasterException.class, () -> {
			masterService.updatedMaster(userDetails, dto);
		});
	}

	@Test
	void deletedMaster_success() {
		// given: 濡쒓렇?명븳 留덉뒪?곗쓽 ?뺣낫瑜??됰궡??
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getEmail()).thenReturn("master@example.com");

		// given: ?ㅼ젣 留덉뒪??媛앹껜 (鍮꾨?踰덊샇 ?뷀샇?붾맂 ?곹깭)
		Master master = Master.builder()
			.id(1L)
			.email("master@example.com")
			.password("encodedPassword")
			.name("?띻만??)
			.phoneNumber("010-1234-5678")
			.address("?쒖슱??媛뺣궓援?)
			.businessNumber("123-45-67890")
			.productKey("KEY123")
			.build();

		// given: 鍮꾨?踰덊샇 ?쇱튂 泥섎━
		when(masterRepository.findByEmailAndIsDeletedFalse("master@example.com"))
			.thenReturn(Optional.of(master));
		when(passwordEncoder.matches("Password1!", "encodedPassword")).thenReturn(true);

		// given: ?덊눜 ?붿껌???ъ슜??鍮꾨?踰덊샇 DTO
		MasterDeletedRequestDto dto = mock(MasterDeletedRequestDto.class);
		when(dto.getPassword()).thenReturn("Password1!");

		// when: ?쒕퉬???몄텧
		masterService.deletedMaster(userDetails, dto);

		// then: 留덉뒪?곌? soft delete ?곹깭濡?諛붾뚯뿀?붿? ?뺤씤
		assertTrue(master.isDeleted());              // ??젣 泥섎━??
		assertNotNull(master.getDeletedAt());        // ??젣 ?쒓컙 ?ㅼ젙??
	}

	@Test
	void findByAllMaster_success() {
		// given: 濡쒓렇?명븳 ?ъ슜?먯쓽 ?뺣낫瑜?紐⑦궧
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getEmail()).thenReturn("masterA@example.com");

		// given: 濡쒓렇?명븳 留덉뒪???뷀떚??紐⑦궧
		Master me = Master.builder()
			.id(1L)
			.businessNumber("123-45-67890")
			.name("Master A")
			.phoneNumber("010-1111-2222")
			.email("masterA@example.com")
			.password("encodedPwd")
			.address("?쒖슱 媛뺣궓援?)
			.productKey("KEY-1")
			.build();
		when(masterRepository.findByEmailAndIsDeletedFalse("masterA@example.com"))
			.thenReturn(Optional.of(me));

		// given: 媛숈? ?ъ뾽??踰덊샇瑜?媛吏??ㅻⅨ 留덉뒪?곕뱾???ы븿??由ъ뒪??諛섑솚
		Master other = Master.builder()
			.id(2L)
			.businessNumber("123-45-67890")
			.name("Master B")
			.phoneNumber("010-3333-4444")
			.email("masterB@example.com")
			.password("encodedPwd")
			.address("?쒖슱 留덊룷援?)
			.productKey("KEY-2")
			.build();
		when(masterRepository.findByBusinessNumberAndIsDeletedFalse("123-45-67890"))
			.thenReturn(List.of(me, other));

		// when: ?쒕퉬???몄텧
		List<FindByAllMasterResponseDto> result = masterService.findByAllMaster(userDetails);

		// then: 寃곌낵 寃利?
		assertEquals(2, result.size()); // 留덉뒪?곌? 2紐?

		// 留덉뒪??A ?뺣낫 ?뺤씤
		FindByAllMasterResponseDto dto1 = result.get(0);
		assertEquals("Master A", dto1.getName());
		assertEquals("010-1111-2222", dto1.getPhoneNumber());
		assertEquals("masterA@example.com", dto1.getEmail());

		// 留덉뒪??B ?뺣낫 ?뺤씤
		FindByAllMasterResponseDto dto2 = result.get(1);
		assertEquals("Master B", dto2.getName());
		assertEquals("010-3333-4444", dto2.getPhoneNumber());
		assertEquals("masterB@example.com", dto2.getEmail());
	}

}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\model\service\ModelServiceImplTest.java =====
package com.example.osid.domain.model.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.BDDMockito.*;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.example.osid.domain.model.dto.ModelCreateRequest;
import com.example.osid.domain.model.dto.ModelMasterResponse;
import com.example.osid.domain.model.dto.ModelResponse;
import com.example.osid.domain.model.dto.ModelUpdateRequest;
import com.example.osid.domain.model.entity.Model;
import com.example.osid.domain.model.enums.ModelCategory;
import com.example.osid.domain.model.enums.ModelColor;
import com.example.osid.domain.model.exception.ModelErrorCode;
import com.example.osid.domain.model.exception.ModelException;
import com.example.osid.domain.model.repository.ModelRepository;

@ExtendWith(MockitoExtension.class)
class ModelServiceImplTest {

	@Mock
	private ModelRepository modelRepository;

	@InjectMocks
	private ModelServiceImpl modelService;
	private Model model;

	@BeforeEach
	void setUp() {

		model = Model.builder()
			.id(1L)
			.name("?뚯뒪??紐⑤뜽紐?)
			.color(ModelColor.RED)
			.description("紐⑤뜽 ?ㅻ챸")
			.deletedAt(null)
			.build();

	}

	@Test
	void 紐⑤뜽_?앹꽦_?깃났() {
		ModelCreateRequest request = new ModelCreateRequest(
			"異붽? 紐⑤뜽", ModelColor.RED, "異붽? ?ㅻ챸", "/image2.png", ModelCategory.SEDAN, "4", 5000000L
		);

		modelService.createModel(request);

		verify(modelRepository).save(any(Model.class));
	}

	@Test
	void 紐⑤뜽_?④굔_議고쉶_?깃났() {

		Long modelId = 1L;

		given(modelRepository.findByIdAndDeletedAtIsNull(modelId)).willReturn(Optional.of(model));
		ModelResponse response = modelService.findModel(modelId);
		assertAll(
			() -> assertNotNull(response),
			() -> assertEquals(model.getId(), response.getId()),
			() -> assertEquals(model.getName(), response.getName())
		);

	}

	@Test
	void 紐⑤뜽_?꾩껜_議고쉶_?깃났() {

		Pageable pageable = PageRequest.of(0, 10);

		List<Model> modelList = List.of(model);
		Page<Model> modelPage = new PageImpl<>(modelList, pageable, modelList.size());

		given(modelRepository.findAllByDeletedAtIsNull(pageable))
			.willReturn(modelPage);

		Page<ModelResponse> responsePage = modelService.findAllModel(pageable);

		assertAll(
			() -> assertNotNull(responsePage),
			() -> assertEquals(1, responsePage.getTotalElements()),
			() -> assertEquals(model.getName(), responsePage.getContent().get(0).getName()),
			() -> assertEquals(model.getColor(), responsePage.getContent().get(0).getColor())
		);

	}

	@Test
	void 紐⑤뜽_?섏젙_?깃났() {

		Long modelId = 1L;

		ModelUpdateRequest request = new ModelUpdateRequest("?섏젙??紐⑤뜽紐?, ModelColor.RED, "?섏젙??紐⑤뜽?ㅻ챸", "/image.png",
			ModelCategory.SUV, "7", 1200000L);

		given(modelRepository.findByIdAndDeletedAtIsNull(modelId)).willReturn(Optional.of(model));

		ModelResponse response = modelService.updateModel(modelId, request);

		assertAll(
			() -> assertNotNull(response),
			() -> assertEquals(modelId, response.getId()),
			() -> assertEquals("?섏젙??紐⑤뜽紐?, response.getName()),
			() -> assertEquals("?섏젙??紐⑤뜽?ㅻ챸", response.getDescription()),
			() -> assertEquals("?섏젙??紐⑤뜽紐?, model.getName()),
			() -> assertEquals("?섏젙??紐⑤뜽?ㅻ챸", model.getDescription())
		);

	}

	@Test
	void 紐⑤뜽_??젣_?깃났() {

		Long modelId = 1L;

		given(modelRepository.findByIdAndDeletedAtIsNull(modelId)).willReturn(Optional.of(model));

		modelService.deleteModel(modelId);

		assertNotNull(model.getDeletedAt());
	}

	@Test
	void 留덉뒪?곗슜_??젣??紐⑤뜽_議고쉶_?깃났() {

		model.setDeletedAt();

		Long modelId = model.getId();
		given(modelRepository.findById(modelId)).willReturn(Optional.of(model));

		ModelMasterResponse response = modelService.findModelForMaster(modelId);

		assertAll(
			() -> assertNotNull(response),
			() -> assertEquals(modelId, response.getId()),
			() -> assertEquals(model.getName(), response.getName())
		);
	}

	@Test
	void 留덉뒪?곗슜_紐⑤뜽_?꾩껜_議고쉶_?깃났() {

		Pageable pageable = PageRequest.of(0, 10);
		// ??젣???곗씠??議고쉶??寃쎌슦 "true"
		String deletedFilter = "true";

		List<Model> modelList = List.of(model);
		Page<Model> modelPage = new PageImpl<>(modelList, pageable, modelList.size());

		given(modelRepository.findAllModel(pageable, deletedFilter)).willReturn(modelPage);

		Page<ModelMasterResponse> responsePage = modelService.findAllModelForMaster(pageable, deletedFilter);

		assertAll(
			() -> assertNotNull(responsePage),
			() -> assertEquals(1, responsePage.getTotalElements()),
			() -> assertEquals(model.getName(), responsePage.getContent().get(0).getName())
		);
	}

	@Test
	void 議댁옱?섏?_?딅뒗_紐⑤뜽_?몄텧???먮윭異쒕젰() {

		Model anotherModel = Model.builder().id(2L).build();

		given(modelRepository.findByIdAndDeletedAtIsNull(anotherModel.getId())).willReturn(Optional.empty());
		ModelException exception = assertThrows(ModelException.class, () -> {
			modelService.findModel(anotherModel.getId());
		});

		assertEquals(ModelErrorCode.MODEL_NOT_FOUND, exception.getBaseCode());
	}

	@Test
	void ?대?_??젣??紐⑤뜽_??젣???먮윭異쒕젰() {

		model.setDeletedAt();

		given(modelRepository.findByIdAndDeletedAtIsNull(model.getId())).willReturn(Optional.of(model));

		ModelException exception = assertThrows(ModelException.class, () -> {
			modelService.deleteModel(model.getId());
		});

		assertEquals(ModelErrorCode.MODEL_ALREADY_DELETED, exception.getBaseCode());
	}

}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\mycar\service\MyCarServiceImplTest.java =====
package com.example.osid.domain.mycar.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.BDDMockito.*;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.entity.enums.Role;
import com.example.osid.domain.model.entity.Model;
import com.example.osid.domain.model.enums.ModelColor;
import com.example.osid.domain.mycar.dto.MyCarListResponse;
import com.example.osid.domain.mycar.dto.MyCarResponse;
import com.example.osid.domain.mycar.entity.Mycar;
import com.example.osid.domain.mycar.exception.MyCarErrorCode;
import com.example.osid.domain.mycar.exception.MyCarException;
import com.example.osid.domain.mycar.repository.MycarRepository;
import com.example.osid.domain.option.entity.Option;
import com.example.osid.domain.order.entity.OrderOption;
import com.example.osid.domain.order.entity.Orders;
import com.example.osid.domain.order.enums.OrderStatus;
import com.example.osid.domain.order.repository.OrderRepository;
import com.example.osid.domain.user.entity.User;

@ExtendWith(MockitoExtension.class)
class MyCarServiceImplTest {

	@Mock
	private MycarRepository mycarRepository;
	@Mock
	private OrderRepository orderRepository;

	@InjectMocks
	private MyCarServiceImpl myCarService;
	private User user;
	private CustomUserDetails customUserDetails;
	private Orders orders;
	private Mycar myCar;
	private User user2;
	private Mycar myCar2;
	private Orders orders2;
	private Model model;
	private Option option;
	private List<OrderOption> orderOptionList;

	@BeforeEach
	void setUp() {

		user = User.builder()
			.id(1L)
			.isDeleted(false)
			.role(Role.USER)
			.build();

		model = Model.builder()
			.id(1L)
			.name("?뚯뒪??紐⑤뜽紐?)
			.color(ModelColor.RED)
			.description("紐⑤뜽 ?ㅻ챸")
			.deletedAt(null)
			.build();

		option = Option.builder()
			.id(1L)
			.name("?뚯뒪???듭뀡紐?)
			.description("?듭뀡 ?ㅻ챸")
			.deletedAt(null)
			.build();

		orderOptionList = List.of(
			OrderOption.builder()
				.id(1L)
				.option(option)
				.orders(orders)
				.build()
		);

		orders = Orders.builder().
			id(1L)
			.user(user)
			.model(model)
			.orderOptions(orderOptionList)
			.bodyNumber("test_body_number")
			.orderStatus(OrderStatus.COMPLETED)
			.build();

		myCar = Mycar.builder()
			.id(1L)
			.orders(orders)
			.user(user)
			.deletedAt(null)
			.build();

		user2 = User.builder()
			.id(2L)
			.email("userMail@email.com")
			.password("user_password")
			.isDeleted(false)
			.role(Role.USER)
			.build();

		orders2 = Orders.builder().
			id(2L)
			.user(user2)
			.orderStatus(OrderStatus.ORDERED)
			.build();

		myCar2 = Mycar.builder()
			.id(2L)
			.user(user2)
			.deletedAt(null)
			.build();

		customUserDetails = CustomUserDetails.fromUser(user);

	}

	@Test
	@DisplayName("??李⑤웾 ?⑥씪 議고쉶 ?깃났")
	void findMyCar_success() {

		Long myCarId = 1L;
		given(mycarRepository.findByIdAndDeletedAtIsNull(myCar.getId())).willReturn(Optional.of(myCar));
		MyCarResponse response = myCarService.findMyCar(customUserDetails, myCarId);

		assertAll(
			() -> assertNotNull(response),
			() -> assertEquals(myCar.getOrders().getBodyNumber(), response.getBodyNumber())
		);
	}

	@Test
	@DisplayName("??李⑤웾 ?꾩껜 議고쉶 ?깃났")
	void findAllMyCar_success() {

		Pageable pageable = PageRequest.of(0, 10);

		List<Mycar> myCarList = List.of(myCar);
		Page<Mycar> myCarPage = new PageImpl<>(myCarList, pageable, myCarList.size());

		given(mycarRepository.findAllByUserIdAndDeletedAtIsNull(customUserDetails.getId(), pageable))
			.willReturn(myCarPage);

		Page<MyCarListResponse> responsePage = myCarService.findAllMyCar(customUserDetails, pageable);

		assertAll(
			() -> assertNotNull(responsePage),
			() -> assertEquals(1, responsePage.getTotalElements()),
			() -> assertEquals(myCar.getOrders().getModel().getName(), responsePage.getContent().get(0).getMyCarName())
		);
	}

	@Test
	@DisplayName("??李⑤웾 ??젣 ?깃났")
	void deleteMyCar_success() {

		Long myCarId = 1L;

		given(mycarRepository.findByIdAndDeletedAtIsNull(myCarId)).willReturn(Optional.of(myCar));

		myCarService.deleteMyCar(customUserDetails, myCarId);

		assertNotNull(myCar.getDeletedAt());
	}

	@Test
	@DisplayName("???뚯쑀媛 ?꾨땶 myCar ?몄텧???먮윭 異쒕젰")
	void findMyCarError() {

		// 濡쒓렇?명븳 ?좎? = 1
		// ?몄텧??myCar = 2
		Long myCarId = 2L;
		given(mycarRepository.findByIdAndDeletedAtIsNull(myCarId)).willReturn(Optional.of(myCar2));

		MyCarException ex = assertThrows(MyCarException.class, () -> {
			myCarService.findMyCar(customUserDetails, myCarId);
		});

		assertEquals(MyCarErrorCode.MY_CAR_NOT_OWED, ex.getBaseCode());

	}

	@Test
	@DisplayName("?대? ?깅줉??李⑤웾 ?깅줉???먮윭 異쒕젰")
	void createMyCar_Error() {

		given(orderRepository.findWithOptionsById(orders.getId())).willReturn(Optional.of(orders));
		given(mycarRepository.existsByOrdersId(orders.getId())).willReturn(true);

		MyCarException ex = assertThrows(MyCarException.class, () -> {
			myCarService.saveMyCar(orders.getId());
		});

		assertEquals(MyCarErrorCode.CAR_ALREADY_OWNED, ex.getBaseCode());

	}

}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\option\service\OptionPagingCacheTest.java =====
package com.example.osid.domain.option.service;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.CacheManager;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.util.StopWatch;

@SpringBootTest
class OptionPagingCacheTest {

	@Autowired
	private OptionService optionService;

	@Autowired
	private CacheManager cacheManager;

	@Test
	@DisplayName("?듭뀡 罹먯떆?곸슜 ?띾룄?뚯뒪??)
	void findAllOption_Cache() {
		Pageable pageable = PageRequest.of(0, 10);

		// 泥??몄텧 (DB hit)
		StopWatch stopWatch1 = new StopWatch();
		stopWatch1.start();
		optionService.findAllOption(pageable);
		stopWatch1.stop();
		System.out.println("泥??몄텧 (DB HIT) 嫄몃┛ ?쒓컙(ms): " + stopWatch1.getTotalTimeMillis());

		// ??踰덉㎏ ?몄텧 (罹먯떆 hit)
		StopWatch stopWatch2 = new StopWatch();
		stopWatch2.start();
		optionService.findAllOption(pageable);
		stopWatch2.stop();
		System.out.println("??踰덉㎏ ?몄텧 (罹먯떆 HIT) 嫄몃┛ ?쒓컙(ms): " + stopWatch2.getTotalTimeMillis());

		// 罹먯떆 ??젣
		cacheManager.getCache("options").clear();

		// ?ㅼ떆 ?몄텧 (DB hit)
		StopWatch stopWatch = new StopWatch();
		stopWatch.start();
		optionService.findAllOption(pageable);
		stopWatch.stop();
		System.out.println("罹먯떆 ??젣 ???ы샇異?嫄몃┛ ?쒓컙(ms): " + stopWatch.getTotalTimeMillis());

	}

}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\option\service\OptionServiceImplTest.java =====
package com.example.osid.domain.option.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.BDDMockito.*;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.example.osid.domain.option.dto.OptionMasterResponse;
import com.example.osid.domain.option.dto.OptionRequest;
import com.example.osid.domain.option.dto.OptionResponse;
import com.example.osid.domain.option.dto.OptionUpdateRequest;
import com.example.osid.domain.option.entity.Option;
import com.example.osid.domain.option.enums.OptionCategory;
import com.example.osid.domain.option.exception.OptionErrorCode;
import com.example.osid.domain.option.exception.OptionException;
import com.example.osid.domain.option.repository.OptionRepository;

@ExtendWith(MockitoExtension.class)
class OptionServiceImplTest {

	@Mock
	private OptionRepository optionRepository;

	@InjectMocks
	private OptionServiceImpl optionService;
	private Option option;

	@BeforeEach
	void setUp() {

		option = Option.builder()
			.id(1L)
			.name("?뚯뒪???듭뀡紐?)
			.description("?듭뀡 ?ㅻ챸")
			.deletedAt(null)
			.build();

	}

	@Test
	void ?듭뀡_?앹꽦_?깃났() {
		OptionRequest request = new OptionRequest(
			"異붽? ?듭뀡", "異붽? ?ㅻ챸", "/image2.png", OptionCategory.AUTO_PARKING, 1200000L
		);

		optionService.createOption(request);

		verify(optionRepository).save(any(Option.class));
	}

	@Test
	void ?듭뀡_?④굔_議고쉶_?깃났() {

		Long optionId = 1L;

		given(optionRepository.findByIdAndDeletedAtIsNull(optionId)).willReturn(Optional.of(option));
		OptionResponse response = optionService.findOption(optionId);
		assertAll(
			() -> assertNotNull(response),
			() -> assertEquals(option.getId(), response.getId()),
			() -> assertEquals(option.getName(), response.getName())
		);

	}

	@Test
	void ?듭뀡_?꾩껜_議고쉶_?깃났() {

		Pageable pageable = PageRequest.of(0, 10);

		List<Option> optionList = List.of(option);
		Page<Option> optionPage = new PageImpl<>(optionList, pageable, optionList.size());

		given(optionRepository.findAllByDeletedAtIsNull(pageable))
			.willReturn(optionPage);

		Page<OptionResponse> responsePage = optionService.findAllOption(pageable);

		assertAll(
			() -> assertNotNull(responsePage),
			() -> assertEquals(1, responsePage.getTotalElements()),
			() -> assertEquals(option.getId(), responsePage.getContent().get(0).getId())
		);

	}

	@Test
	void ?듭뀡_?섏젙_?깃났() {

		Long optionId = 1L;

		OptionUpdateRequest request = new OptionUpdateRequest("?섏젙???듭뀡紐?, "?섏젙???듭뀡?ㅻ챸", "/image.png",
			OptionCategory.AUTO_PARKING, 1200002L);

		given(optionRepository.findByIdAndDeletedAtIsNull(optionId)).willReturn(Optional.of(option));

		OptionResponse response = optionService.updateOption(optionId, request);

		assertAll(
			() -> assertNotNull(response),
			() -> assertEquals(optionId, response.getId()),
			() -> assertEquals("?섏젙???듭뀡紐?, response.getName()),
			() -> assertEquals("?섏젙???듭뀡?ㅻ챸", response.getDescription()),
			() -> assertEquals("?섏젙???듭뀡紐?, option.getName()),
			() -> assertEquals("?섏젙???듭뀡?ㅻ챸", option.getDescription())
		);

	}

	@Test
	void ?듭뀡_??젣_?깃났() {

		Long optionId = 1L;

		given(optionRepository.findByIdAndDeletedAtIsNull(optionId)).willReturn(Optional.of(option));

		optionService.deleteOption(optionId);

		assertNotNull(option.getDeletedAt());
	}

	@Test
	void 留덉뒪?곗슜_??젣???듭뀡_議고쉶_?깃났() {

		option.setDeletedAt();

		Long optionId = 1L;

		given(optionRepository.findById(optionId)).willReturn(Optional.of(option));

		OptionMasterResponse response = optionService.findOptionForMaster(optionId);

		assertAll(
			() -> assertNotNull(response),
			() -> assertEquals(optionId, response.getId()),
			() -> assertEquals(option.getName(), response.getName())
		);
	}

	@Test
	void 留덉뒪?곗슜_紐⑤뜽_?꾩껜_議고쉶_?깃났() {

		option.setDeletedAt();

		Pageable pageable = PageRequest.of(0, 10);
		// ??젣???곗씠??議고쉶??寃쎌슦 "true"
		String deletedFilter = "true";

		List<Option> optionList = List.of(option);
		Page<Option> optionPage = new PageImpl<>(optionList, pageable, optionList.size());

		given(optionRepository.findAllOption(pageable, deletedFilter)).willReturn(optionPage);

		Page<OptionMasterResponse> responsePage = optionService.findAllOptionForMaster(pageable, deletedFilter);

		assertAll(
			() -> assertNotNull(responsePage),
			() -> assertEquals(1, responsePage.getTotalElements()),
			() -> assertEquals(option.getId(), responsePage.getContent().get(0).getId())
		);
	}

	@Test
	void 議댁옱?섏?_?딅뒗_?듭뀡_?몄텧???먮윭異쒕젰() {

		Option anotherOption = Option.builder().id(2L).build();

		given(optionRepository.findByIdAndDeletedAtIsNull(anotherOption.getId())).willReturn(Optional.empty());
		OptionException exception = assertThrows(OptionException.class, () -> {
			optionService.findOption(anotherOption.getId());
		});

		assertEquals(OptionErrorCode.OPTION_NOT_FOUND, exception.getBaseCode());
	}

	@Test
	void ?대?_??젣???듭뀡_?ъ궘?쒖떆_?먮윭異쒕젰() {

		option.setDeletedAt();
		Long optionId = 1L;

		given(optionRepository.findByIdAndDeletedAtIsNull(optionId)).willReturn(Optional.of(option));

		OptionException exception = assertThrows(OptionException.class, () -> {
			optionService.deleteOption(optionId);
		});

		assertEquals(OptionErrorCode.OPTION_ALREADY_DELETED, exception.getBaseCode());
	}
}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\order\service\OrderIntegerationTest.java =====
package com.example.osid.domain.order.service;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.openapitools.jackson.nullable.JsonNullable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.transaction.annotation.Transactional;

import com.example.osid.common.auth.authentication.JwtUtil;
import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.dealer.exception.DealerErrorCode;
import com.example.osid.domain.dealer.exception.DealerException;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.master.entity.Master;
import com.example.osid.domain.master.exception.MasterErrorCode;
import com.example.osid.domain.master.exception.MasterException;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.order.dto.request.OrderRequestDto;
import com.example.osid.domain.user.entity.User;
import com.example.osid.domain.user.exception.UserErrorCode;
import com.example.osid.domain.user.exception.UserException;
import com.example.osid.domain.user.repository.UserRepository;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
@Transactional
@AutoConfigureMockMvc
public class OrderIntegerationTest {

	@Autowired
	private MockMvc mockMvc;

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private DealerRepository dealerRepository;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private MasterRepository masterRepository;

	@Autowired
	private ObjectMapper objectMapper;

	private String masterAccessToken;
	private Long masterId = 1L;

	private String userAccessToken;
	private Long userId = 1L;

	private String dealerAccessToken;
	private Long dealerId = 1L;

	private Long orderId = 1L;

	@BeforeEach
	void setUp() {
		User testUser = userRepository.findById(userId)
			.orElseThrow(() -> new UserException(UserErrorCode.USER_NOT_FOUND));

		userAccessToken = jwtUtil.createToken(
			testUser.getEmail(),
			testUser.getName(),
			testUser.getRole().toString(),
			testUser.getId()
		);

		Dealer testDealer = dealerRepository.findById(userId)
			.orElseThrow(() -> new DealerException(DealerErrorCode.DEALER_NOT_FOUND));

		dealerAccessToken = jwtUtil.createToken(
			testDealer.getEmail(),
			testDealer.getName(),
			testDealer.getRole().toString(),
			testDealer.getId()
		);

		Master testMaster = masterRepository.findById(userId)
			.orElseThrow(() -> new MasterException(MasterErrorCode.MASTER_NOT_FOUND));

		masterAccessToken = jwtUtil.createToken(
			testMaster.getEmail(),
			testMaster.getName(),
			testMaster.getRole().toString(),
			testMaster.getId()
		);

	}

	@Test
	@DisplayName("User 二쇰Ц?앹꽦_?묎렐?ㅽ뙣")
	void createOrderAsUser() throws Exception {
		// given
		OrderRequestDto.Add dto = new OrderRequestDto.Add(
			"user01@example.com",
			List.of(1L, 2L, 3L),
			1L,
			"??꾩떆 以묎뎄..."
		);

		// when
		ResultActions actions = mockMvc.perform(
			post("/api/dealers/order")
				.header("Authorization", "Bearer " + userAccessToken)
				.contentType(MediaType.APPLICATION_JSON)
				.content(new ObjectMapper().writeValueAsString(dto))
		);

		// then
		actions.andExpect(status().isForbidden())
			.andDo(print());
	}

	@Test
	@DisplayName("Master 二쇰Ц?앹꽦_?묎렐?ㅽ뙣")
	void createOrderAsMaster() throws Exception {
		// given
		OrderRequestDto.Add dto = new OrderRequestDto.Add(
			"user01@example.com",
			List.of(1L, 2L, 3L),
			1L,
			"??꾩떆 以묎뎄..."
		);

		// when
		ResultActions actions = mockMvc.perform(
			post("/api/dealers/order")
				.header("Authorization", "Bearer " + masterAccessToken)
				.contentType(MediaType.APPLICATION_JSON)
				.content(new ObjectMapper().writeValueAsString(dto))
		);

		// then
		actions.andExpect(status().isForbidden())
			.andDo(print());
	}

	@Test
	@DisplayName("Dealer 二쇰Ц?앹꽦_?깃났")
	void createOrderAsDealer() throws Exception {
		// given
		OrderRequestDto.Add dto = new OrderRequestDto.Add(
			"user01@example.com",
			List.of(1L, 2L, 3L),
			1L,
			"??꾩떆 以묎뎄..."
		);

		// when
		ResultActions actions = mockMvc.perform(
			post("/api/dealers/order")
				.header("Authorization", "Bearer " + dealerAccessToken)
				.contentType(MediaType.APPLICATION_JSON)
				.content(new ObjectMapper().writeValueAsString(dto))
		);

		// then
		actions.andExpect(status().isCreated())
			.andDo(print());
	}

	@Test
	@DisplayName("User 二쇰Ц?섏젙_?묎렐?ㅽ뙣")
	void updateOrderAsUser() throws Exception {
		// given
		OrderRequestDto.Update dto = new OrderRequestDto.Update(
			JsonNullable.of("?쒖슱 媛뺣궓"),
			null,
			JsonNullable.undefined(),
			JsonNullable.undefined()
		);

		// when
		ResultActions actions = mockMvc.perform(
			patch("/api/dealers/order/{id}", orderId)
				.header("Authorization", "Bearer " + userAccessToken)
				.contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(dto))
		);

		// then
		actions.andExpect(status().isForbidden())
			.andDo(print());
	}

	@Test
	@DisplayName("Master 二쇰Ц?섏젙_?묎렐?ㅽ뙣")
	void updateOrderAsMaster() throws Exception {
		// given
		OrderRequestDto.Update dto = new OrderRequestDto.Update(
			JsonNullable.of("?쒖슱 媛뺣궓"),
			null,
			JsonNullable.undefined(),
			JsonNullable.undefined()
		);

		// when
		ResultActions actions = mockMvc.perform(
			patch("/api/dealers/order/{id}", orderId)
				.header("Authorization", "Bearer " + masterAccessToken)
				.contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(dto))
		);

		// then
		actions.andExpect(status().isForbidden())
			.andDo(print());
	}

	@Test
	@DisplayName("Dealer 二쇰Ц?섏젙_?깃났")
	void updateOrderAsDealer() throws Exception {
		// given
		OrderRequestDto.Update dto = new OrderRequestDto.Update(
			JsonNullable.of("?쒖슱 媛뺣궓"),
			null,
			JsonNullable.undefined(),
			JsonNullable.undefined()
		);

		// when
		ResultActions actions = mockMvc.perform(
			patch("/api/dealers/order/{id}", orderId)
				.header("Authorization", "Bearer " + dealerAccessToken)
				.contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(dto))
		);

		// then
		actions
			.andDo(print())
			.andExpect(status().isOk());
	}

	@Test
	@DisplayName("User 二쇰Ц議고쉶_?묎렐?깃났")
	void findOrderAsUser() throws Exception {

		// when
		ResultActions actions = mockMvc.perform(
			get("/api/order/{id}", orderId)
				.header("Authorization", "Bearer " + userAccessToken)
				.contentType(MediaType.APPLICATION_JSON)

		);

		// then
		actions.andExpect(status().isOk())
			.andDo(print());
	}

	@Test
	@DisplayName("Master 二쇰Ц議고쉶_?깃났")
	void findOrderAsMaster() throws Exception {

		// when
		ResultActions actions = mockMvc.perform(
			get("/api/order/{id}", orderId)
				.header("Authorization", "Bearer " + masterAccessToken)
				.contentType(MediaType.APPLICATION_JSON)

		);

		// then
		actions.andExpect(status().isOk())
			.andDo(print());
	}

	@Test
	@DisplayName("Dealer 二쇰Ц議고쉶_?깃났")
	void findOrderAsDealer() throws Exception {

		// when
		ResultActions actions = mockMvc.perform(
			get("/api/order/{id}", orderId)
				.header("Authorization", "Bearer " + dealerAccessToken)
				.contentType(MediaType.APPLICATION_JSON)

		);

		// then
		actions
			.andDo(print())
			.andExpect(status().isOk());
	}

	@Test
	@DisplayName("User 二쇰Ц?꾩껜議고쉶_?묎렐?깃났")
	void findAllOrderAsUser() throws Exception {

		// when
		ResultActions actions = mockMvc.perform(
			get("/api/order")
				.header("Authorization", "Bearer " + userAccessToken)
				.contentType(MediaType.APPLICATION_JSON)

		);

		// then
		actions.andExpect(status().isOk())
			.andDo(print());
	}

	@Test
	@DisplayName("Master 二쇰Ц?꾩껜議고쉶_?깃났")
	void findAllOrderAsMaster() throws Exception {

		// when
		ResultActions actions = mockMvc.perform(
			get("/api/order")
				.header("Authorization", "Bearer " + masterAccessToken)
				.contentType(MediaType.APPLICATION_JSON)

		);

		// then
		actions.andExpect(status().isOk())
			.andDo(print());
	}

	@Test
	@DisplayName("Dealer 二쇰Ц?꾩껜議고쉶_?깃났")
	void findAllOrderAsDealer() throws Exception {

		// when
		ResultActions actions = mockMvc.perform(
			get("/api/order")
				.header("Authorization", "Bearer " + dealerAccessToken)
				.contentType(MediaType.APPLICATION_JSON)

		);

		// then
		actions
			.andDo(print())
			.andExpect(status().isOk());
	}

	@Test
	@DisplayName("User 二쇰Ц??젣_?묎렐?ㅽ뙣")
	void deleteOrderAsUser() throws Exception {

		// when
		ResultActions actions = mockMvc.perform(
			delete("/api/dealers/order/{id}", orderId)
				.header("Authorization", "Bearer " + userAccessToken)
				.contentType(MediaType.APPLICATION_JSON)

		);

		// then
		actions.andExpect(status().isForbidden())
			.andDo(print());
	}

	@Test
	@DisplayName("Master 二쇰Ц??젣_?묎렐?ㅽ뙣")
	void deleteOrderAsMaster() throws Exception {

		// when
		ResultActions actions = mockMvc.perform(
			delete("/api/dealers/order/{id}", orderId)
				.header("Authorization", "Bearer " + masterAccessToken)
				.contentType(MediaType.APPLICATION_JSON)

		);

		// then
		actions.andExpect(status().isForbidden())
			.andDo(print());
	}

	@Test
	@DisplayName("Dealer 二쇰Ц??젣_?깃났")
	void deleteOrderAsDealer() throws Exception {

		// when
		ResultActions actions = mockMvc.perform(
			delete("/api/dealers/order/{id}", orderId)
				.header("Authorization", "Bearer " + dealerAccessToken)
				.contentType(MediaType.APPLICATION_JSON)

		);

		// then
		actions
			.andDo(print())
			.andExpect(status().isOk());
	}

}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\order\service\OrderServiceTest.java =====
package com.example.osid.domain.order.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.BDDMockito.*;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.amqp.rabbit.core.RabbitTemplate;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.domain.dealer.entity.Dealer;
import com.example.osid.domain.dealer.exception.DealerErrorCode;
import com.example.osid.domain.dealer.exception.DealerException;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.model.entity.Model;
import com.example.osid.domain.model.enums.ModelCategory;
import com.example.osid.domain.model.enums.ModelColor;
import com.example.osid.domain.model.exception.ModelErrorCode;
import com.example.osid.domain.model.exception.ModelException;
import com.example.osid.domain.model.repository.ModelRepository;
import com.example.osid.domain.option.entity.Option;
import com.example.osid.domain.option.enums.OptionCategory;
import com.example.osid.domain.option.exception.OptionErrorCode;
import com.example.osid.domain.option.exception.OptionException;
import com.example.osid.domain.option.repository.OptionRepository;
import com.example.osid.domain.order.dto.request.OrderRequestDto;
import com.example.osid.domain.order.repository.OrderRepository;
import com.example.osid.domain.order.repository.OrderSearch;
import com.example.osid.domain.user.entity.User;
import com.example.osid.domain.user.exception.UserErrorCode;
import com.example.osid.domain.user.exception.UserException;
import com.example.osid.domain.user.repository.UserRepository;
import com.example.osid.event.repository.FailedEventRepository;

@ExtendWith(MockitoExtension.class)
public class OrderServiceTest {
	@Mock
	private OrderRepository orderRepository;
	@Mock
	private OptionRepository optionRepository;
	@Mock
	private ModelRepository modelRepository;
	@Mock
	private UserRepository userRepository;
	@Mock
	private DealerRepository dealerRepository;
	@Mock
	private OrderSearch orderSearch;
	@Mock
	private MasterRepository masterRepository;
	@Mock
	private RabbitTemplate rabbitTemplate;
	@Mock
	private FailedEventRepository failedEventRepository;
	@InjectMocks
	private OrderService orderService;

	@Test
	@DisplayName("?쒕윭瑜?李얠쓣 ???놁쓬")
	void dealerNotFound() {

		// given
		String dealerEmail = "nodealer@example.com";

		Dealer fakeDealer = Dealer.builder()
			.id(99L)
			.email(dealerEmail)
			.password("dummy")
			.build();
		CustomUserDetails userDetails = CustomUserDetails.fromDealer(fakeDealer);

		OrderRequestDto.Add requestDto = new OrderRequestDto.Add(
			"user@example.com",
			List.of(1L, 2L),
			1L,
			"?쒖슱??媛뺣궓援?
		);

		given(dealerRepository.findByEmailAndIsDeletedFalse(dealerEmail))
			.willReturn(Optional.empty());

		// when
		DealerException ex = assertThrows(
			DealerException.class,
			() -> orderService.createOrder(userDetails, requestDto)
		);

		// then
		assertEquals(DealerErrorCode.DEALER_NOT_FOUND, ex.getBaseCode());

	}

	@Test
	@DisplayName("?좎?瑜?李얠쓣 ???놁쓬")
	void userNotFound() {

		// given
		String dealerEmail = "nodealer@example.com";

		Dealer fakeDealer = Dealer.builder()
			.id(99L)
			.email(dealerEmail)
			.password("dummy")
			.build();
		CustomUserDetails userDetails = CustomUserDetails.fromDealer(fakeDealer);

		OrderRequestDto.Add requestDto = new OrderRequestDto.Add(
			"user@example.com",
			List.of(1L, 2L),
			1L,
			"?쒖슱??媛뺣궓援?
		);

		given(dealerRepository.findByEmailAndIsDeletedFalse(dealerEmail))
			.willReturn(Optional.of(fakeDealer));

		given(userRepository.findByEmailAndIsDeletedFalse(requestDto.getUserEmail()))
			.willReturn(Optional.empty());

		// when
		UserException ex = assertThrows(
			UserException.class,
			() -> orderService.createOrder(userDetails, requestDto)
		);

		// then
		assertEquals(UserErrorCode.USER_NOT_FOUND, ex.getBaseCode());

	}

	@Test
	@DisplayName("紐⑤뜽??李얠쓣 ???놁쓬")
	void modelNotFound() {

		// given
		String dealerEmail = "nodealer@example.com";
		String userEmail = "user@example.com";

		Dealer fakeDealer = Dealer.builder()
			.id(99L)
			.email(dealerEmail)
			.password("dummy")
			.build();
		CustomUserDetails userDetails = CustomUserDetails.fromDealer(fakeDealer);

		User fakeUser = User.builder()
			.id(99L)
			.email(userEmail)
			.password("dummy")
			.build();

		OrderRequestDto.Add requestDto = new OrderRequestDto.Add(
			"user@example.com",
			List.of(1L, 2L),
			1L,
			"?쒖슱??媛뺣궓援?
		);

		given(dealerRepository.findByEmailAndIsDeletedFalse(dealerEmail))
			.willReturn(Optional.of(fakeDealer));

		given(userRepository.findByEmailAndIsDeletedFalse(requestDto.getUserEmail()))
			.willReturn(Optional.of(fakeUser));

		given(modelRepository.findById(requestDto.getModelId()))
			.willReturn(Optional.empty());

		// when
		ModelException ex = assertThrows(
			ModelException.class,
			() -> orderService.createOrder(userDetails, requestDto)
		);

		// then
		assertEquals(ModelErrorCode.MODEL_NOT_FOUND, ex.getBaseCode());

	}

	@Test
	@DisplayName("?듭뀡??李얠쓣 ???놁쓬")
	void optionNotFound() {

		// given
		String dealerEmail = "nodealer@example.com";
		String userEmail = "user@example.com";

		Dealer fakeDealer = Dealer.builder()
			.id(99L)
			.email(dealerEmail)
			.password("dummy")
			.build();

		CustomUserDetails userDetails = CustomUserDetails.fromDealer(fakeDealer);

		User fakeUser = User.builder()
			.id(99L)
			.email(userEmail)
			.password("dummy")
			.build();

		Model fakeModel = Model.builder()
			.id(1L)
			.name("紐⑤뜽1")
			.color(ModelColor.RED)
			.description("?ㅻ챸")
			.image("/image.png")
			.category(ModelCategory.SAFETY)
			.seatCount("5")
			.price(100000000L)
			.build();

		OrderRequestDto.Add requestDto = new OrderRequestDto.Add(
			"user@example.com",
			List.of(1L, 2L),
			1L,
			"?쒖슱??媛뺣궓援?
		);

		given(dealerRepository.findByEmailAndIsDeletedFalse(dealerEmail))
			.willReturn(Optional.of(fakeDealer));

		given(userRepository.findByEmailAndIsDeletedFalse(requestDto.getUserEmail()))
			.willReturn(Optional.of(fakeUser));

		given(modelRepository.findById(requestDto.getModelId()))
			.willReturn(Optional.of(fakeModel));

		given(optionRepository.findByIdIn(requestDto.getOption()))
			.willReturn(List.of());

		// when
		OptionException ex = assertThrows(
			OptionException.class,
			() -> orderService.createOrder(userDetails, requestDto)
		);

		// then
		assertEquals(OptionErrorCode.OPTION_NOT_FOUND, ex.getBaseCode());

	}

	@Test
	@DisplayName("二쇰Ц ?앹꽦 ?깃났")
	void successCreateOrder() {

		// given
		String dealerEmail = "nodealer@example.com";
		String userEmail = "user@example.com";

		Dealer fakeDealer = Dealer.builder()
			.id(99L)
			.email(dealerEmail)
			.password("dummy")
			.build();

		CustomUserDetails userDetails = CustomUserDetails.fromDealer(fakeDealer);

		User fakeUser = User.builder()
			.id(99L)
			.email(userEmail)
			.password("dummy")
			.build();

		Model fakeModel = Model.builder()
			.id(1L)
			.name("紐⑤뜽1")
			.color(ModelColor.RED)
			.description("?ㅻ챸")
			.image("/image.png")
			.category(ModelCategory.SAFETY)
			.seatCount("5")
			.price(100000000L)
			.build();

		Option option1 = Option.builder()
			.id(1L)
			.name("?듭뀡1")
			.description("?ㅻ챸1")
			.image("image.png")
			.category(OptionCategory.ADAPTIVE_HEADLIGHTS)
			.price(100000L)
			.build();

		Option option2 = Option.builder()
			.id(2L)
			.name("?듭뀡2")
			.description("?ㅻ챸2")
			.image("image.png")
			.category(OptionCategory.DASHCAM)
			.price(100000L)
			.build();

		OrderRequestDto.Add requestDto = new OrderRequestDto.Add(
			"user@example.com",
			List.of(1L, 2L),
			1L,
			"?쒖슱??媛뺣궓援?
		);

		given(dealerRepository.findByEmailAndIsDeletedFalse(dealerEmail))
			.willReturn(Optional.of(fakeDealer));

		given(userRepository.findByEmailAndIsDeletedFalse(requestDto.getUserEmail()))
			.willReturn(Optional.of(fakeUser));

		given(modelRepository.findById(requestDto.getModelId()))
			.willReturn(Optional.of(fakeModel));

		given(optionRepository.findByIdIn(requestDto.getOption()))
			.willReturn(List.of(option1, option2));

		// when
		assertDoesNotThrow(() -> orderService.createOrder(userDetails, requestDto));

	}

}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\domain\user\service\UserServiceTest.java =====
package com.example.osid.domain.user.service;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.time.LocalDate;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.example.osid.common.auth.CustomUserDetails;
import com.example.osid.common.auth.EmailValidator;
import com.example.osid.domain.dealer.repository.DealerRepository;
import com.example.osid.domain.master.repository.MasterRepository;
import com.example.osid.domain.user.dto.request.UserDeletedRequestDto;
import com.example.osid.domain.user.dto.request.UserSignUpRequestDto;
import com.example.osid.domain.user.dto.request.UserUpdatedRequestDto;
import com.example.osid.domain.user.entity.User;
import com.example.osid.domain.user.repository.UserRepository;

class UserServiceTest {

	@Mock
	private UserRepository userRepository;
	@Mock
	private MasterRepository masterRepository;
	@Mock
	private DealerRepository dealerRepository;
	@Mock
	private PasswordEncoder passwordEncoder;
	@Mock
	private EmailValidator emailValidator;

	@InjectMocks
	private UserService userService;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.openMocks(this);
	}

	@Test
	void signUpUser_success() {
		// given: ?뚯뒪???낅젰 DTO瑜?紐⑦궧?섍퀬 ?꾨뱶蹂?諛섑솚媛??ㅼ젙
		UserSignUpRequestDto dto = mock(UserSignUpRequestDto.class);
		when(dto.getEmail()).thenReturn("user@example.com");                // ?대찓??諛섑솚媛?
		when(dto.getPassword()).thenReturn("12345678aA!");               // 鍮꾨?踰덊샇 諛섑솚媛?
		when(dto.getName()).thenReturn("?띻만??);                         // ?대쫫 諛섑솚媛?
		when(dto.getDateOfBirth()).thenReturn(LocalDate.of(1999, 1, 1));   // ?앸뀈?붿씪(LocalDate) 諛섑솚媛?
		when(dto.getPhoneNumber()).thenReturn("010-1234-5678");          // ?꾪솕踰덊샇 諛섑솚媛?
		when(dto.getAddress()).thenReturn("?쒖슱???댁찈援?);             // 二쇱냼 諛섑솚媛?

		// 鍮꾨?踰덊샇 ?뷀샇??寃곌낵 stub ?ㅼ젙
		when(passwordEncoder.encode("12345678aA!")).thenReturn("encodePwd");

		// when: ?ㅼ젣 ?쒕퉬??硫붿꽌???몄텧
		userService.signUpUser(dto);

		// then: ?대찓??以묐났 泥댄겕媛 ?몄텧?섏뿀?붿? 寃利?
		verify(emailValidator).validateDuplicateEmail("user@example.com");

		// ??λ맂 User 媛앹껜瑜?寃?ы븯湲??꾪빐 ArgumentCaptor ?ъ슜
		ArgumentCaptor<User> captor = ArgumentCaptor.forClass(User.class);
		verify(userRepository).save(captor.capture());                    // save() ?몄텧 ???몄옄 罹≪쿂
		User saved = captor.getValue();                                  // 罹≪쿂??User 媛앹껜 媛?몄삤湲?

		// ??λ맂 User 媛앹껜???꾨뱶媛 ?щ컮瑜몄? 寃利?
		assertEquals("user@example.com", saved.getEmail());            // ?대찓??寃利?
		assertEquals("encodePwd", saved.getPassword());         // ?뷀샇?붾맂 鍮꾨?踰덊샇 寃利?
		assertEquals("?띻만??, saved.getName());            // ?대쫫 寃利?
		assertEquals(LocalDate.of(1999, 1, 1), saved.getDateOfBirth()); // ?앸뀈?붿씪 寃利?
		assertEquals("010-1234-5678", saved.getPhoneNumber());    // ?꾪솕踰덊샇 寃利?
		assertEquals("?쒖슱???댁찈援?, saved.getAddress());         // 二쇱냼 寃利?
	}

	@Test
	void findbyUser_success() {
		// given: 濡쒓렇?명븳 ?ъ슜??ID ?ㅼ젙
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getEmail()).thenReturn("user@example.com");

		// given: ?ъ슜???뷀떚??紐⑦궧
		User user = User.builder()
			.id(1L)
			.email("user@example.com")
			.name("?띻만??)
			.password("encodedPwd")
			.dateOfBirth(LocalDate.of(1995, 5, 20))
			.phoneNumber("010-1111-2222")
			.address("?쒖슱 媛뺣궓援?)
			.build();
		when(userRepository.findByEmailAndIsDeletedFalse("user@example.com"))
			.thenReturn(Optional.of(user));

		// when
		var result = userService.findbyUser(userDetails);

		// then
		assertEquals(Long.valueOf(1L), result.getId());
		assertEquals("user@example.com", result.getEmail());
		assertEquals("?띻만??, result.getName());
		assertEquals(LocalDate.of(1995, 5, 20), result.getDateOfBirth());
		assertEquals("010-1111-2222", result.getPhoneNumber());
		assertEquals("?쒖슱 媛뺣궓援?, result.getAddress());
	}

	@Test
	void updatedUser_success() {
		// given
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getId()).thenReturn(1L);

		User user = User.builder()
			.id(1L)
			.name("Old Name")
			.phoneNumber("010-0000-0000")
			.address("Old Address")
			.build();
		when(userRepository.findById(1L)).thenReturn(Optional.of(user));

		UserUpdatedRequestDto dto = mock(UserUpdatedRequestDto.class);
		when(dto.getName()).thenReturn("New Name");
		when(dto.getPhoneNumber()).thenReturn("010-9999-9999");
		when(dto.getAddress()).thenReturn(null); // 二쇱냼??蹂寃??덊븿

		// when
		userService.updatedUser(userDetails, dto);

		// then
		assertEquals("New Name", user.getName());
		assertEquals("010-9999-9999", user.getPhoneNumber());
		assertEquals("Old Address", user.getAddress());
	}

	@Test
	void deletedUser_success() {
		// given
		CustomUserDetails userDetails = mock(CustomUserDetails.class);
		when(userDetails.getEmail()).thenReturn("user@example.com");

		User user = User.builder()
			.id(1L)
			.email("user@example.com")
			.password("encodedPwd")
			.isDeleted(false)
			.build();
		when(userRepository.findByEmailAndIsDeletedFalse("user@example.com"))
			.thenReturn(Optional.of(user));

		when(passwordEncoder.matches("Password1!", "encodedPwd")).thenReturn(true);

		UserDeletedRequestDto dto = mock(UserDeletedRequestDto.class);
		when(dto.getPassword()).thenReturn("Password1!");

		// when
		userService.deletedUser(userDetails, dto);

		// then
		assertTrue(user.isDeleted());
		assertNotNull(user.getDeletedAt());
	}

}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\event\service\FailedEventServiceTest.java =====
package com.example.osid.event.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.BDDMockito.*;

import java.util.Collections;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

import com.example.osid.config.RabbitMQConfig;
import com.example.osid.event.OrderCompletedEmailEvent;
import com.example.osid.event.dto.FailedEventResponse;
import com.example.osid.event.entity.FailedEvent;
import com.example.osid.event.enums.FailedEventType;
import com.example.osid.event.exception.FailedEventException;
import com.example.osid.event.repository.FailedEventRepository;

@ExtendWith(MockitoExtension.class)
class FailedEventServiceTest {

	@Mock
	private FailedEventRepository failedEventRepository;

	@Mock
	private RabbitTemplate rabbitTemplate;

	@InjectMocks
	private FailedEventService failedEventService;
	private FailedEvent failedEvent;

	@BeforeEach
	void setUp() {

		failedEvent = new FailedEvent(1L, 0, "ErrorMessage", FailedEventType.MY_CAR);
	}

	@Test
	@DisplayName("?ㅽ뙣 ?대깽???꾩껜 議고쉶 ?뚯뒪??)
	void findAllFailedEvent() {

		PageRequest pageable = PageRequest.of(0, 10);
		Page<FailedEvent> page = new PageImpl<>(Collections.singletonList(failedEvent));
		given(failedEventRepository.findAll(pageable)).willReturn(page);

		Page<FailedEventResponse> result = failedEventService.findAllFailedEvent(pageable);

		assertEquals(1, result.getTotalElements());
		assertEquals(failedEvent.getOrderId(), result.getContent().get(0).getOrderId());
	}

	@Test
	@DisplayName("?ㅽ뙣 ?대깽???ъ쟾???깃났 ?뚯뒪??)
	void retryFailedEvent() {

		Long failedEventId = 1L;

		given(failedEventRepository.findById(failedEventId)).willReturn(Optional.of(failedEvent));

		String result = failedEventService.retryFailedEvent(failedEventId);

		verify(rabbitTemplate, times(1))
			.convertAndSend(eq(RabbitMQConfig.EXCHANGE), eq(RabbitMQConfig.MY_CAR_ROUTING_KEY),
				any(OrderCompletedEmailEvent.class));

		assertEquals("OK", result);
	}

	@Test
	@DisplayName("?ㅽ뙣 ?대깽???ъ쟾????議댁옱?섏? ?딅뒗 寃쎌슦 ?덉쇅 諛쒖깮")
	void retryFailedEvent_NotFound() {

		Long failedEventId = 2L;
		given(failedEventRepository.findById(failedEventId)).willReturn(Optional.empty());

		assertThrows(FailedEventException.class, () -> failedEventService.retryFailedEvent(failedEventId));
	}
}
===== D:\Last\Car-Order-Tracker\src\test\java\com\example\osid\OsidApplicationTests.java =====
package com.example.osid;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class OsidApplicationTests {

    @Test
    void contextLoads() {
    }

}
